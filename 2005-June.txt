From urilith at sheep.berlios.de  Wed Jun  1 22:43:51 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Wed, 1 Jun 2005 22:43:51 +0200
Subject: [nmodule-commits] r8 - in trunk: . Documentation NModule.Dependency.Parser
Message-ID: <200506012043.j51KhpCb005399@sheep.berlios.de>

Author: urilith
Date: 2005-06-01 22:43:51 +0200 (Wed, 01 Jun 2005)
New Revision: 8

Added:
   trunk/AUTHORS
Modified:
   trunk/
   trunk/ChangeLog
   trunk/Documentation/DESIGN
   trunk/NModule.Dependency.Parser/nmodule-dep.g
   trunk/svkchangelog
Log:
 r41 at dreamshadow:  urilith | 2005-06-01 15:43:35 -0500
 Wed Jun 01, 2005 Michael Tindal (mtindal at paradoxpoint.com) -0500
 M Documentation/DESIGN
   * Updated the design to reflect the new operator (##) and precedence rules.
 M NModule.Dependency.Parser/nmodule-dep.g
   * Updated the parser to move opt (??) and loaded (##) to top-level.
 M svkchangelog
   * Copied the working version from dnsh.
 A AUTHORS
   * New file used to list the maintainers of the project.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:33
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:41

Added: trunk/AUTHORS
===================================================================
--- trunk/AUTHORS	2005-05-21 00:34:15 UTC (rev 7)
+++ trunk/AUTHORS	2005-06-01 20:43:51 UTC (rev 8)
@@ -0,0 +1,2 @@
+Michael Tindal (urilith at gentoo.org)
+Elfyn McBratley (beu at gentoo.org)

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-05-21 00:34:15 UTC (rev 7)
+++ trunk/ChangeLog	2005-06-01 20:43:51 UTC (rev 8)
@@ -1,3 +1,13 @@
+Wed Jun 01, 2005 Michael Tindal (mtindal at paradoxpoint.com) -0500
+M   Documentation/DESIGN
+  * Updated the design to reflect the new operator (##) and precedence rules.
+M   NModule.Dependency.Parser/nmodule-dep.g
+  * Updated the parser to move opt (??) and loaded (##) to top-level.
+M   svkchangelog
+  * Copied the working version from dnsh.
+A   AUTHORS
+  * New file used to list the maintainers of the project.
+
 Fri May 20, 2005 Michael Tindal (mtindal at paradoxpoint.com) -0500
 M   COPYING
   * Changed Ximian references to my name.

Modified: trunk/Documentation/DESIGN
===================================================================
--- trunk/Documentation/DESIGN	2005-05-21 00:34:15 UTC (rev 7)
+++ trunk/Documentation/DESIGN	2005-06-01 20:43:51 UTC (rev 8)
@@ -29,7 +29,7 @@
   plugin loading code for dependency resolution and proper initialization of interfaces:
 
   Assembly-Level Attributes:
-
+  
   AssemblyTitle:  The name of the assembly as referenced by depencies.
   AssemblyVersion:  Version of the assembly.
     -> AssemblyVersion is actually determined by the compiler, so it can be left as x.x.* or x.x.x.* or x.x.x.x depending on your preference.
@@ -50,23 +50,22 @@
           >=:  GREATER THAN EQUAL operator
           >>:  GREATER THAN operator
           ??:  OPTIONAL operator
+          ##:  LOADED operator
 
        Example:
           Elfblade.Core.Net.Xcp
-          (&& (>> Elfblade.Core.Net 2.0) (!= Elfblade.Core 1.0) (!! (<= Elfblade.Core.Net.Extensions 2.0)) (?? Elfblade.Core.Net.Extensions))
+          (&& (>> Elfblade.Core.Net 2.0) (!= Elfblade.Core 1.0) (!! (<= Elfblade.Core.Net.Extensions 2.0)) (?? (## Elfblade.Core.Net.Extensions)))
   
     -> While this might look strange at first, its very easy to parse.  For example, I could turn the following into the token tree:
-          NEST AND 
-            NEST GT "Elfblade.Core.net" VER "2.0" END 
-            NEST NEQ "Elfblade.Core" VER "1.0" END
-            NEST NOT
-              NEST LTEQ "Elfblade.Core.Net.Extensions" VER "2.0" END
-            END
-            NEST OPT "Elfblade.Core.Net.Extensions" END
-          END
-
-    -> Dependency operator precendence will be determined later.
-
+    -> Top-Level Operators
+       && || ^^ !! ??
+       
+    -> First-level Operators
+       == != <= << >= >> ##
+       
+    Top-level operators must contain one or more first-level operators.  First-level operators contain a module name and an optional version.  See nmodule-dep.g in the
+    NModule.Dependency.Parser project/subdirectory for more detail.
+    
   ModuleRoles:  A comma seperated list of the roles this module will provide services for.  An example might be:
     ModuleRoles("IServer,IConnection,ISocket,IPacketHandler") for Elfblade.Core.Net.Xcp
     When the module loader sees this, it goes over each role.  It searches for a module controller which can handle

Modified: trunk/NModule.Dependency.Parser/nmodule-dep.g
===================================================================
--- trunk/NModule.Dependency.Parser/nmodule-dep.g	2005-05-21 00:34:15 UTC (rev 7)
+++ trunk/NModule.Dependency.Parser/nmodule-dep.g	2005-06-01 20:43:51 UTC (rev 8)
@@ -26,6 +26,11 @@
 	
 iexpr: CLASS ( VER )?;
 
+{	
+	public class DepNode
+	{
+		public enum DepOp { NOT, AND, OR, XOR, OPT, EQ, NEQ, LTE, LT, GTE, GT, LD };
+		
 class DepLexer extends Lexer;
 
 options

Modified: trunk/svkchangelog
===================================================================
--- trunk/svkchangelog	2005-05-21 00:34:15 UTC (rev 7)
+++ trunk/svkchangelog	2005-06-01 20:43:51 UTC (rev 8)
@@ -4,7 +4,7 @@
 
 echo "$(date "+%a %b %d, %Y") $SVKCNAME ($SVKEMAIL) $(date "+%z")" > ChangeLog
 
-svk status | sed -e 's@\?.*@@g' -e 's at .*ChangeLog.*@@' '/^$/d' >> ChangeLog
+svk status | sed -e 's@\?.*@@g' -e 's at .*ChangeLog.*@@' -e '/^$/d' >> ChangeLog
 
 echo "" >> ChangeLog
 



From urilith at sheep.berlios.de  Wed Jun  1 22:47:09 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Wed, 1 Jun 2005 22:47:09 +0200
Subject: [nmodule-commits] r9 - trunk
Message-ID: <200506012047.j51Kl9iO005882@sheep.berlios.de>

Author: urilith
Date: 2005-06-01 22:47:09 +0200 (Wed, 01 Jun 2005)
New Revision: 9

Modified:
   trunk/
   trunk/AUTHORS
   trunk/ChangeLog
Log:
 r45 at dreamshadow:  urilith | 2005-06-01 15:46:25 -0500
 Wed Jun 01, 2005 Michael Tindal (mtindal at paradoxpoint.com) -0500
 M AUTHORS
   * Fix my e-mail address.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:41
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:45

Modified: trunk/AUTHORS
===================================================================
--- trunk/AUTHORS	2005-06-01 20:43:51 UTC (rev 8)
+++ trunk/AUTHORS	2005-06-01 20:47:09 UTC (rev 9)
@@ -1,2 +1,2 @@
-Michael Tindal (urilith at gentoo.org)
+Michael Tindal (mtindal at paradoxpoint.com)
 Elfyn McBratley (beu at gentoo.org)

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-01 20:43:51 UTC (rev 8)
+++ trunk/ChangeLog	2005-06-01 20:47:09 UTC (rev 9)
@@ -1,4 +1,8 @@
 Wed Jun 01, 2005 Michael Tindal (mtindal at paradoxpoint.com) -0500
+M   AUTHORS
+  * Fix my e-mail address.
+
+Wed Jun 01, 2005 Michael Tindal (mtindal at paradoxpoint.com) -0500
 M   Documentation/DESIGN
   * Updated the design to reflect the new operator (##) and precedence rules.
 M   NModule.Dependency.Parser/nmodule-dep.g



From urilith at sheep.berlios.de  Sat Jun  4 07:39:28 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Sat, 4 Jun 2005 07:39:28 +0200
Subject: [nmodule-commits] r10 - in trunk: . NModule.Dependency.Parser
Message-ID: <200506040539.j545dSAU014394@sheep.berlios.de>

Author: urilith
Date: 2005-06-04 07:39:11 +0200 (Sat, 04 Jun 2005)
New Revision: 10

Added:
   trunk/NModule.Dependency.Parser/DepConstraint.cs
   trunk/NModule.Dependency.Parser/DepLexer.cs
   trunk/NModule.Dependency.Parser/DepNode.cs
   trunk/NModule.Dependency.Parser/DepOps.cs
   trunk/NModule.Dependency.Parser/DepParser.cs
   trunk/NModule.Dependency.Parser/DepParserTokenTypes.cs
   trunk/NModule.Dependency.Parser/DepParserTokenTypes.txt
   trunk/NModule.Dependency.Parser/DepVersion.cs
   trunk/NModule.Dependency.Parser/antlr.astframe.dll
   trunk/NModule.Dependency.Parser/antlr.runtime.dll
   trunk/NModule.Dependency.Parser/build.sh
   trunk/NModule.Dependency.Parser/nmodule-dep.g.old
   trunk/NModuleTest.cs
   trunk/build.sh
Modified:
   trunk/
   trunk/ChangeLog
   trunk/NModule.Dependency.Parser/nmodule-dep.g
Log:
 r50 at dreamshadow:  urilith | 2005-06-04 00:38:55 -0500
 Sat Jun 04, 2005 Michael Tindal (mtindal at paradoxpoint.com) -0500
 M NModule.Dependency.Parser/nmodule-dep.g
   * Grammar now generates dependency trees :)
 A NModule.Dependency.Parser/DepConstraint.cs
   * Constraint class. Contains the name and version of constraints placed on a bottom-level operator node.
 A NModule.Dependency.Parser/DepLexer.cs
   * Lexer class generated by antlr from nmodule-dep.g.
 A NModule.Dependency.Parser/DepNode.cs
   * Node class. Represents a dependency node. Contains information on the node, constraint if
 A NModule.Dependency.Parser/DepOps.cs
   * DepOps enum. Enumeration containing the current operators.
 A NModule.Dependency.Parser/DepParser.cs
   * Parser class generated by antlr from nmodule-dep.g.
 A NModule.Dependency.Parser/DepParserTokenTypes.cs
   * Token file generated by antlr from nmodule-dep.g.
 A NModule.Dependency.Parser/DepParserTokenTypes.txt
   * Token file generated by antlr from nmodule-dep.g.
 A NModule.Dependency.Parser/DepVersion.cs
   * DepVersion class. Contains properties for each version component for easy comparison.
 A NModule.Dependency.Parser/antlr.astframe.dll
   * Antlr runtime files.
 A NModule.Dependency.Parser/antlr.runtime.dll
   * Antlr runtime files.
 A NModule.Dependency.Parser/build.sh
   * Script to simply my life building the parser until I write up the nant build files.
 A + NModule.Dependency.Parser/nmodule-dep.g.old
   * The old grammar, kept around until I can ensure the new grammar is 100% bug-free.
 A NModuleTest.cs
   * Test file for the new grammar.
 A build.sh
   * Build file to simply building the test file until I write up the nant build files.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:45
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:50

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/ChangeLog	2005-06-04 05:39:11 UTC (rev 10)
@@ -1,3 +1,35 @@
+Sat Jun 04, 2005 Michael Tindal (mtindal at paradoxpoint.com) -0500
+M   NModule.Dependency.Parser/nmodule-dep.g
+  * Grammar now generates dependency trees :)
+A   NModule.Dependency.Parser/DepConstraint.cs
+  * Constraint class.  Contains the name and version of constraints placed on a bottom-level operator node.
+A   NModule.Dependency.Parser/DepLexer.cs
+  * Lexer class generated by antlr from nmodule-dep.g.
+A   NModule.Dependency.Parser/DepNode.cs
+  * Node class.  Represents a dependency node.  Contains information on the node, constraint if 
+A   NModule.Dependency.Parser/DepOps.cs
+  * DepOps enum.  Enumeration containing the current operators.
+A   NModule.Dependency.Parser/DepParser.cs
+  * Parser class generated by antlr from nmodule-dep.g.
+A   NModule.Dependency.Parser/DepParserTokenTypes.cs
+  * Token file generated by antlr from nmodule-dep.g.
+A   NModule.Dependency.Parser/DepParserTokenTypes.txt
+  * Token file generated by antlr from nmodule-dep.g.
+A   NModule.Dependency.Parser/DepVersion.cs
+  * DepVersion class.  Contains properties for each version component for easy comparison.
+A   NModule.Dependency.Parser/antlr.astframe.dll
+  * Antlr runtime files.
+A   NModule.Dependency.Parser/antlr.runtime.dll
+  * Antlr runtime files.
+A   NModule.Dependency.Parser/build.sh
+  * Script to simply my life building the parser until I write up the nant build files.
+A + NModule.Dependency.Parser/nmodule-dep.g.old
+  * The old grammar, kept around until I can ensure the new grammar is 100% bug-free.
+A   NModuleTest.cs
+  * Test file for the new grammar.
+A   build.sh
+  * Build file to simply building the test file until I write up the nant build files.
+
 Wed Jun 01, 2005 Michael Tindal (mtindal at paradoxpoint.com) -0500
 M   AUTHORS
   * Fix my e-mail address.

Added: trunk/NModule.Dependency.Parser/DepConstraint.cs
===================================================================
--- trunk/NModule.Dependency.Parser/DepConstraint.cs	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/NModule.Dependency.Parser/DepConstraint.cs	2005-06-04 05:39:11 UTC (rev 10)
@@ -0,0 +1,64 @@
+using System;
+using System.Collections;
+
+namespace NModule.Dependency.Parser
+{
+	public class DepConstraint
+	{
+		private DepVersion _version;
+		private string _name;
+
+		public DepConstraint()
+		{
+			_name = "";
+			_version = null;
+		}
+
+		public DepVersion Version
+		{
+			get
+			{
+				return _version;
+			}
+			set
+			{
+				_version = value;
+			}
+		}
+
+		public string Name
+		{
+			get
+			{
+				return _name;
+			}
+			set
+			{
+				_name = value;
+			}
+		}
+
+		public string VersionTmp
+		{
+			set
+			{
+				_version = VersionParse(value);
+			}
+		}
+
+		protected DepVersion VersionParse(string v)
+		{
+			// Here we go :)
+			DepVersion ver = new DepVersion();
+			string[] vparts = v.Split('.');
+			ver.Major = Int32.Parse(vparts[0]);
+			ver.Minor = Int32.Parse(vparts[1]);
+			if (vparts.Length > 2)
+				ver.Build = Int32.Parse(vparts[2]);
+			if (vparts.Length > 3)
+				ver.Build = Int32.Parse(vparts[3]);
+			return ver;
+		}
+	}
+}
+

Added: trunk/NModule.Dependency.Parser/DepLexer.cs
===================================================================
--- trunk/NModule.Dependency.Parser/DepLexer.cs	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/NModule.Dependency.Parser/DepLexer.cs	2005-06-04 05:39:11 UTC (rev 10)
@@ -0,0 +1,714 @@
+// $ANTLR 2.7.5 (20050516): "nmodule-dep.g" -> "DepLexer.cs"$
+
+namespace NModule.Dependency.Parser
+{
+	// Generate header specific to lexer CSharp file
+	using System;
+	using Stream                          = System.IO.Stream;
+	using TextReader                      = System.IO.TextReader;
+	using Hashtable                       = System.Collections.Hashtable;
+	using Comparer                        = System.Collections.Comparer;
+	
+	using TokenStreamException            = antlr.TokenStreamException;
+	using TokenStreamIOException          = antlr.TokenStreamIOException;
+	using TokenStreamRecognitionException = antlr.TokenStreamRecognitionException;
+	using CharStreamException             = antlr.CharStreamException;
+	using CharStreamIOException           = antlr.CharStreamIOException;
+	using ANTLRException                  = antlr.ANTLRException;
+	using CharScanner                     = antlr.CharScanner;
+	using InputBuffer                     = antlr.InputBuffer;
+	using ByteBuffer                      = antlr.ByteBuffer;
+	using CharBuffer                      = antlr.CharBuffer;
+	using Token                           = antlr.Token;
+	using IToken                          = antlr.IToken;
+	using CommonToken                     = antlr.CommonToken;
+	using SemanticException               = antlr.SemanticException;
+	using RecognitionException            = antlr.RecognitionException;
+	using NoViableAltForCharException     = antlr.NoViableAltForCharException;
+	using MismatchedCharException         = antlr.MismatchedCharException;
+	using TokenStream                     = antlr.TokenStream;
+	using LexerSharedInputState           = antlr.LexerSharedInputState;
+	using BitSet                          = antlr.collections.impl.BitSet;
+	
+	public 	class DepLexer : antlr.CharScanner	, TokenStream
+	 {
+		public const int EOF = 1;
+		public const int NULL_TREE_LOOKAHEAD = 3;
+		public const int LPAREN = 4;
+		public const int NOTO = 5;
+		public const int RPAREN = 6;
+		public const int AND = 7;
+		public const int OR = 8;
+		public const int XOR = 9;
+		public const int OPT = 10;
+		public const int EQ = 11;
+		public const int NEQ = 12;
+		public const int LTE = 13;
+		public const int LS = 14;
+		public const int GTE = 15;
+		public const int GT = 16;
+		public const int LD = 17;
+		public const int CLASS = 18;
+		public const int VER = 19;
+		public const int INT = 20;
+		public const int DOT = 21;
+		public const int ID_START_LETTER = 22;
+		public const int ID_LETTER = 23;
+		public const int ID = 24;
+		public const int WS = 25;
+		
+		public DepLexer(Stream ins) : this(new ByteBuffer(ins))
+		{
+		}
+		
+		public DepLexer(TextReader r) : this(new CharBuffer(r))
+		{
+		}
+		
+		public DepLexer(InputBuffer ib)		 : this(new LexerSharedInputState(ib))
+		{
+		}
+		
+		public DepLexer(LexerSharedInputState state) : base(state)
+		{
+			initialize();
+		}
+		private void initialize()
+		{
+			caseSensitiveLiterals = true;
+			setCaseSensitive(true);
+			literals = new Hashtable(100, (float) 0.4, null, Comparer.Default);
+		}
+		
+		override public IToken nextToken()			//throws TokenStreamException
+		{
+			IToken theRetToken = null;
+tryAgain:
+			for (;;)
+			{
+				IToken _token = null;
+				int _ttype = Token.INVALID_TYPE;
+				resetText();
+				try     // for char stream error handling
+				{
+					try     // for lexical error handling
+					{
+						switch ( cached_LA1 )
+						{
+						case '(':
+						{
+							mLPAREN(true);
+							theRetToken = returnToken_;
+							break;
+						}
+						case ')':
+						{
+							mRPAREN(true);
+							theRetToken = returnToken_;
+							break;
+						}
+						case '&':
+						{
+							mAND(true);
+							theRetToken = returnToken_;
+							break;
+						}
+						case '|':
+						{
+							mOR(true);
+							theRetToken = returnToken_;
+							break;
+						}
+						case '^':
+						{
+							mXOR(true);
+							theRetToken = returnToken_;
+							break;
+						}
+						case '=':
+						{
+							mEQ(true);
+							theRetToken = returnToken_;
+							break;
+						}
+						case '?':
+						{
+							mOPT(true);
+							theRetToken = returnToken_;
+							break;
+						}
+						case '#':
+						{
+							mLD(true);
+							theRetToken = returnToken_;
+							break;
+						}
+						case '0':  case '1':  case '2':  case '3':
+						case '4':  case '5':  case '6':  case '7':
+						case '8':  case '9':
+						{
+							mVER(true);
+							theRetToken = returnToken_;
+							break;
+						}
+						case 'A':  case 'B':  case 'C':  case 'D':
+						case 'E':  case 'F':  case 'G':  case 'H':
+						case 'I':  case 'J':  case 'K':  case 'L':
+						case 'M':  case 'N':  case 'O':  case 'P':
+						case 'Q':  case 'R':  case 'S':  case 'T':
+						case 'U':  case 'V':  case 'W':  case 'X':
+						case 'Y':  case 'Z':  case '_':  case 'a':
+						case 'b':  case 'c':  case 'd':  case 'e':
+						case 'f':  case 'g':  case 'h':  case 'i':
+						case 'j':  case 'k':  case 'l':  case 'm':
+						case 'n':  case 'o':  case 'p':  case 'q':
+						case 'r':  case 's':  case 't':  case 'u':
+						case 'v':  case 'w':  case 'x':  case 'y':
+						case 'z':
+						{
+							mCLASS(true);
+							theRetToken = returnToken_;
+							break;
+						}
+						case '\t':  case '\n':  case '\r':  case ' ':
+						{
+							mWS(true);
+							theRetToken = returnToken_;
+							break;
+						}
+						default:
+							if ((cached_LA1=='!') && (cached_LA2=='!'))
+							{
+								mNOTO(true);
+								theRetToken = returnToken_;
+							}
+							else if ((cached_LA1=='!') && (cached_LA2=='=')) {
+								mNEQ(true);
+								theRetToken = returnToken_;
+							}
+							else if ((cached_LA1=='<') && (cached_LA2=='=')) {
+								mLTE(true);
+								theRetToken = returnToken_;
+							}
+							else if ((cached_LA1=='<') && (cached_LA2=='<')) {
+								mLS(true);
+								theRetToken = returnToken_;
+							}
+							else if ((cached_LA1=='>') && (cached_LA2=='=')) {
+								mGTE(true);
+								theRetToken = returnToken_;
+							}
+							else if ((cached_LA1=='>') && (cached_LA2=='>')) {
+								mGT(true);
+								theRetToken = returnToken_;
+							}
+						else
+						{
+							if (cached_LA1==EOF_CHAR) { uponEOF(); returnToken_ = makeToken(Token.EOF_TYPE); }
+				else {throw new NoViableAltForCharException(cached_LA1, getFilename(), getLine(), getColumn());}
+						}
+						break; }
+						if ( null==returnToken_ ) goto tryAgain; // found SKIP token
+						_ttype = returnToken_.Type;
+						_ttype = testLiteralsTable(_ttype);
+						returnToken_.Type = _ttype;
+						return returnToken_;
+					}
+					catch (RecognitionException e) {
+							throw new TokenStreamRecognitionException(e);
+					}
+				}
+				catch (CharStreamException cse) {
+					if ( cse is CharStreamIOException ) {
+						throw new TokenStreamIOException(((CharStreamIOException)cse).io);
+					}
+					else {
+						throw new TokenStreamException(cse.Message);
+					}
+				}
+			}
+		}
+		
+	public void mLPAREN(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = LPAREN;
+		
+		match('(');
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mRPAREN(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = RPAREN;
+		
+		match(')');
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mNOTO(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = NOTO;
+		
+		match("!!");
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mAND(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = AND;
+		
+		match("&&");
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mOR(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = OR;
+		
+		match("||");
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mXOR(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = XOR;
+		
+		match("^^");
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mEQ(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = EQ;
+		
+		match("==");
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mNEQ(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = NEQ;
+		
+		match("!=");
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mLTE(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = LTE;
+		
+		match("<=");
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mLS(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = LS;
+		
+		match("<<");
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mGTE(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = GTE;
+		
+		match(">=");
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mGT(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = GT;
+		
+		match(">>");
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mOPT(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = OPT;
+		
+		match("??");
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mLD(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = LD;
+		
+		match("##");
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	protected void mINT(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = INT;
+		
+		{ // ( ... )+
+			int _cnt49=0;
+			for (;;)
+			{
+				if (((cached_LA1 >= '0' && cached_LA1 <= '9')))
+				{
+					matchRange('0','9');
+				}
+				else
+				{
+					if (_cnt49 >= 1) { goto _loop49_breakloop; } else { throw new NoViableAltForCharException(cached_LA1, getFilename(), getLine(), getColumn());; }
+				}
+				
+				_cnt49++;
+			}
+_loop49_breakloop:			;
+		}    // ( ... )+
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mVER(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = VER;
+		
+		mINT(false);
+		{    // ( ... )*
+			for (;;)
+			{
+				if ((cached_LA1=='.'))
+				{
+					mDOT(false);
+					mINT(false);
+				}
+				else
+				{
+					goto _loop52_breakloop;
+				}
+				
+			}
+_loop52_breakloop:			;
+		}    // ( ... )*
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	protected void mDOT(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = DOT;
+		
+		match('.');
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	protected void mID_START_LETTER(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = ID_START_LETTER;
+		
+		switch ( cached_LA1 )
+		{
+		case 'a':  case 'b':  case 'c':  case 'd':
+		case 'e':  case 'f':  case 'g':  case 'h':
+		case 'i':  case 'j':  case 'k':  case 'l':
+		case 'm':  case 'n':  case 'o':  case 'p':
+		case 'q':  case 'r':  case 's':  case 't':
+		case 'u':  case 'v':  case 'w':  case 'x':
+		case 'y':  case 'z':
+		{
+			{
+				matchRange('a','z');
+			}
+			break;
+		}
+		case 'A':  case 'B':  case 'C':  case 'D':
+		case 'E':  case 'F':  case 'G':  case 'H':
+		case 'I':  case 'J':  case 'K':  case 'L':
+		case 'M':  case 'N':  case 'O':  case 'P':
+		case 'Q':  case 'R':  case 'S':  case 'T':
+		case 'U':  case 'V':  case 'W':  case 'X':
+		case 'Y':  case 'Z':
+		{
+			{
+				matchRange('A','Z');
+			}
+			break;
+		}
+		case '_':
+		{
+			{
+				match('_');
+			}
+			break;
+		}
+		default:
+		{
+			throw new NoViableAltForCharException(cached_LA1, getFilename(), getLine(), getColumn());
+		}
+		 }
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	protected void mID_LETTER(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = ID_LETTER;
+		
+		switch ( cached_LA1 )
+		{
+		case 'A':  case 'B':  case 'C':  case 'D':
+		case 'E':  case 'F':  case 'G':  case 'H':
+		case 'I':  case 'J':  case 'K':  case 'L':
+		case 'M':  case 'N':  case 'O':  case 'P':
+		case 'Q':  case 'R':  case 'S':  case 'T':
+		case 'U':  case 'V':  case 'W':  case 'X':
+		case 'Y':  case 'Z':  case '_':  case 'a':
+		case 'b':  case 'c':  case 'd':  case 'e':
+		case 'f':  case 'g':  case 'h':  case 'i':
+		case 'j':  case 'k':  case 'l':  case 'm':
+		case 'n':  case 'o':  case 'p':  case 'q':
+		case 'r':  case 's':  case 't':  case 'u':
+		case 'v':  case 'w':  case 'x':  case 'y':
+		case 'z':
+		{
+			mID_START_LETTER(false);
+			break;
+		}
+		case '0':  case '1':  case '2':  case '3':
+		case '4':  case '5':  case '6':  case '7':
+		case '8':  case '9':
+		{
+			{
+				matchRange('0','9');
+			}
+			break;
+		}
+		default:
+		{
+			throw new NoViableAltForCharException(cached_LA1, getFilename(), getLine(), getColumn());
+		}
+		 }
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	protected void mID(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = ID;
+		
+		mID_START_LETTER(false);
+		{    // ( ... )*
+			for (;;)
+			{
+				if ((tokenSet_0_.member(cached_LA1)))
+				{
+					mID_LETTER(false);
+				}
+				else
+				{
+					goto _loop62_breakloop;
+				}
+				
+			}
+_loop62_breakloop:			;
+		}    // ( ... )*
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mCLASS(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = CLASS;
+		
+		mID(false);
+		{    // ( ... )*
+			for (;;)
+			{
+				if ((cached_LA1=='.'))
+				{
+					mDOT(false);
+					mID(false);
+				}
+				else
+				{
+					goto _loop65_breakloop;
+				}
+				
+			}
+_loop65_breakloop:			;
+		}    // ( ... )*
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	public void mWS(bool _createToken) //throws RecognitionException, CharStreamException, TokenStreamException
+{
+		int _ttype; IToken _token=null; int _begin=text.Length;
+		_ttype = WS;
+		
+		{
+			switch ( cached_LA1 )
+			{
+			case ' ':
+			{
+				match(' ');
+				break;
+			}
+			case '\r':
+			{
+				match('\r');
+				match('\n');
+				break;
+			}
+			case '\n':
+			{
+				match('\n');
+				break;
+			}
+			case '\t':
+			{
+				match('\t');
+				break;
+			}
+			default:
+			{
+				throw new NoViableAltForCharException(cached_LA1, getFilename(), getLine(), getColumn());
+			}
+			 }
+		}
+		_ttype = Token.SKIP;
+		if (_createToken && (null == _token) && (_ttype != Token.SKIP))
+		{
+			_token = makeToken(_ttype);
+			_token.setText(text.ToString(_begin, text.Length-_begin));
+		}
+		returnToken_ = _token;
+	}
+	
+	
+	private static long[] mk_tokenSet_0_()
+	{
+		long[] data = { 287948901175001088L, 576460745995190270L, 0L, 0L};
+		return data;
+	}
+	public static readonly BitSet tokenSet_0_ = new BitSet(mk_tokenSet_0_());
+	
+}
+}


Property changes on: trunk/NModule.Dependency.Parser/DepLexer.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/NModule.Dependency.Parser/DepNode.cs
===================================================================
--- trunk/NModule.Dependency.Parser/DepNode.cs	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/NModule.Dependency.Parser/DepNode.cs	2005-06-04 05:39:11 UTC (rev 10)
@@ -0,0 +1,73 @@
+using System;
+using System.Collections;
+
+namespace NModule.Dependency.Parser
+{
+
+	public class DepNode
+	{
+		private DepConstraint _constraint;
+		private DepOps _op;
+		private DepNode _parent;
+		private ArrayList _children;
+
+		public DepNode()
+		{
+			_parent = null;
+			_children = new ArrayList();
+		}
+
+		public DepNode(DepNode parent)
+		{
+			_parent = parent;
+			_children = new ArrayList();
+		}
+
+		public DepNode Parent
+		{
+			get
+			{
+				return _parent;
+			}
+		}
+
+		public ArrayList Children
+		{
+			get
+			{
+				return _children;
+			}
+		}
+
+		public DepNode CreateNewChild()
+		{
+			DepNode child = new DepNode(this);
+			_children.Add(child);
+			return child;
+		}
+
+		public DepOps DepOp
+		{
+			get
+			{
+				return _op;
+			}
+			set
+			{
+				_op = value;
+			}
+		}
+
+		public DepConstraint Constraint
+		{
+			get
+			{
+				return _constraint;
+			}
+			set
+			{
+				_constraint = value;
+			}
+		}
+	}
+}

Added: trunk/NModule.Dependency.Parser/DepOps.cs
===================================================================
--- trunk/NModule.Dependency.Parser/DepOps.cs	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/NModule.Dependency.Parser/DepOps.cs	2005-06-04 05:39:11 UTC (rev 10)
@@ -0,0 +1,5 @@
+namespace NModule.Dependency.Parser
+{
+
+	public enum DepOps { Not, And, Or, Xor, Opt, Equal, NotEqual, LessThanEqual, LessThan, GreaterThanEqual, GreaterThan, Loaded };
+}

Added: trunk/NModule.Dependency.Parser/DepParser.cs
===================================================================
--- trunk/NModule.Dependency.Parser/DepParser.cs	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/NModule.Dependency.Parser/DepParser.cs	2005-06-04 05:39:11 UTC (rev 10)
@@ -0,0 +1,627 @@
+// $ANTLR 2.7.5 (20050516): "nmodule-dep.g" -> "DepParser.cs"$
+
+namespace NModule.Dependency.Parser
+{
+	// Generate the header common to all output files.
+	using System;
+	
+	using TokenBuffer              = antlr.TokenBuffer;
+	using TokenStreamException     = antlr.TokenStreamException;
+	using TokenStreamIOException   = antlr.TokenStreamIOException;
+	using ANTLRException           = antlr.ANTLRException;
+	using LLkParser = antlr.LLkParser;
+	using Token                    = antlr.Token;
+	using IToken                   = antlr.IToken;
+	using TokenStream              = antlr.TokenStream;
+	using RecognitionException     = antlr.RecognitionException;
+	using NoViableAltException     = antlr.NoViableAltException;
+	using MismatchedTokenException = antlr.MismatchedTokenException;
+	using SemanticException        = antlr.SemanticException;
+	using ParserSharedInputState   = antlr.ParserSharedInputState;
+	using BitSet                   = antlr.collections.impl.BitSet;
+	
+	public 	class DepParser : antlr.LLkParser
+	{
+		public const int EOF = 1;
+		public const int NULL_TREE_LOOKAHEAD = 3;
+		public const int LPAREN = 4;
+		public const int NOTO = 5;
+		public const int RPAREN = 6;
+		public const int AND = 7;
+		public const int OR = 8;
+		public const int XOR = 9;
+		public const int OPT = 10;
+		public const int EQ = 11;
+		public const int NEQ = 12;
+		public const int LTE = 13;
+		public const int LS = 14;
+		public const int GTE = 15;
+		public const int GT = 16;
+		public const int LD = 17;
+		public const int CLASS = 18;
+		public const int VER = 19;
+		public const int INT = 20;
+		public const int DOT = 21;
+		public const int ID_START_LETTER = 22;
+		public const int ID_LETTER = 23;
+		public const int ID = 24;
+		public const int WS = 25;
+		
+		
+		protected void initialize()
+		{
+			tokenNames = tokenNames_;
+		}
+		
+		
+		protected DepParser(TokenBuffer tokenBuf, int k) : base(tokenBuf, k)
+		{
+			initialize();
+		}
+		
+		public DepParser(TokenBuffer tokenBuf) : this(tokenBuf,3)
+		{
+		}
+		
+		protected DepParser(TokenStream lexer, int k) : base(lexer,k)
+		{
+			initialize();
+		}
+		
+		public DepParser(TokenStream lexer) : this(lexer,3)
+		{
+		}
+		
+		public DepParser(ParserSharedInputState state) : base(state,3)
+		{
+			initialize();
+		}
+		
+	public void expr(
+		DepNode root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		
+		try {      // for error handling
+			cexpr(root, true);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_0_);
+		}
+	}
+	
+	public void cexpr(
+		DepNode parent,bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		
+		try {      // for error handling
+			if ((LA(1)==LPAREN) && (LA(2)==NOTO))
+			{
+				notexpr(parent, root);
+			}
+			else if ((LA(1)==LPAREN) && (LA(2)==AND)) {
+				andexpr(parent, root);
+			}
+			else if ((LA(1)==LPAREN) && (LA(2)==OR)) {
+				orexpr(parent, root);
+			}
+			else if ((LA(1)==LPAREN) && (LA(2)==XOR)) {
+				xorexpr(parent, root);
+			}
+			else if ((LA(1)==LPAREN) && (LA(2)==OPT)) {
+				optexpr(parent, root);
+			}
+			else if ((LA(1)==LPAREN) && ((LA(2) >= EQ && LA(2) <= LD))) {
+				oexpr(parent, root);
+			}
+			else
+			{
+				throw new NoViableAltException(LT(1), getFilename());
+			}
+			
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void notexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		DepNode child = !(root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.Not;
+		
+		try {      // for error handling
+			match(LPAREN);
+			match(NOTO);
+			{ // ( ... )+
+				int _cnt6=0;
+				for (;;)
+				{
+					if ((LA(1)==LPAREN) && ((LA(2) >= EQ && LA(2) <= LD)) && (LA(3)==CLASS))
+					{
+						oexpr(child, false);
+					}
+					else if ((LA(1)==LPAREN) && (tokenSet_2_.member(LA(2))) && (LA(3)==LPAREN||LA(3)==CLASS)) {
+						{
+							DepNode nchild = parent.CreateNewChild();
+							cexpr(nchild, true);
+						}
+					}
+					else
+					{
+						if (_cnt6 >= 1) { goto _loop6_breakloop; } else { throw new NoViableAltException(LT(1), getFilename());; }
+					}
+					
+					_cnt6++;
+				}
+_loop6_breakloop:				;
+			}    // ( ... )+
+			match(RPAREN);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void andexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		DepNode child = !(root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.And;
+		
+		try {      // for error handling
+			match(LPAREN);
+			match(AND);
+			{ // ( ... )+
+				int _cnt10=0;
+				for (;;)
+				{
+					if ((LA(1)==LPAREN) && ((LA(2) >= EQ && LA(2) <= LD)) && (LA(3)==CLASS))
+					{
+						oexpr(child, false);
+					}
+					else if ((LA(1)==LPAREN) && (tokenSet_2_.member(LA(2))) && (LA(3)==LPAREN||LA(3)==CLASS)) {
+						{
+							DepNode nchild = parent.CreateNewChild();
+							cexpr(nchild, true);
+						}
+					}
+					else
+					{
+						if (_cnt10 >= 1) { goto _loop10_breakloop; } else { throw new NoViableAltException(LT(1), getFilename());; }
+					}
+					
+					_cnt10++;
+				}
+_loop10_breakloop:				;
+			}    // ( ... )+
+			match(RPAREN);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void orexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		DepNode child = !(root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.Or;
+		
+		try {      // for error handling
+			match(LPAREN);
+			match(OR);
+			{ // ( ... )+
+				int _cnt14=0;
+				for (;;)
+				{
+					if ((LA(1)==LPAREN) && ((LA(2) >= EQ && LA(2) <= LD)) && (LA(3)==CLASS))
+					{
+						oexpr(child, false);
+					}
+					else if ((LA(1)==LPAREN) && (tokenSet_2_.member(LA(2))) && (LA(3)==LPAREN||LA(3)==CLASS)) {
+						{
+							DepNode nchild = parent.CreateNewChild();
+							cexpr(nchild, true);
+						}
+					}
+					else
+					{
+						if (_cnt14 >= 1) { goto _loop14_breakloop; } else { throw new NoViableAltException(LT(1), getFilename());; }
+					}
+					
+					_cnt14++;
+				}
+_loop14_breakloop:				;
+			}    // ( ... )+
+			match(RPAREN);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void xorexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		DepNode child = !(root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.Xor;
+		
+		try {      // for error handling
+			match(LPAREN);
+			match(XOR);
+			{ // ( ... )+
+				int _cnt18=0;
+				for (;;)
+				{
+					if ((LA(1)==LPAREN) && ((LA(2) >= EQ && LA(2) <= LD)) && (LA(3)==CLASS))
+					{
+						oexpr(child, false);
+					}
+					else if ((LA(1)==LPAREN) && (tokenSet_2_.member(LA(2))) && (LA(3)==LPAREN||LA(3)==CLASS)) {
+						{
+							DepNode nchild = parent.CreateNewChild();
+							cexpr(nchild, true);
+						}
+					}
+					else
+					{
+						if (_cnt18 >= 1) { goto _loop18_breakloop; } else { throw new NoViableAltException(LT(1), getFilename());; }
+					}
+					
+					_cnt18++;
+				}
+_loop18_breakloop:				;
+			}    // ( ... )+
+			match(RPAREN);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void optexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		DepNode child = !(root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.Opt;
+		
+		try {      // for error handling
+			match(LPAREN);
+			match(OPT);
+			{ // ( ... )+
+				int _cnt22=0;
+				for (;;)
+				{
+					if ((LA(1)==LPAREN) && ((LA(2) >= EQ && LA(2) <= LD)) && (LA(3)==CLASS))
+					{
+						oexpr(child, false);
+					}
+					else if ((LA(1)==LPAREN) && (tokenSet_2_.member(LA(2))) && (LA(3)==LPAREN||LA(3)==CLASS)) {
+						{
+							DepNode nchild = parent.CreateNewChild();
+							cexpr(nchild, true);
+						}
+					}
+					else
+					{
+						if (_cnt22 >= 1) { goto _loop22_breakloop; } else { throw new NoViableAltException(LT(1), getFilename());; }
+					}
+					
+					_cnt22++;
+				}
+_loop22_breakloop:				;
+			}    // ( ... )+
+			match(RPAREN);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void oexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		
+		try {      // for error handling
+			if ((LA(1)==LPAREN) && (LA(2)==EQ))
+			{
+				eqexpr(parent, root);
+			}
+			else if ((LA(1)==LPAREN) && (LA(2)==NEQ)) {
+				neqexpr(parent, root);
+			}
+			else if ((LA(1)==LPAREN) && (LA(2)==LTE)) {
+				lteexpr(parent, root);
+			}
+			else if ((LA(1)==LPAREN) && (LA(2)==LS)) {
+				ltexpr(parent, root);
+			}
+			else if ((LA(1)==LPAREN) && (LA(2)==GTE)) {
+				gteexpr(parent, root);
+			}
+			else if ((LA(1)==LPAREN) && (LA(2)==GT)) {
+				gtexpr(parent, root);
+			}
+			else if ((LA(1)==LPAREN) && (LA(2)==LD)) {
+				ldexpr(parent, root);
+			}
+			else
+			{
+				throw new NoViableAltException(LT(1), getFilename());
+			}
+			
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void eqexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.Equal;
+		
+		try {      // for error handling
+			match(LPAREN);
+			match(EQ);
+			iexpr(child);
+			match(RPAREN);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void neqexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.NotEqual;
+		
+		try {      // for error handling
+			match(LPAREN);
+			match(NEQ);
+			iexpr(child);
+			match(RPAREN);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void lteexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.LessThanEqual;
+		
+		try {      // for error handling
+			match(LPAREN);
+			match(LTE);
+			iexpr(child);
+			match(RPAREN);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void ltexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.LessThan;
+		
+		try {      // for error handling
+			match(LPAREN);
+			match(LS);
+			iexpr(child);
+			match(RPAREN);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void gteexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.GreaterThanEqual;
+		
+		try {      // for error handling
+			match(LPAREN);
+			match(GTE);
+			iexpr(child);
+			match(RPAREN);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void gtexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.GreaterThan;
+		
+		try {      // for error handling
+			match(LPAREN);
+			match(GT);
+			iexpr(child);
+			match(RPAREN);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void ldexpr(
+		DepNode parent, bool root
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.Loaded;
+		
+		try {      // for error handling
+			match(LPAREN);
+			match(LD);
+			iexpr(child);
+			match(RPAREN);
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_1_);
+		}
+	}
+	
+	public void iexpr(
+		DepNode node
+	) //throws RecognitionException, TokenStreamException
+{
+		
+		IToken  c = null;
+		IToken  v = null;
+		node.Constraint = new DepConstraint();
+		
+		try {      // for error handling
+			c = LT(1);
+			match(CLASS);
+			{
+				switch ( LA(1) )
+				{
+				case VER:
+				{
+					v = LT(1);
+					match(VER);
+					node.Constraint.VersionTmp=v.getText();
+					break;
+				}
+				case RPAREN:
+				{
+					break;
+				}
+				default:
+				{
+					throw new NoViableAltException(LT(1), getFilename());
+				}
+				 }
+			}
+			node.Constraint.Name=c.getText();
+		}
+		catch (RecognitionException ex)
+		{
+			reportError(ex);
+			recover(ex,tokenSet_3_);
+		}
+	}
+	
+	private void initializeFactory()
+	{
+	}
+	
+	public static readonly string[] tokenNames_ = new string[] {
+		@"""<0>""",
+		@"""EOF""",
+		@"""<2>""",
+		@"""NULL_TREE_LOOKAHEAD""",
+		@"""LPAREN""",
+		@"""NOTO""",
+		@"""RPAREN""",
+		@"""AND""",
+		@"""OR""",
+		@"""XOR""",
+		@"""OPT""",
+		@"""EQ""",
+		@"""NEQ""",
+		@"""LTE""",
+		@"""LS""",
+		@"""GTE""",
+		@"""GT""",
+		@"""LD""",
+		@"""CLASS""",
+		@"""VER""",
+		@"""INT""",
+		@"""DOT""",
+		@"""ID_START_LETTER""",
+		@"""ID_LETTER""",
+		@"""ID""",
+		@"""WS"""
+	};
+	
+	private static long[] mk_tokenSet_0_()
+	{
+		long[] data = { 2L, 0L};
+		return data;
+	}
+	public static readonly BitSet tokenSet_0_ = new BitSet(mk_tokenSet_0_());
+	private static long[] mk_tokenSet_1_()
+	{
+		long[] data = { 82L, 0L};
+		return data;
+	}
+	public static readonly BitSet tokenSet_1_ = new BitSet(mk_tokenSet_1_());
+	private static long[] mk_tokenSet_2_()
+	{
+		long[] data = { 262048L, 0L};
+		return data;
+	}
+	public static readonly BitSet tokenSet_2_ = new BitSet(mk_tokenSet_2_());
+	private static long[] mk_tokenSet_3_()
+	{
+		long[] data = { 64L, 0L};
+		return data;
+	}
+	public static readonly BitSet tokenSet_3_ = new BitSet(mk_tokenSet_3_());
+	
+}
+}


Property changes on: trunk/NModule.Dependency.Parser/DepParser.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/NModule.Dependency.Parser/DepParserTokenTypes.cs
===================================================================
--- trunk/NModule.Dependency.Parser/DepParserTokenTypes.cs	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/NModule.Dependency.Parser/DepParserTokenTypes.cs	2005-06-04 05:39:11 UTC (rev 10)
@@ -0,0 +1,33 @@
+// $ANTLR 2.7.5 (20050516): "nmodule-dep.g" -> "DepParser.cs"$
+
+namespace NModule.Dependency.Parser
+{
+	public class DepParserTokenTypes
+	{
+		public const int EOF = 1;
+		public const int NULL_TREE_LOOKAHEAD = 3;
+		public const int LPAREN = 4;
+		public const int NOTO = 5;
+		public const int RPAREN = 6;
+		public const int AND = 7;
+		public const int OR = 8;
+		public const int XOR = 9;
+		public const int OPT = 10;
+		public const int EQ = 11;
+		public const int NEQ = 12;
+		public const int LTE = 13;
+		public const int LS = 14;
+		public const int GTE = 15;
+		public const int GT = 16;
+		public const int LD = 17;
+		public const int CLASS = 18;
+		public const int VER = 19;
+		public const int INT = 20;
+		public const int DOT = 21;
+		public const int ID_START_LETTER = 22;
+		public const int ID_LETTER = 23;
+		public const int ID = 24;
+		public const int WS = 25;
+		
+	}
+}


Property changes on: trunk/NModule.Dependency.Parser/DepParserTokenTypes.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/NModule.Dependency.Parser/DepParserTokenTypes.txt
===================================================================
--- trunk/NModule.Dependency.Parser/DepParserTokenTypes.txt	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/NModule.Dependency.Parser/DepParserTokenTypes.txt	2005-06-04 05:39:11 UTC (rev 10)
@@ -0,0 +1,24 @@
+// $ANTLR 2.7.5 (20050516): nmodule-dep.g -> DepParserTokenTypes.txt$
+DepParser    // output token vocab name
+LPAREN=4
+NOTO=5
+RPAREN=6
+AND=7
+OR=8
+XOR=9
+OPT=10
+EQ=11
+NEQ=12
+LTE=13
+LS=14
+GTE=15
+GT=16
+LD=17
+CLASS=18
+VER=19
+INT=20
+DOT=21
+ID_START_LETTER=22
+ID_LETTER=23
+ID=24
+WS=25


Property changes on: trunk/NModule.Dependency.Parser/DepParserTokenTypes.txt
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/NModule.Dependency.Parser/DepVersion.cs
===================================================================
--- trunk/NModule.Dependency.Parser/DepVersion.cs	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/NModule.Dependency.Parser/DepVersion.cs	2005-06-04 05:39:11 UTC (rev 10)
@@ -0,0 +1,15 @@
+namespace NModule.Dependency.Parser
+{
+	public class DepVersion
+	{
+		public DepVersion()
+		{
+			Major = Minor = Build = Patch = 0;
+		}
+
+		public int Major;
+		public int Minor;
+		public int Build;
+		public int Patch;
+	}
+}

Added: trunk/NModule.Dependency.Parser/antlr.astframe.dll
===================================================================
(Binary files differ)


Property changes on: trunk/NModule.Dependency.Parser/antlr.astframe.dll
___________________________________________________________________
Name: svn:mime-type
   + application/x-ms-dos-executable

Added: trunk/NModule.Dependency.Parser/antlr.runtime.dll
===================================================================
(Binary files differ)


Property changes on: trunk/NModule.Dependency.Parser/antlr.runtime.dll
___________________________________________________________________
Name: svn:mime-type
   + application/x-ms-dos-executable

Added: trunk/NModule.Dependency.Parser/build.sh
===================================================================
--- trunk/NModule.Dependency.Parser/build.sh	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/NModule.Dependency.Parser/build.sh	2005-06-04 05:39:11 UTC (rev 10)
@@ -0,0 +1 @@
+mcs -target:library -out:NModule.Dependency.Parser.dll -r:./antlr.runtime.dll AssemblyInfo.cs DepConstraint.cs DepLexer.cs DepNode.cs DepOps.cs DepParser.cs DepParserTokenTypes.cs DepVersion.cs MyClass.cs


Property changes on: trunk/NModule.Dependency.Parser/build.sh
___________________________________________________________________
Name: svn:executable
   + *

Modified: trunk/NModule.Dependency.Parser/nmodule-dep.g
===================================================================
--- trunk/NModule.Dependency.Parser/nmodule-dep.g	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/NModule.Dependency.Parser/nmodule-dep.g	2005-06-04 05:39:11 UTC (rev 10)
@@ -7,29 +7,100 @@
 class DepParser extends Parser;
 
 options {
-	buildAST=true;
 	k=3;
 }
 
-expr: 
-	cexpr
+// Rebuild this to generate the dep tree
+expr[DepNode root]
+	: cexpr[root, true]
 	;
-	
-cexpr:
-    LPAREN! ((NOTO^|AND^|OR^|XOR^|OPT^) (oexpr|cexpr)+) RPAREN!
-    | oexpr
+
+// LPAREN! ((NOTO^|AND^|OR^|XOR^|OPT^) (oexpr|cexpr)+) RPAREN!
+cexpr[DepNode parent,bool root]
+		: notexpr[parent, root]
+		| andexpr[parent, root]
+		| orexpr[parent, root]
+		| xorexpr[parent, root]
+		| optexpr[parent, root]
+    | oexpr[parent, root]
     ;
 
-oexpr:
-	LPAREN! ((EQ^|NEQ^|LTE^|LS^|GTE^|GT^|LD^) iexpr) RPAREN!
+notexpr[DepNode parent, bool root]
+{ DepNode child = !(root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.Not; }
+	: LPAREN! NOTO (oexpr[child, false]|({DepNode nchild = parent.CreateNewChild(); } cexpr[nchild, true]))+ RPAREN!
 	;
+
+andexpr[DepNode parent, bool root]
+{ DepNode child = !(root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.And; }
+	: LPAREN! AND (oexpr[child, false]|({DepNode nchild = parent.CreateNewChild(); } cexpr[nchild, true]))+ RPAREN!
+	;
+
+orexpr[DepNode parent, bool root]
+{ DepNode child = !(root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.Or; }
+	: LPAREN! OR (oexpr[child, false]|({DepNode nchild = parent.CreateNewChild(); } cexpr[nchild, true]))+ RPAREN!
+	;
+
+xorexpr[DepNode parent, bool root]
+{ DepNode child = !(root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.Xor; }
+	: LPAREN! XOR (oexpr[child, false]|({DepNode nchild = parent.CreateNewChild(); } cexpr[nchild, true]))+ RPAREN!
+	;
+
+
+optexpr[DepNode parent, bool root]
+{ DepNode child = !(root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.Opt; }
+	: LPAREN! OPT (oexpr[child, false]|({DepNode nchild = parent.CreateNewChild(); } cexpr[nchild, true]))+ RPAREN!
+	;
+
+// LPAREN! ((EQ^|NEQ^|LTE^|LS^|GTE^|GT^|LD^) iexpr) RPAREN!
+oexpr[DepNode parent, bool root]
+	: eqexpr[parent, root]
+	| neqexpr[parent, root]
+	| lteexpr[parent, root]
+	| ltexpr[parent, root]
+	| gteexpr[parent, root]
+	| gtexpr[parent, root]
+	| ldexpr[parent, root]
+	;
 	
-iexpr: CLASS ( VER )?;
+eqexpr[DepNode parent, bool root]
+{ DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.Equal; }
+	: LPAREN! EQ iexpr[child] RPAREN!
+	;
 
-{	
-	public class DepNode
-	{
-		public enum DepOp { NOT, AND, OR, XOR, OPT, EQ, NEQ, LTE, LT, GTE, GT, LD };
+neqexpr[DepNode parent, bool root]
+{ DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.NotEqual; }
+	: LPAREN! NEQ iexpr[child] RPAREN!
+	;
+
+lteexpr[DepNode parent, bool root]
+{ DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.LessThanEqual; }
+	: LPAREN! LTE iexpr[child] RPAREN!
+	;
+
+ltexpr[DepNode parent, bool root]
+{ DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.LessThan; }
+	: LPAREN! LS iexpr[child] RPAREN!
+	;
+
+gteexpr[DepNode parent, bool root]
+{ DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.GreaterThanEqual; }
+	: LPAREN! GTE iexpr[child] RPAREN!
+	;
+
+gtexpr[DepNode parent, bool root]
+{ DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.GreaterThan; }
+	: LPAREN! GT iexpr[child] RPAREN!
+	;
+
+ldexpr[DepNode parent, bool root]
+{ DepNode child = (!root)? parent.CreateNewChild() : parent; child.DepOp = DepOps.Loaded; }
+	: LPAREN! LD iexpr[child] RPAREN!
+	;
+
+
+iexpr[DepNode node]
+{ node.Constraint = new DepConstraint(); }
+	: c:CLASS ( v:VER { node.Constraint.VersionTmp=v.getText(); } )? { node.Constraint.Name=c.getText(); };
 		
 class DepLexer extends Lexer;
 
@@ -74,6 +145,7 @@
 ID_START_LETTER: 
     ('a' .. 'z')
 	| ('A' .. 'Z')
+	| ('_')
 	;
 
 protected

Added: trunk/NModule.Dependency.Parser/nmodule-dep.g.old
===================================================================
--- trunk/NModule.Dependency.Parser/nmodule-dep.g.old	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/NModule.Dependency.Parser/nmodule-dep.g.old	2005-06-04 05:39:11 UTC (rev 10)
@@ -0,0 +1,98 @@
+options
+{
+	language="CSharp"; 
+	namespace="NModule.Dependency.Parser";
+}
+  
+class DepParser extends Parser;
+
+options {
+	buildAST=true;
+	k=3;
+}
+
+expr: 
+	cexpr
+	;
+	
+cexpr:
+    LPAREN! ((NOTO^|AND^|OR^|XOR^|OPT^) (oexpr|cexpr)+) RPAREN!
+    | oexpr
+    ;
+
+oexpr:
+	LPAREN! ((EQ^|NEQ^|LTE^|LS^|GTE^|GT^|LD^) iexpr) RPAREN!
+	;
+	
+iexpr: CLASS ( VER )?;
+
+{	
+	public class DepNode
+	{
+		public enum DepOp { NOT, AND, OR, XOR, OPT, EQ, NEQ, LTE, LT, GTE, GT, LD };
+		
+class DepLexer extends Lexer;
+
+options
+{
+	k=2;
+	charVocabulary='\u0000' .. '\u007F';
+}
+
+// Parentheses
+LPAREN: '(' ;
+RPAREN: ')' ;
+
+// Combination Operators
+NOTO: "!!" ;
+AND: "&&" ;
+OR: "||" ;
+XOR: "^^" ;
+
+// Dependency Operators
+EQ: "==" ;
+NEQ: "!=" ;
+LTE: "<=" ;
+LS: "<<" ;
+GTE: ">=" ;
+GT: ">>" ;
+OPT: "??" ;
+LD: "##" ;
+
+// Version
+protected
+INT: ('0' .. '9')+;
+
+VER: INT (DOT INT)*;
+
+// Dot operator
+protected
+DOT: '.' ;
+
+// Basic Identifier
+protected
+ID_START_LETTER: 
+    ('a' .. 'z')
+	| ('A' .. 'Z')
+	;
+
+protected
+ID_LETTER: 
+  ID_START_LETTER
+	| ('0' .. '9')
+	;
+	
+protected
+ID: ID_START_LETTER ( ID_LETTER )* ;
+
+// Class
+CLASS: ID ( DOT ID )* ;
+
+// Whitespace
+WS: ( ' '
+    | '\r' '\n'
+    | '\n'
+    | '\t'
+    )
+    {$setType(Token.SKIP);}
+    ;

Added: trunk/NModuleTest.cs
===================================================================
--- trunk/NModuleTest.cs	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/NModuleTest.cs	2005-06-04 05:39:11 UTC (rev 10)
@@ -0,0 +1,46 @@
+using System;
+using NModule.Dependency.Parser;
+using antlr.collections;
+
+namespace NModule
+{
+	public class NModuleTest
+	{
+		public static void PrintTree(DepNode root, int indent)
+		{
+			for(int i = 0; i < indent; i++)
+				Console.Write("  ");
+	
+			Console.Write("op = {0}, ", root.DepOp.ToString());
+
+			if (root.Constraint != null)
+			{
+				Console.Write("name = {0}", root.Constraint.Name);
+				if (root.Constraint.Version != null)
+				{
+					DepVersion ver = root.Constraint.Version;
+					Console.WriteLine(", version = {0}.{1}.{2}.{3}", ver.Major, ver.Minor, ver.Build, ver.Patch);
+				}
+				else
+					Console.WriteLine();
+			}
+			else
+				Console.WriteLine();
+
+			foreach(DepNode child in root.Children)
+				PrintTree(child, indent + 1);
+		}
+
+	       	public static void Main(string[] args)
+	        {
+			DepNode root = new DepNode();
+
+        	        DepLexer lexer = new DepLexer(Console.OpenStandardInput());
+                	DepParser parser = new DepParser(lexer);
+	                parser.expr(root);
+                	PrintTree(root, 0);
+	        }
+	}
+}
+
+

Added: trunk/build.sh
===================================================================
--- trunk/build.sh	2005-06-01 20:47:09 UTC (rev 9)
+++ trunk/build.sh	2005-06-04 05:39:11 UTC (rev 10)
@@ -0,0 +1 @@
+mcs -lib:./NModule.Dependency.Parser -target:exe -out:NModuleTest.exe -r:NModule.Dependency.Parser.dll -r:antlr.runtime.dll NModuleTest.cs



From urilith at sheep.berlios.de  Thu Jun 23 03:48:48 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Thu, 23 Jun 2005 03:48:48 +0200
Subject: [nmodule-commits] r18 - in trunk: . Documentation src src/NModule.Core.Loader src/NModule.Core.Module src/NModule.Dependency.Parser
Message-ID: <200506230148.j5N1mm3o015585@sheep.berlios.de>

Author: urilith
Date: 2005-06-23 03:48:44 +0200 (Thu, 23 Jun 2005)
New Revision: 18

Added:
   trunk/src/NModule.Core.Loader/ModuleController.cs
   trunk/src/NModule.Core.Loader/ModuleLoader.cs
   trunk/src/NModule.Core.Loader/ModuleRole.cs
   trunk/src/NModule.Core.Loader/NModule.Core.Loader.pidb
   trunk/src/NModule.Core.Module/
   trunk/src/NModule.Core.Module/AssemblyInfo.cs
   trunk/src/NModule.Core.Module/ModuleInfo.cs
   trunk/src/NModule.Core.Module/MyClass.cs
   trunk/src/NModule.Core.Module/NModule.Core.Module.mdp
   trunk/src/NModule.Core.Module/NModule.Core.Module.mds
   trunk/src/NModule.Core.Module/NModule.Core.Module.pidb
Modified:
   trunk/
   trunk/ChangeLog
   trunk/Documentation/DESIGN
   trunk/nmodule.mds
   trunk/src/NModule.Core.Loader/AssemblyInfo.cs
   trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp
   trunk/src/NModule.Dependency.Parser/AssemblyInfo.cs
   trunk/src/NModule.Dependency.Parser/DepConstraint.cs
   trunk/src/NModule.Dependency.Parser/DepNode.cs
   trunk/src/NModule.Dependency.Parser/DepOps.cs
   trunk/src/NModule.Dependency.Parser/DepVersion.cs
   trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp
   trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb
Log:
 r108 at dreamshadow:  urilith | 2005-06-21 03:22:40 -0500
 2005-06-21 Michael Tindal <urilith at gentoo.org>
 
   * Documentation/DESIGN: Started redoing it, its not even remotely complete, but should give a better overview of my plans.
   * nmodule.mds: Updated.
   * src/NModule.Core.Loader/AssemblyInfo.cs: Updated.
   * src/NModule.Core.Loader/NModule.Core.Loader.mdp: Updated.
   * src/NModule.Core.Loader/ModuleController.cs: The new controller. bah. next commit I move the loading code from ModuleController to ModuleLoader.
   * src/NModule.Core.Loader/ModuleLoader.cs: The loader.
   * src/NModule.Core.Loader/ModuleRole.cs: Role descriptions.
   * src/NModule.Core.Loader/NModule.Core.Loader.pidb:
   * src/NModule.Dependency.Parser/AssemblyInfo.cs: Um, dunno.
   * src/NModule.Dependency.Parser/DepConstraint.cs: Dunno.
   * src/NModule.Dependency.Parser/DepNode.cs: Dunno.
   * src/NModule.Dependency.Parser/DepOps.cs: Dunno.
   * src/NModule.Dependency.Parser/DepVersion.cs: Dunno.
   * src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp: Updated.
   * src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb: Updated.
   * src/NModule.Core.Module: New assembly.
   * src/NModule.Core.Module/AssemblyInfo.cs: New assembly.
   * src/NModule.Core.Module/ModuleInfo.cs: New assembly.
   * src/NModule.Core.Module/MyClass.cs: New assembly.
   * src/NModule.Core.Module/NModule.Core.Module.mdp: New assembly.
   * src/NModule.Core.Module/NModule.Core.Module.mds: New assembly.
   * src/NModule.Core.Module/NModule.Core.Module.pidb: New assembly.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:64
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:108

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/ChangeLog	2005-06-23 01:48:44 UTC (rev 18)
@@ -1,3 +1,28 @@
+2005-06-21 Michael Tindal <urilith at gentoo.org>
+
+	* Documentation/DESIGN: Started redoing it, its not even remotely complete, but should give a better overview of my plans.
+	* nmodule.mds: Updated.
+	* src/NModule.Core.Loader/AssemblyInfo.cs: Updated.
+	* src/NModule.Core.Loader/NModule.Core.Loader.mdp: Updated.
+	* src/NModule.Core.Loader/ModuleController.cs: The new controller.  bah.  next commit I move the loading code from ModuleController to ModuleLoader.
+	* src/NModule.Core.Loader/ModuleLoader.cs: The loader.
+	* src/NModule.Core.Loader/ModuleRole.cs: Role descriptions.
+	* src/NModule.Core.Loader/NModule.Core.Loader.pidb: 
+	* src/NModule.Dependency.Parser/AssemblyInfo.cs: Um, dunno.
+	* src/NModule.Dependency.Parser/DepConstraint.cs: Dunno.
+	* src/NModule.Dependency.Parser/DepNode.cs: Dunno.
+	* src/NModule.Dependency.Parser/DepOps.cs: Dunno.
+	* src/NModule.Dependency.Parser/DepVersion.cs: Dunno.
+	* src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp: Updated.
+	* src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb: Updated.
+	* src/NModule.Core.Module: New assembly.
+	* src/NModule.Core.Module/AssemblyInfo.cs: New assembly.
+	* src/NModule.Core.Module/ModuleInfo.cs: New assembly.
+	* src/NModule.Core.Module/MyClass.cs: New assembly.
+	* src/NModule.Core.Module/NModule.Core.Module.mdp: New assembly.
+	* src/NModule.Core.Module/NModule.Core.Module.mds: New assembly.
+	* src/NModule.Core.Module/NModule.Core.Module.pidb: New assembly.
+
 2005-06-10 Michael Tindal <mtindal at paradoxpoint.com>
 
 	* Documentation/DESIGN: Some design updates again.

Modified: trunk/Documentation/DESIGN
===================================================================
--- trunk/Documentation/DESIGN	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/Documentation/DESIGN	2005-06-23 01:48:44 UTC (rev 18)
@@ -1,77 +1,30 @@
-/***************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed            *
- * on the ChangeLog entries.                                               *
- *                                                                         *
- * Permission is hereby granted, free of charge, to any person obtaining   *
- * a copy of this software and associated documentation files (the         *
- * "Software"), to deal in the Software without restriction, including     *
- * without limitation the rights to use, copy, modify, merge, publish,     *
- * distribute, sublicense, and/or sell copies of the Software, and to      *
- * permit persons to whom the Software is furnished to do so, subject to   *
- * the following conditions:                                               *
- *                                                                         *
- * The above copyright notice and this permission notice shall be          *
- * included in all copies or substantial portions of the Software.         *
- *                                                                         *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                   *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE  *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION  *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION   *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.         *
- ***************************************************************************/
+NModule is a high level plugin framework for the .NET framework.
 
-Module Layout:
+The author (Michael Tindal) actively targets the mono framework, but it should
+run unmodified on the .NET framework as well.
 
+NModule takes plugin frameworks to a whole new level by providing interfaces and abstractions
+that make it suitable for any task.  NModule maintains several pieces of information about a "module":
 
-  Modules for the Dreamshadow Module Core will use the following attributes to advertise themselves to the
-  plugin loading code for dependency resolution and proper initialization of interfaces:
-
-  Assembly-Level Attributes:
+  -> The module info, including name, and version, plus dependency information.
+  -> A set of "roles" the module provides (see below).
   
-  AssemblyTitle:  The name of the assembly as referenced by depencies.
-  AssemblyVersion:  Version of the assembly.
-    -> AssemblyVersion is actually determined by the compiler, so it can be left as x.x.* or x.x.x.* or x.x.x.x depending on your preference.
-       The Module Core only pays attention to the major and minor version numbers.
+NModule abstracts a lot of the plug-in API away from itself, instead, it defines a set of low-level interfaces
+for loading and managing plug-ins while allowing application writers the freedom to define their own set of APIs.
+What is unique about NModules approach to this is that even though NModule does not define the plug-in APIs, it
+can still interact with them!  This is done using NModule's role system.
 
-  ModuleDependency:  A string stating module dependencies that must be resolved/loaded before this module can be loaded.
-    -> Dependency strings use the form (op (op dep) (op dep)) and can be nested indefinitely.  The following operators are
-       allowed:
+When an application defines an interface to be used by plug-ins, that interface has a purpose.  For example, I might
+define an interface called IAction that represented an action, and IController that represented a controller.  Different
+modules could fulfill different roles, this is where the role facility comes into play.  The application registers
+a "role" with the NModule master controller, using the RegisterRole() method.  When a module is loaded, its typed are
+searched for the [ModuleRole()] attribute.  If this is found, it checks the role to see if it is registered, and if it is,
+calls the appropriate handler with the assembly and type information.
 
-          &&:  AND operator
-          ||:  OR operator
-          ^^:  XOR operator
-          !!:  NOT operator
-          ==:  EQUAL operator
-          !=:  NOT EQUAL operator
-          <=:  LESS THAN EQUAL operator
-          <<:  LESS THAN operator
-          >=:  GREATER THAN EQUAL operator
-          >>:  GREATER THAN operator
-          ??:  OPTIONAL operator
-          ##:  LOADED operator
+-->> Loading/Unloading Modules <<--
 
-       Example:
-          Elfblade.Core.Net.Xcp
-          (&& (>> Elfblade.Core.Net 2.0) (!= Elfblade.Core 1.0) (!! (<= Elfblade.Core.Net.Extensions 2.0)) (?? (## Elfblade.Core.Net.Extensions)))
-  
-    -> While this might look strange at first, its very easy to parse.  For example, I could turn the following into the token tree:
-    -> Top-Level Operators
-       && || ^^ !! ??
-       
-    -> First-level Operators
-       == != <= << >= >> ##
-       
-    Top-level operators must contain one or more first-level operators.  First-level operators contain a module name and an optional version.  See nmodule-dep.g in the
-    NModule.Dependency.Parser project/subdirectory for more detail. Top-level operators can nest other top-level operators.
-    
-  ModuleRoles:  A comma seperated list of the roles this module will provide services for.  An example might be:
-    ModuleRoles("IServer,IConnection,ISocket,IPacketHandler") for Elfblade.Core.Net.Xcp
-    When the module loader sees this, it goes over each role.  It searches for a module controller which can handle
-    the given role, finds the typename of the given module, then passes the Assembly of the loaded assembly and the typename
-    to the module controller, along with the role it is providing.  It is then up to the module controller what to do with
-    the given type.
-
-Applications which use this architecture will advertise their roles, with the interfaces that correspond to those roles, as well as a handler that can register the types
-that implement the interfaces with the rest of the engine.
\ No newline at end of file
+Basic reflection in .NET uses the Assembly.Load and Assembly.LoadFrom methods.  However, this has the drawback that
+the loaded assemblies cannot be unloaded.  NModule gets around this by wrapping each load into an AppDomain.  (It is
+possible to reuse appdomains, or to disable them completely if necessary).  When NModule loads a module, it checks
+its dependencies, and attempts to load the dependencies.  NModule supports the detection of circular and unresolved
+dependencies, and supports several operators.  (See:  Dependencies for more information).
\ No newline at end of file

Modified: trunk/nmodule.mds
===================================================================
--- trunk/nmodule.mds	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/nmodule.mds	2005-06-23 01:48:44 UTC (rev 18)
@@ -5,12 +5,14 @@
       <Entry build="True" name="NModule.Dependency.Parser" />
       <Entry build="True" name="NModule.Dependency.Parser" />
       <Entry build="True" name="NModule.Core.Loader" />
+      <Entry build="True" name="NModule.Core.Module" />
     </Configuration>
     <Configuration name="Release" ctype="CombineConfiguration">
       <Entry build="True" name="Documentation" />
       <Entry build="True" name="NModule.Dependency.Parser" />
       <Entry build="True" name="NModule.Dependency.Parser" />
       <Entry build="True" name="NModule.Core.Loader" />
+      <Entry build="True" name="NModule.Core.Module" />
     </Configuration>
   </Configurations>
   <StartMode startupentry="Documentation" single="True">
@@ -18,10 +20,12 @@
     <Execute type="None" entry="NModule.Dependency.Parser" />
     <Execute type="None" entry="NModule.Dependency.Parser" />
     <Execute type="None" entry="NModule.Core.Loader" />
+    <Execute type="None" entry="NModule.Core.Module" />
   </StartMode>
   <Entries>
     <Entry filename="./Documentation/Documentation.mdp" />
     <Entry filename="./src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp" />
     <Entry filename="./src/NModule.Core.Loader/NModule.Core.Loader.mdp" />
+    <Entry filename="./src/NModule.Core.Module/NModule.Core.Module.mdp" />
   </Entries>
 </Combine>
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/AssemblyInfo.cs
===================================================================
--- trunk/src/NModule.Core.Loader/AssemblyInfo.cs	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Core.Loader/AssemblyInfo.cs	2005-06-23 01:48:44 UTC (rev 18)
@@ -31,14 +31,14 @@
 // change them to the information which is associated with the assembly
 // you compile.
 
-[assembly: AssemblyTitle("NModule.Core.Loader")]
-[assembly: AssemblyDescription("NModule Loader Facilities (not including Dependency Resolution)")]
-[assembly: AssemblyConfiguration("")]
-[assembly: AssemblyCompany("")]
-[assembly: AssemblyProduct("NModule")]
-[assembly: AssemblyCopyright("Copyright (C) 2005 Michael Tindal and Contributors")]
-[assembly: AssemblyTrademark("")]
-[assembly: AssemblyCulture("")]
+[assembly: AssemblyTitle ("NModule.Core.Loader")]
+[assembly: AssemblyDescription ("NModule Loader Facilities (not including Dependency Resolution)")]
+[assembly: AssemblyConfiguration ("")]
+[assembly: AssemblyCompany ("")]
+[assembly: AssemblyProduct ("NModule")]
+[assembly: AssemblyCopyright ("Copyright (C) 2005 Michael Tindal and Contributors")]
+[assembly: AssemblyTrademark ("")]
+[assembly: AssemblyCulture ("")]
 
 // The assembly version has following format :
 //
@@ -47,10 +47,14 @@
 // You can specify all values by your own or you can build default build and revision
 // numbers with the '*' character (the default):
 
-[assembly: AssemblyVersion("0.1.*")]
+[assembly: AssemblyVersion ("0.1.*")]
 
 // The following attributes specify the key for the sign of your assembly. See the
 // .NET Framework documentation for more information about signing.
 // This is not required, if you don't want signing let these attributes like they're.
-[assembly: AssemblyDelaySign(false)]
-[assembly: AssemblyKeyFile("../../lib/keyfiles/nmodule.snk")]
+[assembly: AssemblyDelaySign (false)]
+#if RELEASE
+[assembly: AssemblyKeyFile ("../../lib/keyfiles/nmodule.snk")]
+#else
+[assembly: AssemblyKeyFile ("")]
+#endif

Added: trunk/src/NModule.Core.Loader/ModuleController.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-23 01:48:44 UTC (rev 18)
@@ -0,0 +1,199 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+using System;
+using System.Collections;
+using System.IO;
+using System.Reflection;
+using C5;
+using NModule.Dependency.Resolver;
+
+namespace NModule.Core.Loader {
+	// This class is the heart and sole of the NModule architecture.
+	// It manages dependencies, keeps ref counts on appdomains,
+	// and so on.
+	public class ModuleController {
+		/***
+		 * We need to keep several bits of information about each module to ensure
+		 * that dependencies are resolved, and we're not unloaded needed appdomains.
+		 * 1)  We keep a map of assemblies and the roles theyve registered.  This is extra
+		 *     information since the handler is used.
+		 * 2)  We keep a map of assemblies belonging to each AppDomain.  If assemblies are
+		 *     loaded as group, then each AppDomain can contain more than one assembly.  This
+		 *     information isn't used if we do 1-to-1 mappings.
+		 * 3)  We keep a refcount on each appdomain.  Every time an appdomain (actually an assembly
+		 *     within that appdomain) is referenced by another module by a dependency or by using
+		 *     the IncRef call from the module, we increment the refcount.  Whenever the depending
+		 *     module is unloaded, or DecRef is called, we decrement the refcount.  The appdomain
+		 *     can only be unloaded when its refcount is 0.
+		 ***/
+
+		// AppDomain -> assembly maps.
+		protected HashDictionary<string, AppDomain> _app_domain_map;
+
+		// Reference Counts
+		protected HashDictionary<AppDomain,int> _ref_counts;
+
+		// Module Search Path
+		protected ArrayList<string> _search_path;
+
+		// Recognized Roles
+		protected ArrayList<ModuleRole> _roles;
+		
+		// Dependency Resolver
+		protected DepResolver _resolver;
+		
+		public ModuleController () {
+			_app_domain_map = new HashDictionary<AppDomain,ArrayList<Assembly>> ();
+			_ref_counts = new HashDictionary<AppDomain,int> ();
+			_search_path = new ArrayList<string> ();
+			_roles = new ArrayList<ModuleRole> ();
+			_resolver = new DepResolver (this, _search_path);
+		}
+
+		// -->> Loading/Unloading <<--
+
+		protected string SearchForModule (string _name) {
+			foreach (string s in _search_path) {
+				if (Directory.Exists (s)) {
+					foreach (string f in Directory.GetFiles (s, "*.dll")) {
+						if (f.SubString (0, f.Length - 4) == _name) {
+							return s + "/" + f;
+						}
+					}
+				}
+			}
+			
+			return null;
+		}
+		
+		// Loads the content of a file to a byte array. 
+		protected byte[] LoadRawFile (string _filename) {
+			FileStream _fs = new FileStream (_filename, FileMode.Open);
+			byte[] _buffer = new byte [(int) _fs.Length];
+			fs.Read (_buffer, 0, _buffer.Length);
+			fs.Close ();
+   
+			return _buffer;
+		}
+		   
+		/*
+		 * We provide two method signatures for loading for convienence.  The first just takes the name of the module (minus the .dll extension),
+		 * and attempts to load it.  The second takes a list of parents and the name.  The first incidentally just calls the second with an empty
+		 * parents list.  The parents list is used for detecting circular dependencies.
+		 */
+		public void LoadModule (string _name) {
+			LoadModule (null, _name);
+		}
+		
+		public void LoadModule (ArrayList<string> _parents, string _name, bool checking=false) {
+			// Okay, this is tricky.  First, we have to load the module into a temp domain
+			// to retrieve its module info.  Then, we have to attempt to resolve the dependencies.
+			// This is going to be fun.  Heh.
+			
+			if (_app_domain_map.HasKey (_name))
+				return; // Already loaded, no need to load it again.
+				
+			if (_parents == null)
+				_parents = new ArrayList<string> ();
+				
+			// This is technically a parent of any depending module.
+			_parents.Add (_name);
+			
+			// Try to find the module on the search path.
+			string _filename = SearchForModule (_name);
+			
+			if (_filename == null)
+				throw new ModuleNotFoundException (string.Format ("The module {0} was not found along the module search path.", _name));
+				
+			// Okay, well, now we know the module exists at least in the file (we hope its a proper dll, but we'll see :).  Now we
+			// need to create the temporary AppDomain and load it to get the info from it.
+			AppDomain _tempDomain = AppDomain.Create ("_temp_" + _name);
+			
+			byte[] _raw_bytes = LoadRawFile (_filename);
+			
+			// The throw here is mostly used from dep resolver calls, although it should also be caught by the immediate caller
+			// (i.e. the application).
+			try {
+				_tempDomain.Load (_raw_bytes);
+			} catch (BadImageFormatException e) {
+				throw ModuleImageException (e.Message);
+			}
+			
+			// Okay, now lets grab the module info from the assembly attributes.
+			Assembly _asm = _tempDomain.GetAssemblies ()[0];
+			
+			try {
+				ModuleInfo _info = new ModuleInfo (_asm);
+			} catch (ModuleInfoException e) {
+				throw InvalidModuleException (e.Message);
+			}
+			
+			// unload the temp domain since its unneeded now.
+			
+			_tempDomain.Unload ();
+			
+			// okay, now we've got the info, let's do some magic with the dependencies.
+			// this will recursively load all of the appropriate assemblies as per the parsed
+			// depedency tree.  It will take into account dependency operators, such as AND, OR
+			// OPT (optional).  Very intelligent stuff.  Of course, if there are no depends,
+			// this just simply returns.  This will of course continue updating the parents as needed
+			// since each time a new module is loaded, the resolver is recursively called until
+			// a module is found.  This is cool.  What this will do is call this method with
+			// checking=true, which will cause it to just return if the module suceeds.  This way
+			// we can ensure we don't load unneeded module Z that is a dependency of X which depends
+			// on Y, because if Z suceeds but Y fails, we don't want X, Y, or Z to fail.  This way,
+			// we can ensure the entire tree can be loaded first (this does take into account already
+			// loaded assemblies).
+			_resolver.ResolveCheck (_parents, _info);
+		
+			if (checking)
+				return;
+							
+			// okay, they're good, lets load the suckers.
+			_resolver.Resolve (_parents, _info);
+			
+			// alright, we've got them all loaded, they exist in the assembly map.
+			// now we create the *real* app domain.
+			AppDomain _domain = AppDomain.Create (_name);
+			
+			// let's load this assembly into the real app domain.
+			_domain.Load (_raw_bytes);
+			
+			// set up the map
+			_app_domain_map.Add (_name, _domain);
+			
+			// increment the reference count on the domain.
+			IncRef (_domain);
+			
+			// increment the reference count for all the dependencies recursively (i.e.
+			// if module A depends on B which depends on C, B gets inc ref'd once, while C
+			// gets inc ref'd twice).
+			_resolver.IncRefs (_info);
+			
+			// FIXME:  Add role handling here.
+		}
+	}
+}		
+		
\ No newline at end of file

Added: trunk/src/NModule.Core.Loader/ModuleLoader.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-23 01:48:44 UTC (rev 18)
@@ -0,0 +1,56 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+using System;
+using System.Collections;
+using System.Reflection;
+
+namespace NModule.Core.Loader {
+	// This class is simply the loader class, it just creates a new AppDomain,
+	// and loads the appropriate assembly into it.  It can also load an assembly into
+	// an existing app-domain (for example, grouped dependencies).  See the configuration
+	// options for an example.
+	public class ModuleLoader {
+		public static AppDomain Load (string module_name) {
+			AppDomain _myDomain = AppDomain.CreateDomain (module_name);
+			
+			return Load (_myDomain, module_name);
+		}
+		
+		public static AppDomain Load (AppDomain domain, string module_name) {
+			try {
+				domain.Load (module_name);
+			} catch (Exception e) {
+				// Logger logger = GlobalSettings.Logger;
+				// LogID id = logger.WriteLogMessage (LogType.Error, "Caught an exception trying to load {0}: ", module_name);
+				// logger.WriteException (id, e.Message);
+				// logger.WriteStackTrace (id, e.Message);
+				// logger.CommitMessage (id);
+				throw e;
+			}
+			
+			return domain;
+		}
+	}
+}

Added: trunk/src/NModule.Core.Loader/ModuleRole.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleRole.cs	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Core.Loader/ModuleRole.cs	2005-06-23 01:48:44 UTC (rev 18)
@@ -0,0 +1,80 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+using System;
+using System.Collections;
+using System.Reflection;
+
+namespace NModule.Core.Loader {
+	public delegate ModuleRoleHandler (Assembly asm, Type basetype);
+	
+	// FIXME:  Document this class using NDoc tags.
+	/*
+	 * This class handles the roles used by the module loader.
+	 * It represents a role given its name, base type, and the
+	 * handler used to instantiate that role.  This role is opaque,
+	 * and could easily be used as a value type, but I feel this is
+	 * the best way to go to ensure future changes dont require semantic
+	 * changes to the engine.
+	 */
+	public class ModuleRole {
+		private Type _baseType;
+		private string _roleName;
+		private ModuleRoleHandler _handler;
+		
+		// Lets get this baby setup :)
+		public ModuleRole (Type basetype, string name, ModuleRoleHandler handler) {
+			_baseType = basetype;
+			_roleName = name;
+			_handler = handler;
+		}
+		
+		public InitiateRole (Assembly asm, Type type) {
+			handler (asm, type);
+		}
+		
+		// all properties are read-only for the moment except the handler (which could conceivably change as other modules are loaded which may take the load
+		// off the main engine)
+		public Type BaseType {
+			get {
+				return _baseType;
+			}
+		}
+		
+		public string RoleName {
+			get {
+				return _roleName;
+			}
+		}
+		
+		public ModuleRoleHandler Handler {
+			get {
+				return _handler;
+			}
+			set {
+				_handler = value;
+			}
+		}
+	}
+}
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp
===================================================================
--- trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp	2005-06-23 01:48:44 UTC (rev 18)
@@ -13,11 +13,16 @@
       <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
     </Configuration>
   </Configurations>
-  <References />
+  <References>
+    <ProjectReference type="Gac" localcopy="True" refto="Mono.C5, Version=0.5.1.1, Culture=neutral, PublicKeyToken=ba07f434b1c35cbd" />
+  </References>
   <DeploymentInformation strategy="File">
     <excludeFiles />
   </DeploymentInformation>
   <Contents>
     <File name="./AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
+    <File name="./ModuleRole.cs" subtype="Code" buildaction="Compile" />
+    <File name="./ModuleLoader.cs" subtype="Code" buildaction="Compile" />
+    <File name="./ModuleController.cs" subtype="Code" buildaction="Compile" />
   </Contents>
 </Project>
\ No newline at end of file

Added: trunk/src/NModule.Core.Loader/NModule.Core.Loader.pidb
===================================================================
(Binary files differ)


Property changes on: trunk/src/NModule.Core.Loader/NModule.Core.Loader.pidb
___________________________________________________________________
Name: svn:mime-type
   + font/ttf

Added: trunk/src/NModule.Core.Module/AssemblyInfo.cs
===================================================================
--- trunk/src/NModule.Core.Module/AssemblyInfo.cs	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Core.Module/AssemblyInfo.cs	2005-06-23 01:48:44 UTC (rev 18)
@@ -0,0 +1,60 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+
+using System.Reflection;
+using System.Runtime.CompilerServices;
+
+// Information about this assembly is defined by the following
+// attributes.
+//
+// change them to the information which is associated with the assembly
+// you compile.
+
+[assembly: AssemblyTitle ("NModule.Core.Module")]
+[assembly: AssemblyDescription ("NModule Module Representation Library")]
+[assembly: AssemblyConfiguration ("")]
+[assembly: AssemblyCompany ("")]
+[assembly: AssemblyProduct ("NModule")]
+[assembly: AssemblyCopyright ("Copyright (C) 2005 Michael Tindal and Contributors")]
+[assembly: AssemblyTrademark ("")]
+[assembly: AssemblyCulture ("")]
+
+// The assembly version has following format :
+//
+// Major.Minor.Build.Revision
+//
+// You can specify all values by your own or you can build default build and revision
+// numbers with the '*' character (the default):
+
+[assembly: AssemblyVersion ("0.1.*")]
+
+// The following attributes specify the key for the sign of your assembly. See the
+// .NET Framework documentation for more information about signing.
+// This is not required, if you don't want signing let these attributes like they're.
+[assembly: AssemblyDelaySign (false)]
+#if RELEASE
+[assembly: AssemblyKeyFile ("../../lib/keyfiles/nmodule.snk")]
+#else
+[assembly: AssemblyKeyFile ("")]
+#endif

Added: trunk/src/NModule.Core.Module/ModuleInfo.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-23 01:48:44 UTC (rev 18)
@@ -0,0 +1,52 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+using System;
+using System.Collections;
+using System.Reflection;
+using NModule.Dependency.Parser;
+
+namespace NModule.Core.Module {
+	public class Module {
+		protected struct ModuleInfo {
+			public string _name;
+			public DepVersion _version;
+			public Assembly _assembly;
+			public AppDomain _domain;
+			public DepNode _deptree;
+		}
+		
+		protected ModuleInfo _info;
+		
+		public Module (string name, Assembly asm, AppDomain domain, DepVersion version, DepNode deptree) {
+			_info = new ModuleInfo();
+			
+			_info._name = name;
+			_info._assembly = asm;
+			_info._domain = domain;
+			_info._version = version;
+			_info._deptree = deptree;
+		}
+		
+		
\ No newline at end of file

Added: trunk/src/NModule.Core.Module/MyClass.cs
===================================================================
--- trunk/src/NModule.Core.Module/MyClass.cs	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Core.Module/MyClass.cs	2005-06-23 01:48:44 UTC (rev 18)
@@ -0,0 +1,7 @@
+// project created on 6/13/2005 at 1:08 AM
+using System;
+
+public class MyClass
+{
+
+}
\ No newline at end of file


Property changes on: trunk/src/NModule.Core.Module/MyClass.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/src/NModule.Core.Module/NModule.Core.Module.mdp
===================================================================
--- trunk/src/NModule.Core.Module/NModule.Core.Module.mdp	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Core.Module/NModule.Core.Module.mdp	2005-06-23 01:48:44 UTC (rev 18)
@@ -0,0 +1,26 @@
+<Project name="NModule.Core.Module" fileversion="2.0" language="C#" ctype="DotNetProject">
+  <Configurations>
+    <Configuration name="Debug" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Debug" assembly="NModule.Core.Module" />
+      <Build debugmode="True" target="Library" />
+      <Execution runwithwarnings="True" consolepause="False" runtime="MsNet" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+    <Configuration name="Release" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Release" assembly="NModule.Core.Module" />
+      <Build debugmode="False" target="Library" />
+      <Execution runwithwarnings="True" consolepause="False" runtime="MsNet" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+  </Configurations>
+  <References>
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Parser" />
+  </References>
+  <DeploymentInformation strategy="File">
+    <excludeFiles />
+  </DeploymentInformation>
+  <Contents>
+    <File name="./AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
+    <File name="./ModuleInfo.cs" subtype="Code" buildaction="Compile" />
+  </Contents>
+</Project>
\ No newline at end of file

Added: trunk/src/NModule.Core.Module/NModule.Core.Module.mds
===================================================================
--- trunk/src/NModule.Core.Module/NModule.Core.Module.mds	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Core.Module/NModule.Core.Module.mds	2005-06-23 01:48:44 UTC (rev 18)
@@ -0,0 +1,16 @@
+<Combine name="NModule.Core.Module" fileversion="2.0">
+  <Configurations>
+    <Configuration name="Debug" ctype="CombineConfiguration">
+      <Entry build="True" name="NModule.Core.Module" />
+    </Configuration>
+    <Configuration name="Release" ctype="CombineConfiguration">
+      <Entry build="True" name="NModule.Core.Module" />
+    </Configuration>
+  </Configurations>
+  <StartMode startupentry="NModule.Core.Module" single="True">
+    <Execute type="None" entry="NModule.Core.Module" />
+  </StartMode>
+  <Entries>
+    <Entry filename="./NModule.Core.Module.mdp" />
+  </Entries>
+</Combine>
\ No newline at end of file

Added: trunk/src/NModule.Core.Module/NModule.Core.Module.pidb
===================================================================
(Binary files differ)


Property changes on: trunk/src/NModule.Core.Module/NModule.Core.Module.pidb
___________________________________________________________________
Name: svn:mime-type
   + font/ttf

Modified: trunk/src/NModule.Dependency.Parser/AssemblyInfo.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/AssemblyInfo.cs	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Dependency.Parser/AssemblyInfo.cs	2005-06-23 01:48:44 UTC (rev 18)
@@ -31,14 +31,14 @@
 // change them to the information which is associated with the assembly
 // you compile.
 
-[assembly: AssemblyTitle("NModule.Dependency.Parser")]
-[assembly: AssemblyDescription("NModule Dependency String Parser/Dependency Tree Generator")]
-[assembly: AssemblyConfiguration("")]
-[assembly: AssemblyCompany("")]
-[assembly: AssemblyProduct("NModule")]
-[assembly: AssemblyCopyright("Copyright (C) 2005 Michael Tindal and Contributors")]
-[assembly: AssemblyTrademark("")]
-[assembly: AssemblyCulture("")]
+[assembly: AssemblyTitle ("NModule.Dependency.Parser")]
+[assembly: AssemblyDescription ("NModule Dependency String Parser/Dependency Tree Generator")]
+[assembly: AssemblyConfiguration ("")]
+[assembly: AssemblyCompany ("")]
+[assembly: AssemblyProduct ("NModule")]
+[assembly: AssemblyCopyright ("Copyright (C) 2005 Michael Tindal and Contributors")]
+[assembly: AssemblyTrademark ("")]
+[assembly: AssemblyCulture ("")]
 
 // The assembly version has following format :
 //
@@ -47,10 +47,14 @@
 // You can specify all values by your own or you can build default build and revision
 // numbers with the '*' character (the default):
 
-[assembly: AssemblyVersion("0.1.*")]
+[assembly: AssemblyVersion ("0.1.*")]
 
 // The following attributes specify the key for the sign of your assembly. See the
 // .NET Framework documentation for more information about signing.
 // This is not required, if you don't want signing let these attributes like they're.
-[assembly: AssemblyDelaySign(false)]
-[assembly: AssemblyKeyFile("../../lib/keyfiles/nmodule.snk")]
+[assembly: AssemblyDelaySign (false)]
+#if RELEASE
+[assembly: AssemblyKeyFile ("../../lib/keyfiles/nmodule.snk")]
+#else
+[assembly: AssemblyKeyFile ("")]
+#endif

Modified: trunk/src/NModule.Dependency.Parser/DepConstraint.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepConstraint.cs	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Dependency.Parser/DepConstraint.cs	2005-06-23 01:48:44 UTC (rev 18)
@@ -25,64 +25,51 @@
 using System;
 using System.Collections;
 
-namespace NModule.Dependency.Parser
-{
-	public class DepConstraint
-	{
+namespace NModule.Dependency.Parser {
+	public class DepConstraint {
 		private DepVersion _version;
 		private string _name;
 
-		public DepConstraint()
-		{
+		public DepConstraint () {
 			_name = "";
 			_version = null;
 		}
 
-		public DepVersion Version
-		{
-			get
-			{
+		public DepVersion Version {
+			get {
 				return _version;
 			}
-			set
-			{
+			set {
 				_version = value;
 			}
 		}
 
-		public string Name
-		{
-			get
-			{
+		public string Name {
+			get {
 				return _name;
 			}
-			set
-			{
+			set {
 				_name = value;
 			}
 		}
 
-		public string VersionTmp
-		{
-			set
-			{
+		public string VersionTmp {
+			set {
 				_version = VersionParse(value);
 			}
 		}
 
-		protected DepVersion VersionParse(string v)
-		{
+		protected DepVersion VersionParse (string v) {
 			// Here we go :)
-			DepVersion ver = new DepVersion();
-			string[] vparts = v.Split('.');
-			ver.Major = Int32.Parse(vparts[0]);
-			ver.Minor = Int32.Parse(vparts[1]);
+			DepVersion ver = new DepVersion ();
+			string[] vparts = v.Split ('.');
+			ver.Major = Int32.Parse (vparts[0]);
+			ver.Minor = Int32.Parse (vparts[1]);
 			if (vparts.Length > 2)
 				ver.Build = Int32.Parse(vparts[2]);
 			if (vparts.Length > 3)
-				ver.Build = Int32.Parse(vparts[3]);
+				ver.Revision = Int32.Parse(vparts[3]);
 			return ver;
 		}
 	}
 }
-

Modified: trunk/src/NModule.Dependency.Parser/DepNode.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepNode.cs	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Dependency.Parser/DepNode.cs	2005-06-23 01:48:44 UTC (rev 18)
@@ -25,71 +25,55 @@
 using System;
 using System.Collections;
 
-namespace NModule.Dependency.Parser
-{
-
-	public class DepNode
-	{
+namespace NModule.Dependency.Parser {
+	public class DepNode {
 		private DepConstraint _constraint;
 		private DepOps _op;
 		private DepNode _parent;
 		private ArrayList _children;
 
-		public DepNode()
-		{
+		public DepNode () {
 			_parent = null;
-			_children = new ArrayList();
+			_children = new ArrayList ();
 		}
 
-		public DepNode(DepNode parent)
-		{
+		public DepNode (DepNode parent) {
 			_parent = parent;
-			_children = new ArrayList();
+			_children = new ArrayList ();
 		}
 
-		public DepNode Parent
-		{
-			get
-			{
+		public DepNode Parent {
+			get {
 				return _parent;
 			}
 		}
 
-		public ArrayList Children
-		{
-			get
-			{
+		public ArrayList Children {
+			get {
 				return _children;
 			}
 		}
 
-		public DepNode CreateNewChild()
-		{
-			DepNode child = new DepNode(this);
-			_children.Add(child);
+		public DepNode CreateNewChild () {
+			DepNode child = new DepNode (this);
+			_children.Add (child);
 			return child;
 		}
 
-		public DepOps DepOp
-		{
-			get
-			{
+		public DepOps DepOp {
+			get {
 				return _op;
 			}
-			set
-			{
+			set {
 				_op = value;
 			}
 		}
 
-		public DepConstraint Constraint
-		{
-			get
-			{
+		public DepConstraint Constraint {
+			get {
 				return _constraint;
 			}
-			set
-			{
+			set {
 				_constraint = value;
 			}
 		}

Modified: trunk/src/NModule.Dependency.Parser/DepOps.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepOps.cs	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Dependency.Parser/DepOps.cs	2005-06-23 01:48:44 UTC (rev 18)
@@ -22,7 +22,6 @@
  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
  **************************************************************************/
 
-namespace NModule.Dependency.Parser
-{
+namespace NModule.Dependency.Parser {
 	public enum DepOps { Not, And, Or, Xor, Opt, Equal, NotEqual, LessThanEqual, LessThan, GreaterThanEqual, GreaterThan, Loaded };
 }

Modified: trunk/src/NModule.Dependency.Parser/DepVersion.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepVersion.cs	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Dependency.Parser/DepVersion.cs	2005-06-23 01:48:44 UTC (rev 18)
@@ -22,18 +22,75 @@
  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
  **************************************************************************/
 
-namespace NModule.Dependency.Parser
-{
-	public class DepVersion
-	{
-		public DepVersion()
-		{
-			Major = Minor = Build = Patch = 0;
+namespace NModule.Dependency.Parser {
+	public class DepVersion {
+		private int _major;
+		private int _minor;
+		private int _build;
+		private int _revision;
+		
+		public DepVersion (int major, int minor, int build, int revision) {
+			_major = major;
+			_minor = minor;
+			_build = build;
+			_revision = revision;
 		}
-
-		public int Major;
-		public int Minor;
-		public int Build;
-		public int Patch;
+		
+		public DepVersion (int major, int minor, int build) {
+			_major = major;
+			_minor = minor;
+			_build = build;
+			_revision = -1;
+		}
+		
+		public DepVersion (int major, int minor) {
+			_major = major;
+			_minor = minor;
+			_build = -1;
+			_revision = -1;
+		}
+		 
+		public DepVersion () {
+			_major = -1;
+			_minor = -1;
+			_build = -1;
+			_revision = -1;
+		}
+	
+		public int Major {
+			get {
+				return _major;
+			}
+			set {
+				_major = value;
+			}
+		}
+		
+		public int Minor {
+			get {
+				return _minor;
+			}
+			set {
+				_minor = value;
+			}
+		}
+		
+		public int Build {
+			get {
+				return _build;
+			}
+			set {
+				_build = value;
+			}
+		}
+		
+		public int Revision {
+			get {
+				return _revision;
+			}
+			set {
+				_revision = value;
+			}
+		}
 	}
 }

Modified: trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp
===================================================================
--- trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp	2005-06-10 20:54:32 UTC (rev 17)
+++ trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp	2005-06-23 01:48:44 UTC (rev 18)
@@ -13,7 +13,9 @@
       <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
     </Configuration>
   </Configurations>
-  <References />
+  <References>
+    <ProjectReference type="Assembly" localcopy="True" refto="../../../../usr/lib/antlr.runtime.dll" />
+  </References>
   <DeploymentInformation strategy="File">
     <excludeFiles />
   </DeploymentInformation>

Modified: trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb
===================================================================
(Binary files differ)



From urilith at sheep.berlios.de  Thu Jun 23 03:49:03 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Thu, 23 Jun 2005 03:49:03 +0200
Subject: [nmodule-commits] r19 - in trunk: . src src/NModule.Core.Loader src/NModule.Core.Module src/NModule.Dependency.Core src/NModule.Dependency.Parser
Message-ID: <200506230149.j5N1n3s0015655@sheep.berlios.de>

Author: urilith
Date: 2005-06-23 03:49:01 +0200 (Thu, 23 Jun 2005)
New Revision: 19

Added:
   trunk/src/NModule.Dependency.Core/
   trunk/src/NModule.Dependency.Core/AssemblyInfo.cs
   trunk/src/NModule.Dependency.Core/DepConstraint.cs
   trunk/src/NModule.Dependency.Core/DepNode.cs
   trunk/src/NModule.Dependency.Core/DepOps.cs
   trunk/src/NModule.Dependency.Core/DepVersion.cs
   trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.mdp
   trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.mds
   trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.pidb
Removed:
   trunk/src/NModule.Core.Module/MyClass.cs
   trunk/src/NModule.Dependency.Parser/DepConstraint.cs
   trunk/src/NModule.Dependency.Parser/DepNode.cs
   trunk/src/NModule.Dependency.Parser/DepOps.cs
   trunk/src/NModule.Dependency.Parser/DepVersion.cs
   trunk/src/NModule.Dependency.Parser/nmodule-dep.g.old
Modified:
   trunk/
   trunk/ChangeLog
   trunk/nmodule.mds
   trunk/src/NModule.Core.Loader/ModuleController.cs
   trunk/src/NModule.Core.Loader/ModuleLoader.cs
   trunk/src/NModule.Core.Loader/ModuleRole.cs
   trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp
   trunk/src/NModule.Core.Loader/NModule.Core.Loader.pidb
   trunk/src/NModule.Core.Module/ModuleInfo.cs
   trunk/src/NModule.Core.Module/NModule.Core.Module.pidb
   trunk/src/NModule.Dependency.Parser/DepLexer.cs
   trunk/src/NModule.Dependency.Parser/DepParser.cs
   trunk/src/NModule.Dependency.Parser/DepParserTokenTypes.cs
   trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp
   trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb
   trunk/src/NModule.Dependency.Parser/nmodule-dep.g
Log:
 r109 at dreamshadow:  urilith | 2005-06-22 20:47:27 -0500
 2005-06-22 Michael Tindal <urilith at gentoo.org>
 
   * nmodule.mds: Updated.
   * src/NModule.Core.Loader/ModuleController.cs: Added a lot of functionality to it, still not finished yet though.
   * src/NModule.Core.Loader/ModuleLoader.cs: Moved the basic loading code from the controller.
   * src/NModule.Core.Loader/ModuleRole.cs: Added a deregister handling for when a module gets unloaded.
   * src/NModule.Core.Loader/NModule.Core.Loader.mdp: Updated.
   * src/NModule.Core.Loader/NModule.Core.Loader.pidb: Updated.
   * src/NModule.Core.Module/ModuleInfo.cs: Removed useless Module class.
   * src/NModule.Core.Module/NModule.Core.Module.pidb: Updated.
   * src/NModule.Core.Module/MyClass.cs: Removed.
   * src/NModule.Dependency.Parser/DepLexer.cs: Updated to use new NModule.Dependency.Core namespace.
   * src/NModule.Dependency.Parser/DepParser.cs: Updated to use new NModule.Dependency.Core namespace.
   * src/NModule.Dependency.Parser/DepParserTokenTypes.cs: Updated to use new NModule.Dependency.Core namespace.
   * src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp: Updated.
   * src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb: Updated.
   * src/NModule.Dependency.Parser/nmodule-dep.g: Updated to use new NModule.Dependency.Core namespace.
   * src/NModule.Dependency.Parser/DepConstraint.cs: Moved to NModule.Dependency.Core.
   * src/NModule.Dependency.Parser/DepNode.cs: Moved to NModule.Dependency.Core.
   * src/NModule.Dependency.Parser/DepOps.cs: Moved to NModule.Dependency.Core.
   * src/NModule.Dependency.Parser/DepVersion.cs: Moved to NModule.Dependency.Core.
   * src/NModule.Dependency.Parser/nmodule-dep.g.old: Removed.
   * src/NModule.Dependency.Core: New namespace.
   * src/NModule.Dependency.Core/AssemblyInfo.cs: New namespace.
   * src/NModule.Dependency.Core/DepConstraint.cs: New namespace.
   * src/NModule.Dependency.Core/DepNode.cs: Moved from the parser.
   * src/NModule.Dependency.Core/DepOps.cs: Moved from the parser.
   * src/NModule.Dependency.Core/DepVersion.cs: Moved from the parser.
   * src/NModule.Dependency.Core/NModule.Dependency.Core.mdp: New MonoDevelop project.
   * src/NModule.Dependency.Core/NModule.Dependency.Core.mds: New MonoDevelop solution.
   * src/NModule.Dependency.Core/NModule.Dependency.Core.pidb: New MonoDevelop stuff.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:108
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:109

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/ChangeLog	2005-06-23 01:49:01 UTC (rev 19)
@@ -1,3 +1,35 @@
+2005-06-22 Michael Tindal <urilith at gentoo.org>
+
+	* nmodule.mds: Updated.
+	* src/NModule.Core.Loader/ModuleController.cs: Added a lot of functionality to it, still not finished yet though.
+	* src/NModule.Core.Loader/ModuleLoader.cs: Moved the basic loading code from the controller.
+	* src/NModule.Core.Loader/ModuleRole.cs: Added a deregister handling for when a module gets unloaded.
+	* src/NModule.Core.Loader/NModule.Core.Loader.mdp: Updated.
+	* src/NModule.Core.Loader/NModule.Core.Loader.pidb: Updated.
+	* src/NModule.Core.Module/ModuleInfo.cs: Removed useless Module class.
+	* src/NModule.Core.Module/NModule.Core.Module.pidb: Updated.
+	* src/NModule.Core.Module/MyClass.cs: Removed.
+	* src/NModule.Dependency.Parser/DepLexer.cs: Updated to use new NModule.Dependency.Core namespace.
+	* src/NModule.Dependency.Parser/DepParser.cs: Updated to use new NModule.Dependency.Core namespace.
+	* src/NModule.Dependency.Parser/DepParserTokenTypes.cs: Updated to use new NModule.Dependency.Core namespace.
+	* src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp: Updated.
+	* src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb: Updated.
+	* src/NModule.Dependency.Parser/nmodule-dep.g: Updated to use new NModule.Dependency.Core namespace.
+	* src/NModule.Dependency.Parser/DepConstraint.cs: Moved to NModule.Dependency.Core.
+	* src/NModule.Dependency.Parser/DepNode.cs: Moved to NModule.Dependency.Core.
+	* src/NModule.Dependency.Parser/DepOps.cs: Moved to NModule.Dependency.Core.
+	* src/NModule.Dependency.Parser/DepVersion.cs: Moved to NModule.Dependency.Core.
+	* src/NModule.Dependency.Parser/nmodule-dep.g.old: Removed.
+	* src/NModule.Dependency.Core: New namespace.
+	* src/NModule.Dependency.Core/AssemblyInfo.cs: New namespace.
+	* src/NModule.Dependency.Core/DepConstraint.cs: New namespace.
+	* src/NModule.Dependency.Core/DepNode.cs: Moved from the parser.
+	* src/NModule.Dependency.Core/DepOps.cs: Moved from the parser.
+	* src/NModule.Dependency.Core/DepVersion.cs: Moved from the parser.
+	* src/NModule.Dependency.Core/NModule.Dependency.Core.mdp: New MonoDevelop project.
+	* src/NModule.Dependency.Core/NModule.Dependency.Core.mds: New MonoDevelop solution.
+	* src/NModule.Dependency.Core/NModule.Dependency.Core.pidb: New MonoDevelop stuff.
+
 2005-06-21 Michael Tindal <urilith at gentoo.org>
 
 	* Documentation/DESIGN: Started redoing it, its not even remotely complete, but should give a better overview of my plans.

Modified: trunk/nmodule.mds
===================================================================
--- trunk/nmodule.mds	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/nmodule.mds	2005-06-23 01:49:01 UTC (rev 19)
@@ -6,6 +6,7 @@
       <Entry build="True" name="NModule.Dependency.Parser" />
       <Entry build="True" name="NModule.Core.Loader" />
       <Entry build="True" name="NModule.Core.Module" />
+      <Entry build="True" name="NModule.Dependency.Core" />
     </Configuration>
     <Configuration name="Release" ctype="CombineConfiguration">
       <Entry build="True" name="Documentation" />
@@ -13,6 +14,7 @@
       <Entry build="True" name="NModule.Dependency.Parser" />
       <Entry build="True" name="NModule.Core.Loader" />
       <Entry build="True" name="NModule.Core.Module" />
+      <Entry build="True" name="NModule.Dependency.Core" />
     </Configuration>
   </Configurations>
   <StartMode startupentry="Documentation" single="True">
@@ -21,11 +23,13 @@
     <Execute type="None" entry="NModule.Dependency.Parser" />
     <Execute type="None" entry="NModule.Core.Loader" />
     <Execute type="None" entry="NModule.Core.Module" />
+    <Execute type="None" entry="NModule.Dependency.Core" />
   </StartMode>
   <Entries>
     <Entry filename="./Documentation/Documentation.mdp" />
     <Entry filename="./src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp" />
     <Entry filename="./src/NModule.Core.Loader/NModule.Core.Loader.mdp" />
     <Entry filename="./src/NModule.Core.Module/NModule.Core.Module.mdp" />
+    <Entry filename="./src/NModule.Dependency.Core/NModule.Dependency.Core.mdp" />
   </Entries>
 </Combine>
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/ModuleController.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -26,7 +26,6 @@
 using System.Collections;
 using System.IO;
 using System.Reflection;
-using C5;
 using NModule.Dependency.Resolver;
 
 namespace NModule.Core.Loader {
@@ -34,166 +33,190 @@
 	// It manages dependencies, keeps ref counts on appdomains,
 	// and so on.
 	public class ModuleController {
-		/***
-		 * We need to keep several bits of information about each module to ensure
-		 * that dependencies are resolved, and we're not unloaded needed appdomains.
-		 * 1)  We keep a map of assemblies and the roles theyve registered.  This is extra
-		 *     information since the handler is used.
-		 * 2)  We keep a map of assemblies belonging to each AppDomain.  If assemblies are
-		 *     loaded as group, then each AppDomain can contain more than one assembly.  This
-		 *     information isn't used if we do 1-to-1 mappings.
-		 * 3)  We keep a refcount on each appdomain.  Every time an appdomain (actually an assembly
-		 *     within that appdomain) is referenced by another module by a dependency or by using
-		 *     the IncRef call from the module, we increment the refcount.  Whenever the depending
-		 *     module is unloaded, or DecRef is called, we decrement the refcount.  The appdomain
-		 *     can only be unloaded when its refcount is 0.
-		 ***/
-
+#region Members
 		// AppDomain -> assembly maps.
-		protected HashDictionary<string, AppDomain> _app_domain_map;
+		protected Hashtable _app_domain_map;
 
 		// Reference Counts
-		protected HashDictionary<AppDomain,int> _ref_counts;
+		protected Hashtable _ref_counts;
 
 		// Module Search Path
-		protected ArrayList<string> _search_path;
+		protected ArrayList _search_path;
 
 		// Recognized Roles
-		protected ArrayList<ModuleRole> _roles;
+		protected ArrayList _roles;
 		
+		// Information Map
+		protected Hashtable _info_map;
+		
 		// Dependency Resolver
 		protected DepResolver _resolver;
 		
+		// Module Loader
+		protected ModuleLoader _loader;
+#endregion
+	
 		public ModuleController () {
-			_app_domain_map = new HashDictionary<AppDomain,ArrayList<Assembly>> ();
-			_ref_counts = new HashDictionary<AppDomain,int> ();
-			_search_path = new ArrayList<string> ();
-			_roles = new ArrayList<ModuleRole> ();
+			_app_domain_map = new Hashtable ();
+			_ref_counts = new Hashtable ();
+			_search_path = new ArrayList ();
+			_roles = new ArrayList ();
 			_resolver = new DepResolver (this, _search_path);
+			_loader = new ModuleLoader (_search_path, _resolver);
+			_info_map = new Hashtable ();
 		}
 
-		// -->> Loading/Unloading <<--
-
-		protected string SearchForModule (string _name) {
-			foreach (string s in _search_path) {
-				if (Directory.Exists (s)) {
-					foreach (string f in Directory.GetFiles (s, "*.dll")) {
-						if (f.SubString (0, f.Length - 4) == _name) {
-							return s + "/" + f;
-						}
-					}
-				}
-			}
-			
-			return null;
-		}
-		
-		// Loads the content of a file to a byte array. 
-		protected byte[] LoadRawFile (string _filename) {
-			FileStream _fs = new FileStream (_filename, FileMode.Open);
-			byte[] _buffer = new byte [(int) _fs.Length];
-			fs.Read (_buffer, 0, _buffer.Length);
-			fs.Close ();
-   
-			return _buffer;
-		}
-		   
-		/*
-		 * We provide two method signatures for loading for convienence.  The first just takes the name of the module (minus the .dll extension),
-		 * and attempts to load it.  The second takes a list of parents and the name.  The first incidentally just calls the second with an empty
-		 * parents list.  The parents list is used for detecting circular dependencies.
-		 */
+#region Loading/Unloading
 		public void LoadModule (string _name) {
 			LoadModule (null, _name);
 		}
 		
-		public void LoadModule (ArrayList<string> _parents, string _name, bool checking=false) {
-			// Okay, this is tricky.  First, we have to load the module into a temp domain
-			// to retrieve its module info.  Then, we have to attempt to resolve the dependencies.
-			// This is going to be fun.  Heh.
+		public void LoadModule (ArrayList _parents, string _name) {
+			ModuleInfo _info;
 			
-			if (_app_domain_map.HasKey (_name))
-				return; // Already loaded, no need to load it again.
-				
-			if (_parents == null)
-				_parents = new ArrayList<string> ();
-				
-			// This is technically a parent of any depending module.
-			_parents.Add (_name);
+			AppDomain _domain = _loader.LoadModule (_parents, _name, out _info);
 			
-			// Try to find the module on the search path.
-			string _filename = SearchForModule (_name);
+			// set up the map
+			_app_domain_map.Add (_name, _domain);
 			
-			if (_filename == null)
-				throw new ModuleNotFoundException (string.Format ("The module {0} was not found along the module search path.", _name));
-				
-			// Okay, well, now we know the module exists at least in the file (we hope its a proper dll, but we'll see :).  Now we
-			// need to create the temporary AppDomain and load it to get the info from it.
-			AppDomain _tempDomain = AppDomain.Create ("_temp_" + _name);
+			// increment the reference count on the domain.
+			IncRef (_domain);
 			
-			byte[] _raw_bytes = LoadRawFile (_filename);
+			// increment the reference count for all the dependencies recursively (i.e.
+			// if module A depends on B which depends on C, B gets inc ref'd once, while C
+			// gets inc ref'd twice, for both A and B).
+			_resolver.IncRefs (_info);
 			
-			// The throw here is mostly used from dep resolver calls, although it should also be caught by the immediate caller
-			// (i.e. the application).
-			try {
-				_tempDomain.Load (_raw_bytes);
-			} catch (BadImageFormatException e) {
-				throw ModuleImageException (e.Message);
-			}
+			// Set up roles.
+			CallRoleHandlers (_info);
 			
-			// Okay, now lets grab the module info from the assembly attributes.
-			Assembly _asm = _tempDomain.GetAssemblies ()[0];
+			// Set up info map.
+			_info_map.Add (_name, _info);
 			
-			try {
-				ModuleInfo _info = new ModuleInfo (_asm);
-			} catch (ModuleInfoException e) {
-				throw InvalidModuleException (e.Message);
+			// Entry handlers
+			CallEntryHandler (_domain.GetAssemblies()[0]);
+		}
+		
+		public void UnloadModule (string _name) {
+			// This is fun stuff.  We can't unload a module any of the following conditions fail:
+			//  1) The module must be a top-level node in the dep map, i.e no other modules can
+			//  be depending on it.
+			//  2) The reference count on the appdomain must be 1, which means the only thing
+			//  using this appdomain is the module inside of it.
+			
+			if (!_domain_map.Contains (_name))
+				return; // suckers not loaded, why are we unloading it?
+			
+			ModuleInfo _info = (ModuleInfo)_info_map[_name];
+			
+			AppDomain _domain = (AppDomain)_domain_map[_name];
+			if (((int)_ref_counts[_domain]) > 1) {
+				throw new DomainStillReferencedException (string.Format ("The domain holding the module {0} cannot be unloaded because it is still being referenced.", _name));
 			}
 			
-			// unload the temp domain since its unneeded now.
+			// okay, everything's good.  This will remove the domain from the reference list since its reference count is now 0.
+			DecRef (_domain);
 			
-			_tempDomain.Unload ();
+			// okay, lets remove the domain map association
+			_domain_map.Remove (_name);
 			
-			// okay, now we've got the info, let's do some magic with the dependencies.
-			// this will recursively load all of the appropriate assemblies as per the parsed
-			// depedency tree.  It will take into account dependency operators, such as AND, OR
-			// OPT (optional).  Very intelligent stuff.  Of course, if there are no depends,
-			// this just simply returns.  This will of course continue updating the parents as needed
-			// since each time a new module is loaded, the resolver is recursively called until
-			// a module is found.  This is cool.  What this will do is call this method with
-			// checking=true, which will cause it to just return if the module suceeds.  This way
-			// we can ensure we don't load unneeded module Z that is a dependency of X which depends
-			// on Y, because if Z suceeds but Y fails, we don't want X, Y, or Z to fail.  This way,
-			// we can ensure the entire tree can be loaded first (this does take into account already
-			// loaded assemblies).
-			_resolver.ResolveCheck (_parents, _info);
-		
-			if (checking)
-				return;
-							
-			// okay, they're good, lets load the suckers.
-			_resolver.Resolve (_parents, _info);
+			// the info map needs to go too
+			_info_map.Remove (_name);
 			
-			// alright, we've got them all loaded, they exist in the assembly map.
-			// now we create the *real* app domain.
-			AppDomain _domain = AppDomain.Create (_name);
+			// Let people know theyre module has been unloaded.
+			CallRoleUnregisterHandlers (_info);
 			
-			// let's load this assembly into the real app domain.
-			_domain.Load (_raw_bytes);
+			// Exit handlers
+			CallExitHandler (_domain.GetAssemblies()[0]);
 			
-			// set up the map
-			_app_domain_map.Add (_name, _domain);
+			// And finally, unload the domain.
+			_domain.Unload ();
+		}
+#endregion
+
+#region Domain Reference Counts
+		protected void IncRef (AppDomain _domain) {
+			if (!_ref_counts.Contains (_domain)) {
+				_ref_counts.Add (_domain, 1);
+			}
 			
-			// increment the reference count on the domain.
-			IncRef (_domain);
+			_ref_counts[_domain] = ((int)_ref_counts[_domain]) + 1;
+		}
+		
+		protected void DecRef (AppDomain _domain) {
+			if (!_ref_counts.Contains (_domain)) {
+				return;
+				
+			_ref_counts[_domain] = ((int)_ref_counts[_domain]) - 1;
 			
-			// increment the reference count for all the dependencies recursively (i.e.
-			// if module A depends on B which depends on C, B gets inc ref'd once, while C
-			// gets inc ref'd twice).
-			_resolver.IncRefs (_info);
+			if (((int)_ref_counts[_domain]) == 0) {
+				_ref_counts.Remove (_domain); // no references, this suckers getting unloaded.
+			}
+		}
+#endregion
+
+#region Role registration
+		public void RegisterNewRole (string name, Type type, RoleRegisterHandler reg, RoleUnregisterHandler unreg) {
+			ModuleRole _role = new ModuleRole (name, type, reg, unreg);
 			
-			// FIXME:  Add role handling here.
+			_roles.Add (_role);
 		}
+#endregion
+
+#region Role Handlers
+		public void CallRoleHandlers (ModuleInfo _info) {
+			foreach (ModuleRoleAttribute _attr in _info.ModuleRoleAttributes) {
+				string _myRole = _attr.Role;
+				
+				foreach (ModuleRole _role in _roles) {
+					if (_role.Name == _myRole) {
+						Assembly _asm = _info.Owner;
+						
+						Type _type = null;
+						
+						foreach (Type __type in _asm.GetTypes ()) {
+							if (__type.IsSubclassOf (_role.BaseType)) {
+								_type = __type;
+								break;
+							}
+						}
+						
+						if (_type == null) {
+							continue; // don't have a type for this role.
+						}
+						
+						_role.RegistrationHandler (_asm, _type);
+					}
+				}
+			}
+		}
+		
+		public void CallRoleUnregisterHandlers (ModuleInfo _info) {
+			foreach (ModuleRoleAttribute _attr in _info.ModuleRoleAttributes) {
+				string _myRole = _attr.Role;
+				
+				foreach (ModuleRole _role in _roles) {
+					if (_role.Name == _myRole) {
+						Assembly _asm = _info.Owner;
+						
+						Type _type = null;
+						
+						foreach (Type __type in _asm.GetTypes ()) {
+							if (__type.IsSubclassOf (_role.BaseType)) {
+								_type = __type;
+								break;
+							}
+						}
+						
+						if (_type == null) {
+							continue; // don't have a type for this role.
+						}
+						
+						_role.UnregistrationHandler (_asm, _type);
+					}
+				}
+			}
+		}
+#endregion 
 	}
 }		
-		
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/ModuleLoader.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -25,6 +25,7 @@
 using System;
 using System.Collections;
 using System.Reflection;
+using NModule.Dependency.Resolver;
 
 namespace NModule.Core.Loader {
 	// This class is simply the loader class, it just creates a new AppDomain,
@@ -32,25 +33,125 @@
 	// an existing app-domain (for example, grouped dependencies).  See the configuration
 	// options for an example.
 	public class ModuleLoader {
-		public static AppDomain Load (string module_name) {
-			AppDomain _myDomain = AppDomain.CreateDomain (module_name);
+	
+		protected ArrayList _search_path;
+		
+		protected DepResolver _resolver;
+		
+		public ModuleLoader (string search_path, DepResolver resolver) {
+			_search_path = search_path;
+			_resolver = resolver;
+		}
+		
+		// Loads the content of a file to a byte array. 
+		protected byte[] LoadRawFile (string _filename) {
+			FileStream _fs = new FileStream (_filename, FileMode.Open);
+			byte[] _buffer = new byte [(int) _fs.Length];
+			fs.Read (_buffer, 0, _buffer.Length);
+			fs.Close ();
+   
+			return _buffer;
+		}
+		  
+		protected string SearchForModule (string _name) {
+			foreach (string s in _search_path) {
+				if (Directory.Exists (s)) {
+					foreach (string f in Directory.GetFiles (s, "*.dll")) {
+						if (f.SubString (0, f.Length - 4) == _name) {
+							return s + "/" + f;
+						}
+					}
+				}
+			}
 			
-			return Load (_myDomain, module_name);
+			return null;
 		}
+		 
+		/*
+		 * We provide two method signatures for loading for convienence.  The first just takes the name of the module (minus the .dll extension),
+		 * and attempts to load it.  The second takes a list of parents and the name.  The first incidentally just calls the second with an empty
+		 * parents list.  The parents list is used for detecting circular dependencies.
+		 */
+		public AppDomain LoadModule (string _name, out ModuleInfo _info) {
+			return LoadModule (null, _name, out _info);
+		}
 		
-		public static AppDomain Load (AppDomain domain, string module_name) {
+		public AppDomain LoadModule (ArrayList<string> _parents, string _name, bool checking=false, out ModuleInfo _info) {
+			// Okay, this is tricky.  First, we have to load the module into a temp domain
+			// to retrieve its module info.  Then, we have to attempt to resolve the dependencies.
+			// This is going to be fun.  Heh.
+			
+			if (_app_domain_map.HasKey (_name))
+				return; // Already loaded, no need to load it again.
+				
+			if (_parents == null)
+				_parents = new ArrayList ();
+				
+			// This is technically a parent of any depending module.
+			_parents.Add (_name);
+			
+			// Try to find the module on the search path.
+			string _filename = SearchForModule (_name);
+			
+			if (_filename == null)
+				throw new ModuleNotFoundException (string.Format ("The module {0} was not found along the module search path.", _name));
+				
+			// Okay, well, now we know the module exists at least in the file (we hope its a proper dll, but we'll see :).  Now we
+			// need to create the temporary AppDomain and load it to get the info from it.
+			AppDomain _tempDomain = AppDomain.Create ("_temp_" + _name);
+			
+			byte[] _raw_bytes = LoadRawFile (_filename);
+			
+			// The throw here is mostly used from dep resolver calls, although it should also be caught by the immediate caller
+			// (i.e. the application).
 			try {
-				domain.Load (module_name);
-			} catch (Exception e) {
-				// Logger logger = GlobalSettings.Logger;
-				// LogID id = logger.WriteLogMessage (LogType.Error, "Caught an exception trying to load {0}: ", module_name);
-				// logger.WriteException (id, e.Message);
-				// logger.WriteStackTrace (id, e.Message);
-				// logger.CommitMessage (id);
-				throw e;
+				_tempDomain.Load (_raw_bytes);
+			} catch (BadImageFormatException e) {
+				throw ModuleImageException (e.Message);
 			}
 			
-			return domain;
+			// Okay, now lets grab the module info from the assembly attributes.
+			Assembly _asm = _tempDomain.GetAssemblies ()[0];
+			
+			try {
+				_info = new ModuleInfo (_asm);
+			} catch (ModuleInfoException e) {
+				throw InvalidModuleException (e.Message);
+			}
+			
+			// unload the temp domain since its unneeded now.
+			
+			_tempDomain.Unload ();
+			
+			// okay, now we've got the info, let's do some magic with the dependencies.
+			// this will recursively load all of the appropriate assemblies as per the parsed
+			// depedency tree.  It will take into account dependency operators, such as AND, OR
+			// OPT (optional).  Very intelligent stuff.  Of course, if there are no depends,
+			// this just simply returns.  This will of course continue updating the parents as needed
+			// since each time a new module is loaded, the resolver is recursively called until
+			// a module is found.  This is cool.  What this will do is call this method with
+			// checking=true, which will cause it to just return if the module suceeds.  This way
+			// we can ensure we don't load unneeded module Z that is a dependency of X which depends
+			// on Y, because if Z suceeds but Y fails, we don't want X, Y, or Z to fail.  This way,
+			// we can ensure the entire tree can be loaded first (this does take into account already
+			// loaded assemblies).
+			_resolver.ResolveCheck (_parents, _info);
+		
+			if (checking)
+				return;
+							
+			// okay, they're good, lets load the suckers.
+			_resolver.Resolve (_parents, _info);
+			
+			// alright, we've got them all loaded, they exist in the assembly map.
+			// now we create the *real* app domain.
+			AppDomain _domain = AppDomain.Create (_name);
+			
+			// let's load this assembly into the real app domain.
+			_domain.Load (_raw_bytes);
+			
+			// We can't do any more with this.
+			return _domain;
 		}
 	}
 }

Modified: trunk/src/NModule.Core.Loader/ModuleRole.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleRole.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Core.Loader/ModuleRole.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -27,9 +27,10 @@
 using System.Reflection;
 
 namespace NModule.Core.Loader {
-	public delegate ModuleRoleHandler (Assembly asm, Type basetype);
+	public delegate RoleRegisterHandler (Assembly asm, Type basetype);
 	
-	// FIXME:  Document this class using NDoc tags.
+	public delegate RoleUnregisterHandler (Assembly asm);
+	
 	/*
 	 * This class handles the roles used by the module loader.
 	 * It represents a role given its name, base type, and the
@@ -41,19 +42,17 @@
 	public class ModuleRole {
 		private Type _baseType;
 		private string _roleName;
-		private ModuleRoleHandler _handler;
+		private RoleRegisterHandler _regHandler;
+		private RoleUnregisterHandle _unregHandler;
 		
 		// Lets get this baby setup :)
-		public ModuleRole (Type basetype, string name, ModuleRoleHandler handler) {
+		public ModuleRole (string name, Type basetype, RoleRegisterHandler regHandler, RoleUnregisterHandler unregHandler) {
 			_baseType = basetype;
 			_roleName = name;
-			_handler = handler;
+			_regHandler = regHandler;
+			_unregHandler = unregHandler;
 		}
 		
-		public InitiateRole (Assembly asm, Type type) {
-			handler (asm, type);
-		}
-		
 		// all properties are read-only for the moment except the handler (which could conceivably change as other modules are loaded which may take the load
 		// off the main engine)
 		public Type BaseType {
@@ -68,13 +67,16 @@
 			}
 		}
 		
-		public ModuleRoleHandler Handler {
+		public RoleRegisterHandler RegistrationHandler {
 			get {
-				return _handler;
+				return _regHandler;
 			}
-			set {
-				_handler = value;
+		}
+		
+		public RoleUnregisterHandler UnregistrationHandler {
+			get {
+				return _unregHandler;
 			}
-		}
+		} 
 	}
 }
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp
===================================================================
--- trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp	2005-06-23 01:49:01 UTC (rev 19)
@@ -13,9 +13,7 @@
       <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
     </Configuration>
   </Configurations>
-  <References>
-    <ProjectReference type="Gac" localcopy="True" refto="Mono.C5, Version=0.5.1.1, Culture=neutral, PublicKeyToken=ba07f434b1c35cbd" />
-  </References>
+  <References />
   <DeploymentInformation strategy="File">
     <excludeFiles />
   </DeploymentInformation>

Modified: trunk/src/NModule.Core.Loader/NModule.Core.Loader.pidb
===================================================================
(Binary files differ)

Modified: trunk/src/NModule.Core.Module/ModuleInfo.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -28,25 +28,4 @@
 using NModule.Dependency.Parser;
 
 namespace NModule.Core.Module {
-	public class Module {
-		protected struct ModuleInfo {
-			public string _name;
-			public DepVersion _version;
-			public Assembly _assembly;
-			public AppDomain _domain;
-			public DepNode _deptree;
-		}
-		
-		protected ModuleInfo _info;
-		
-		public Module (string name, Assembly asm, AppDomain domain, DepVersion version, DepNode deptree) {
-			_info = new ModuleInfo();
-			
-			_info._name = name;
-			_info._assembly = asm;
-			_info._domain = domain;
-			_info._version = version;
-			_info._deptree = deptree;
-		}
-		
-		
\ No newline at end of file
+}

Deleted: trunk/src/NModule.Core.Module/MyClass.cs
===================================================================
--- trunk/src/NModule.Core.Module/MyClass.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Core.Module/MyClass.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -1,7 +0,0 @@
-// project created on 6/13/2005 at 1:08 AM
-using System;
-
-public class MyClass
-{
-
-}
\ No newline at end of file

Modified: trunk/src/NModule.Core.Module/NModule.Core.Module.pidb
===================================================================
(Binary files differ)

Added: trunk/src/NModule.Dependency.Core/AssemblyInfo.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/AssemblyInfo.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Core/AssemblyInfo.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -0,0 +1,61 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+
+using System.Reflection;
+using System.Runtime.CompilerServices;
+
+// Information about this assembly is defined by the following
+// attributes.
+//
+// change them to the information which is associated with the assembly
+// you compile.
+
+[assembly: AssemblyTitle ("NModule.Dependency.Core")]
+[assembly: AssemblyDescription ("NModule Dependency Core")]
+[assembly: AssemblyConfiguration ("")]
+[assembly: AssemblyCompany ("")]
+[assembly: AssemblyProduct ("NModule")]
+[assembly: AssemblyCopyright ("Copyright (C) 2005 Michael Tindal and Contributors")]
+[assembly: AssemblyTrademark ("")]
+[assembly: AssemblyCulture ("")]
+
+// The assembly version has following format :
+//
+// Major.Minor.Build.Revision
+//
+// You can specify all values by your own or you can build default build and revision
+// numbers with the '*' character (the default):
+
+[assembly: AssemblyVersion ("0.1.*")]
+
+// The following attributes specify the key for the sign of your assembly. See the
+// .NET Framework documentation for more information about signing.
+// This is not required, if you don't want signing let these attributes like they're.
+[assembly: AssemblyDelaySign (false)]
+#if RELEASE
+[assembly: AssemblyKeyFile ("../../lib/keyfiles/nmodule.snk")]
+#else
+[assembly: AssemblyKeyFile ("")]
+#endif
+

Added: trunk/src/NModule.Dependency.Core/DepConstraint.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/DepConstraint.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Core/DepConstraint.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -0,0 +1,75 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+
+using System;
+using System.Collections;
+
+namespace NModule.Dependency.Core {
+	public class DepConstraint {
+		private DepVersion _version;
+		private string _name;
+
+		public DepConstraint () {
+			_name = "";
+			_version = null;
+		}
+
+		public DepVersion Version {
+			get {
+				return _version;
+			}
+			set {
+				_version = value;
+			}
+		}
+
+		public string Name {
+			get {
+				return _name;
+			}
+			set {
+				_name = value;
+			}
+		}
+
+		public string VersionTmp {
+			set {
+				_version = VersionParse(value);
+			}
+		}
+
+		protected DepVersion VersionParse (string v) {
+			// Here we go :)
+			DepVersion ver = new DepVersion ();
+			string[] vparts = v.Split ('.');
+			ver.Major = Int32.Parse (vparts[0]);
+			ver.Minor = Int32.Parse (vparts[1]);
+			if (vparts.Length > 2)
+				ver.Build = Int32.Parse(vparts[2]);
+			if (vparts.Length > 3)
+				ver.Revision = Int32.Parse(vparts[3]);
+			return ver;
+		}
+	}
+}

Added: trunk/src/NModule.Dependency.Core/DepNode.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/DepNode.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Core/DepNode.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -0,0 +1,81 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+
+using System;
+using System.Collections;
+
+namespace NModule.Dependency.Core {
+	public class DepNode {
+		private DepConstraint _constraint;
+		private DepOps _op;
+		private DepNode _parent;
+		private ArrayList _children;
+
+		public DepNode () {
+			_parent = null;
+			_children = new ArrayList ();
+		}
+
+		public DepNode (DepNode parent) {
+			_parent = parent;
+			_children = new ArrayList ();
+		}
+
+		public DepNode Parent {
+			get {
+				return _parent;
+			}
+		}
+
+		public ArrayList Children {
+			get {
+				return _children;
+			}
+		}
+
+		public DepNode CreateNewChild () {
+			DepNode child = new DepNode (this);
+			_children.Add (child);
+			return child;
+		}
+
+		public DepOps DepOp {
+			get {
+				return _op;
+			}
+			set {
+				_op = value;
+			}
+		}
+
+		public DepConstraint Constraint {
+			get {
+				return _constraint;
+			}
+			set {
+				_constraint = value;
+			}
+		}
+	}
+}

Added: trunk/src/NModule.Dependency.Core/DepOps.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/DepOps.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Core/DepOps.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -0,0 +1,27 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+
+namespace NModule.Dependency.Core {
+	public enum DepOps { Not, And, Or, Xor, Opt, Equal, NotEqual, LessThanEqual, LessThan, GreaterThanEqual, GreaterThan, Loaded };
+}

Added: trunk/src/NModule.Dependency.Core/DepVersion.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/DepVersion.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Core/DepVersion.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -0,0 +1,96 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+
+namespace NModule.Dependency.Core {
+	public class DepVersion {
+		private int _major;
+		private int _minor;
+		private int _build;
+		private int _revision;
+		
+		public DepVersion (int major, int minor, int build, int revision) {
+			_major = major;
+			_minor = minor;
+			_build = build;
+			_revision = revision;
+		}
+		
+		public DepVersion (int major, int minor, int build) {
+			_major = major;
+			_minor = minor;
+			_build = build;
+			_revision = -1;
+		}
+		
+		public DepVersion (int major, int minor) {
+			_major = major;
+			_minor = minor;
+			_build = -1;
+			_revision = -1;
+		}
+		 
+		public DepVersion () {
+			_major = -1;
+			_minor = -1;
+			_build = -1;
+			_revision = -1;
+		}
+	
+		public int Major {
+			get {
+				return _major;
+			}
+			set {
+				_major = value;
+			}
+		}
+		
+		public int Minor {
+			get {
+				return _minor;
+			}
+			set {
+				_minor = value;
+			}
+		}
+		
+		public int Build {
+			get {
+				return _build;
+			}
+			set {
+				_build = value;
+			}
+		}
+		
+		public int Revision {
+			get {
+				return _revision;
+			}
+			set {
+				_revision = value;
+			}
+		}
+	}
+}

Added: trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.mdp
===================================================================
--- trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.mdp	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.mdp	2005-06-23 01:49:01 UTC (rev 19)
@@ -0,0 +1,27 @@
+<Project name="NModule.Dependency.Core" fileversion="2.0" language="C#" ctype="DotNetProject">
+  <Configurations>
+    <Configuration name="Debug" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Debug" assembly="NModule.Dependency.Core" />
+      <Build debugmode="True" target="Library" />
+      <Execution runwithwarnings="True" consolepause="False" runtime="MsNet" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+    <Configuration name="Release" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Release" assembly="NModule.Dependency.Core" />
+      <Build debugmode="False" target="Library" />
+      <Execution runwithwarnings="True" consolepause="False" runtime="MsNet" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+  </Configurations>
+  <References />
+  <DeploymentInformation strategy="File">
+    <excludeFiles />
+  </DeploymentInformation>
+  <Contents>
+    <File name="./AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
+    <File name="./DepConstraint.cs" subtype="Code" buildaction="Compile" />
+    <File name="./DepNode.cs" subtype="Code" buildaction="Compile" />
+    <File name="./DepOps.cs" subtype="Code" buildaction="Compile" />
+    <File name="./DepVersion.cs" subtype="Code" buildaction="Compile" />
+  </Contents>
+</Project>
\ No newline at end of file

Added: trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.mds
===================================================================
--- trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.mds	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.mds	2005-06-23 01:49:01 UTC (rev 19)
@@ -0,0 +1,16 @@
+<Combine name="NModule.Dependency.Core" fileversion="2.0">
+  <Configurations>
+    <Configuration name="Debug" ctype="CombineConfiguration">
+      <Entry build="True" name="NModule.Dependency.Core" />
+    </Configuration>
+    <Configuration name="Release" ctype="CombineConfiguration">
+      <Entry build="True" name="NModule.Dependency.Core" />
+    </Configuration>
+  </Configurations>
+  <StartMode startupentry="NModule.Dependency.Core" single="True">
+    <Execute type="None" entry="NModule.Dependency.Core" />
+  </StartMode>
+  <Entries>
+    <Entry filename="./NModule.Dependency.Core.mdp" />
+  </Entries>
+</Combine>
\ No newline at end of file

Added: trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.pidb
===================================================================
(Binary files differ)


Property changes on: trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.pidb
___________________________________________________________________
Name: svn:mime-type
   + font/ttf

Deleted: trunk/src/NModule.Dependency.Parser/DepConstraint.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepConstraint.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Parser/DepConstraint.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -1,75 +0,0 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
-
-using System;
-using System.Collections;
-
-namespace NModule.Dependency.Parser {
-	public class DepConstraint {
-		private DepVersion _version;
-		private string _name;
-
-		public DepConstraint () {
-			_name = "";
-			_version = null;
-		}
-
-		public DepVersion Version {
-			get {
-				return _version;
-			}
-			set {
-				_version = value;
-			}
-		}
-
-		public string Name {
-			get {
-				return _name;
-			}
-			set {
-				_name = value;
-			}
-		}
-
-		public string VersionTmp {
-			set {
-				_version = VersionParse(value);
-			}
-		}
-
-		protected DepVersion VersionParse (string v) {
-			// Here we go :)
-			DepVersion ver = new DepVersion ();
-			string[] vparts = v.Split ('.');
-			ver.Major = Int32.Parse (vparts[0]);
-			ver.Minor = Int32.Parse (vparts[1]);
-			if (vparts.Length > 2)
-				ver.Build = Int32.Parse(vparts[2]);
-			if (vparts.Length > 3)
-				ver.Revision = Int32.Parse(vparts[3]);
-			return ver;
-		}
-	}
-}

Modified: trunk/src/NModule.Dependency.Parser/DepLexer.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepLexer.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Parser/DepLexer.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -23,6 +23,8 @@
  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
  **************************************************************************/
+ 
+using NModule.Dependency.Core;
 
 namespace NModule.Dependency.Parser
 {

Deleted: trunk/src/NModule.Dependency.Parser/DepNode.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepNode.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Parser/DepNode.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -1,81 +0,0 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
-
-using System;
-using System.Collections;
-
-namespace NModule.Dependency.Parser {
-	public class DepNode {
-		private DepConstraint _constraint;
-		private DepOps _op;
-		private DepNode _parent;
-		private ArrayList _children;
-
-		public DepNode () {
-			_parent = null;
-			_children = new ArrayList ();
-		}
-
-		public DepNode (DepNode parent) {
-			_parent = parent;
-			_children = new ArrayList ();
-		}
-
-		public DepNode Parent {
-			get {
-				return _parent;
-			}
-		}
-
-		public ArrayList Children {
-			get {
-				return _children;
-			}
-		}
-
-		public DepNode CreateNewChild () {
-			DepNode child = new DepNode (this);
-			_children.Add (child);
-			return child;
-		}
-
-		public DepOps DepOp {
-			get {
-				return _op;
-			}
-			set {
-				_op = value;
-			}
-		}
-
-		public DepConstraint Constraint {
-			get {
-				return _constraint;
-			}
-			set {
-				_constraint = value;
-			}
-		}
-	}
-}

Deleted: trunk/src/NModule.Dependency.Parser/DepOps.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepOps.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Parser/DepOps.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -1,27 +0,0 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
-
-namespace NModule.Dependency.Parser {
-	public enum DepOps { Not, And, Or, Xor, Opt, Equal, NotEqual, LessThanEqual, LessThan, GreaterThanEqual, GreaterThan, Loaded };
-}

Modified: trunk/src/NModule.Dependency.Parser/DepParser.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepParser.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Parser/DepParser.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -23,6 +23,8 @@
  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
  **************************************************************************/
+ 
+using NModule.Dependency.Core;
 
 namespace NModule.Dependency.Parser
 {

Modified: trunk/src/NModule.Dependency.Parser/DepParserTokenTypes.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepParserTokenTypes.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Parser/DepParserTokenTypes.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -23,6 +23,8 @@
  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
  **************************************************************************/
+ 
+using NModule.Dependency.Core;
 
 namespace NModule.Dependency.Parser
 {

Deleted: trunk/src/NModule.Dependency.Parser/DepVersion.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepVersion.cs	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Parser/DepVersion.cs	2005-06-23 01:49:01 UTC (rev 19)
@@ -1,96 +0,0 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
-
-namespace NModule.Dependency.Parser {
-	public class DepVersion {
-		private int _major;
-		private int _minor;
-		private int _build;
-		private int _revision;
-		
-		public DepVersion (int major, int minor, int build, int revision) {
-			_major = major;
-			_minor = minor;
-			_build = build;
-			_revision = revision;
-		}
-		
-		public DepVersion (int major, int minor, int build) {
-			_major = major;
-			_minor = minor;
-			_build = build;
-			_revision = -1;
-		}
-		
-		public DepVersion (int major, int minor) {
-			_major = major;
-			_minor = minor;
-			_build = -1;
-			_revision = -1;
-		}
-		 
-		public DepVersion () {
-			_major = -1;
-			_minor = -1;
-			_build = -1;
-			_revision = -1;
-		}
-	
-		public int Major {
-			get {
-				return _major;
-			}
-			set {
-				_major = value;
-			}
-		}
-		
-		public int Minor {
-			get {
-				return _minor;
-			}
-			set {
-				_minor = value;
-			}
-		}
-		
-		public int Build {
-			get {
-				return _build;
-			}
-			set {
-				_build = value;
-			}
-		}
-		
-		public int Revision {
-			get {
-				return _revision;
-			}
-			set {
-				_revision = value;
-			}
-		}
-	}
-}

Modified: trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp
===================================================================
--- trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp	2005-06-23 01:49:01 UTC (rev 19)
@@ -15,6 +15,7 @@
   </Configurations>
   <References>
     <ProjectReference type="Assembly" localcopy="True" refto="../../../../usr/lib/antlr.runtime.dll" />
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Core" />
   </References>
   <DeploymentInformation strategy="File">
     <excludeFiles />
@@ -23,12 +24,8 @@
     <File name="./" subtype="Directory" buildaction="Compile" />
     <File name="./AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
     <File name="./nmodule-dep.g" subtype="Code" buildaction="Nothing" />
-    <File name="./DepConstraint.cs" subtype="Code" buildaction="Compile" />
     <File name="./DepLexer.cs" subtype="Code" buildaction="Compile" />
-    <File name="./DepNode.cs" subtype="Code" buildaction="Compile" />
-    <File name="./DepOps.cs" subtype="Code" buildaction="Compile" />
     <File name="./DepParser.cs" subtype="Code" buildaction="Compile" />
     <File name="./DepParserTokenTypes.cs" subtype="Code" buildaction="Compile" />
-    <File name="./DepVersion.cs" subtype="Code" buildaction="Compile" />
   </Contents>
 </Project>
\ No newline at end of file

Modified: trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb
===================================================================
(Binary files differ)

Modified: trunk/src/NModule.Dependency.Parser/nmodule-dep.g
===================================================================
--- trunk/src/NModule.Dependency.Parser/nmodule-dep.g	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Parser/nmodule-dep.g	2005-06-23 01:49:01 UTC (rev 19)
@@ -23,6 +23,8 @@
  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
  **************************************************************************/
+ 
+using NModule.Dependency.Core;
 }
 
 options

Deleted: trunk/src/NModule.Dependency.Parser/nmodule-dep.g.old
===================================================================
--- trunk/src/NModule.Dependency.Parser/nmodule-dep.g.old	2005-06-23 01:48:44 UTC (rev 18)
+++ trunk/src/NModule.Dependency.Parser/nmodule-dep.g.old	2005-06-23 01:49:01 UTC (rev 19)
@@ -1,98 +0,0 @@
-options
-{
-	language="CSharp"; 
-	namespace="NModule.Dependency.Parser";
-}
-  
-class DepParser extends Parser;
-
-options {
-	buildAST=true;
-	k=3;
-}
-
-expr: 
-	cexpr
-	;
-	
-cexpr:
-    LPAREN! ((NOTO^|AND^|OR^|XOR^|OPT^) (oexpr|cexpr)+) RPAREN!
-    | oexpr
-    ;
-
-oexpr:
-	LPAREN! ((EQ^|NEQ^|LTE^|LS^|GTE^|GT^|LD^) iexpr) RPAREN!
-	;
-	
-iexpr: CLASS ( VER )?;
-
-{	
-	public class DepNode
-	{
-		public enum DepOp { NOT, AND, OR, XOR, OPT, EQ, NEQ, LTE, LT, GTE, GT, LD };
-		
-class DepLexer extends Lexer;
-
-options
-{
-	k=2;
-	charVocabulary='\u0000' .. '\u007F';
-}
-
-// Parentheses
-LPAREN: '(' ;
-RPAREN: ')' ;
-
-// Combination Operators
-NOTO: "!!" ;
-AND: "&&" ;
-OR: "||" ;
-XOR: "^^" ;
-
-// Dependency Operators
-EQ: "==" ;
-NEQ: "!=" ;
-LTE: "<=" ;
-LS: "<<" ;
-GTE: ">=" ;
-GT: ">>" ;
-OPT: "??" ;
-LD: "##" ;
-
-// Version
-protected
-INT: ('0' .. '9')+;
-
-VER: INT (DOT INT)*;
-
-// Dot operator
-protected
-DOT: '.' ;
-
-// Basic Identifier
-protected
-ID_START_LETTER: 
-    ('a' .. 'z')
-	| ('A' .. 'Z')
-	;
-
-protected
-ID_LETTER: 
-  ID_START_LETTER
-	| ('0' .. '9')
-	;
-	
-protected
-ID: ID_START_LETTER ( ID_LETTER )* ;
-
-// Class
-CLASS: ID ( DOT ID )* ;
-
-// Whitespace
-WS: ( ' '
-    | '\r' '\n'
-    | '\n'
-    | '\t'
-    )
-    {$setType(Token.SKIP);}
-    ;



From urilith at sheep.berlios.de  Thu Jun 23 10:40:32 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Thu, 23 Jun 2005 10:40:32 +0200
Subject: [nmodule-commits] r20 - in trunk: . doc misc src src/NModule.Core src/NModule.Core.Loader src/NModule.Core.Module src/NModule.Dependency.Core src/NModule.Dependency.Parser src/NModule.Dependency.Resolver test test/Data
Message-ID: <200506230840.j5N8eWPe022768@sheep.berlios.de>

Author: urilith
Date: 2005-06-23 10:40:23 +0200 (Thu, 23 Jun 2005)
New Revision: 20

Added:
   trunk/doc/
   trunk/doc/DESIGN
   trunk/doc/Documentation.mdp
   trunk/doc/Documentation.mds
   trunk/misc/
   trunk/misc/bash-copy.hdr
   trunk/misc/cs-copy.hdr
   trunk/misc/svkchangelog
   trunk/misc/svkcommit
   trunk/misc/xml-copy.hdr
   trunk/src/NModule.Core.Loader/InvalidModuleException.cs
   trunk/src/NModule.Core.Loader/ModuleImageException.cs
   trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs
   trunk/src/NModule.Core.Module/ModuleRole.cs
   trunk/src/NModule.Core/
   trunk/src/NModule.Core/AssemblyInfo.cs
   trunk/src/NModule.Core/IModule.cs
   trunk/src/NModule.Core/ModuleDependencyAttribute.cs
   trunk/src/NModule.Core/ModuleRoleAttribute.cs
   trunk/src/NModule.Core/NModule.Core.mdp
   trunk/src/NModule.Core/NModule.Core.mds
   trunk/src/NModule.Dependency.Resolver/
   trunk/src/NModule.Dependency.Resolver/AssemblyInfo.cs
   trunk/src/NModule.Dependency.Resolver/CircularDependencyException.cs
   trunk/src/NModule.Dependency.Resolver/DepResolver.cs
   trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp
   trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mds
   trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.pidb
   trunk/src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs
   trunk/test/
   trunk/test/Data/
   trunk/test/Data/test-1.txt
   trunk/test/Data/test-2.txt
   trunk/test/NModuleTest.cs
Removed:
   trunk/Documentation/
   trunk/Misc/
   trunk/Test/
   trunk/src/NModule.Core.Loader/ModuleRole.cs
Modified:
   trunk/
   trunk/ChangeLog
   trunk/nmodule.mds
   trunk/src/NModule.Core.Loader/ModuleController.cs
   trunk/src/NModule.Core.Loader/ModuleLoader.cs
   trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp
   trunk/src/NModule.Core.Loader/NModule.Core.Loader.pidb
   trunk/src/NModule.Core.Module/ModuleInfo.cs
   trunk/src/NModule.Core.Module/NModule.Core.Module.mdp
   trunk/src/NModule.Core.Module/NModule.Core.Module.pidb
   trunk/src/NModule.Dependency.Core/DepConstraint.cs
   trunk/src/NModule.Dependency.Core/DepVersion.cs
   trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.pidb
   trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb
Log:
 r112 at dreamshadow:  urilith | 2005-06-23 03:39:12 -0500
 2005-06-23 Michael Tindal <urilith at gentoo.org>
 
   * nmodule.mds: New projects.
   * src/NModule.Core.Loader/ModuleController.cs: Finished implementing everything. Woot.
   * src/NModule.Core.Loader/ModuleLoader.cs: Dont remember.
   * src/NModule.Core.Loader/NModule.Core.Loader.mdp: Moved ModuleRole.cs to NModule.Core.Module.
   * src/NModule.Core.Loader/NModule.Core.Loader.pidb: This is getting deleted.
   * src/NModule.Core.Loader/InvalidModuleException.cs: New empty placeholder file.
   * src/NModule.Core.Loader/ModuleImageException.cs: New empty placeholder file.
   * src/NModule.Core.Loader/ModuleNotFoundException.cs: New empty placeholder file.
   * src/NModule.Core.Loader/ModuleRole.cs: Moved to NModule.Core.Module.
   * src/NModule.Core.Module/ModuleInfo.cs: Implemented.
   * src/NModule.Core.Module/NModule.Core.Module.mdp: Added ModuleRole.cs from NModule.Core.Loader.
   * src/NModule.Core.Module/NModule.Core.Module.pidb: This is getting deleted.
   * src/NModule.Core.Module/ModuleRole.cs: Moved from NModule.Core.Module.
   * src/NModule.Dependency.Core/DepConstraint.cs: Moved the version parsing code to DepVersion.
   * src/NModule.Dependency.Core/DepVersion.cs: Moved the version parsing code from DepConstraint.
   * src/NModule.Dependency.Core/NModule.Dependency.Core.pidb: This is getting deleted.
   * src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb: This is getting deleted.
   * src/NModule.Core: New assembly.
   * src/NModule.Core/AssemblyInfo.cs: New file.
   * src/NModule.Core/IModule.cs: Empty placeholder file.
   * src/NModule.Core/ModuleDependencyAttribute.cs: Empty placeholder file.
   * src/NModule.Core/ModuleRoleAttribute.cs: Empty placeholder file.
   * src/NModule.Core/NModule.Core.mdp: New project.
   * src/NModule.Core/NModule.Core.mds: New solution.
   * src/NModule.Dependency.Resolver: The resolver. :)
   * src/NModule.Dependency.Resolver/AssemblyInfo.cs: New assembly info.
   * src/NModule.Dependency.Resolver/CircularDependencyException.cs: Empty placeholder file.
   * src/NModule.Dependency.Resolver/DepResolver.cs: The resolver code.
   * src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp: New project.
   * src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mds: New solution.
   * src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.pidb: This is getting deleted.
   * src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs: Empty placeholder file.
   * doc: Renamed Documentation to doc.
   * misc: Renamed Misc to misc.
   * test: Renamed Test to test.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:109
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:112

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/ChangeLog	2005-06-23 08:40:23 UTC (rev 20)
@@ -1,3 +1,41 @@
+2005-06-23 Michael Tindal <urilith at gentoo.org>
+
+	* nmodule.mds: New projects.
+	* src/NModule.Core.Loader/ModuleController.cs: Finished implementing everything.  Woot.
+	* src/NModule.Core.Loader/ModuleLoader.cs: Dont remember.
+	* src/NModule.Core.Loader/NModule.Core.Loader.mdp: Moved ModuleRole.cs to NModule.Core.Module.
+	* src/NModule.Core.Loader/NModule.Core.Loader.pidb: This is getting deleted.
+	* src/NModule.Core.Loader/InvalidModuleException.cs: New empty placeholder file.
+	* src/NModule.Core.Loader/ModuleImageException.cs: New empty placeholder file.
+	* src/NModule.Core.Loader/ModuleNotFoundException.cs: New empty placeholder file.
+	* src/NModule.Core.Loader/ModuleRole.cs: Moved to NModule.Core.Module.
+	* src/NModule.Core.Module/ModuleInfo.cs: Implemented.
+	* src/NModule.Core.Module/NModule.Core.Module.mdp: Added ModuleRole.cs from NModule.Core.Loader.
+	* src/NModule.Core.Module/NModule.Core.Module.pidb: This is getting deleted.
+	* src/NModule.Core.Module/ModuleRole.cs: Moved from NModule.Core.Module.
+	* src/NModule.Dependency.Core/DepConstraint.cs: Moved the version parsing code to DepVersion.
+	* src/NModule.Dependency.Core/DepVersion.cs: Moved the version parsing code from DepConstraint.
+	* src/NModule.Dependency.Core/NModule.Dependency.Core.pidb: This is getting deleted.
+	* src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb: This is getting deleted.
+	* src/NModule.Core: New assembly.
+	* src/NModule.Core/AssemblyInfo.cs: New file.
+	* src/NModule.Core/IModule.cs: Empty placeholder file.
+	* src/NModule.Core/ModuleDependencyAttribute.cs: Empty placeholder file.
+	* src/NModule.Core/ModuleRoleAttribute.cs: Empty placeholder file.
+	* src/NModule.Core/NModule.Core.mdp: New project.
+	* src/NModule.Core/NModule.Core.mds: New solution.
+	* src/NModule.Dependency.Resolver: The resolver.  :)
+	* src/NModule.Dependency.Resolver/AssemblyInfo.cs: New assembly info.
+	* src/NModule.Dependency.Resolver/CircularDependencyException.cs: Empty placeholder file.
+	* src/NModule.Dependency.Resolver/DepResolver.cs: The resolver code.
+	* src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp: New project.
+	* src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mds: New solution.
+	* src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.pidb: This is getting deleted.
+	* src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs: Empty placeholder file.
+	* doc: Renamed Documentation to doc.
+	* misc: Renamed Misc to misc.
+	* test: Renamed Test to test.
+
 2005-06-22 Michael Tindal <urilith at gentoo.org>
 
 	* nmodule.mds: Updated.

Added: trunk/doc/DESIGN
===================================================================
--- trunk/doc/DESIGN	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/doc/DESIGN	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,30 @@
+NModule is a high level plugin framework for the .NET framework.
+
+The author (Michael Tindal) actively targets the mono framework, but it should
+run unmodified on the .NET framework as well.
+
+NModule takes plugin frameworks to a whole new level by providing interfaces and abstractions
+that make it suitable for any task.  NModule maintains several pieces of information about a "module":
+
+  -> The module info, including name, and version, plus dependency information.
+  -> A set of "roles" the module provides (see below).
+  
+NModule abstracts a lot of the plug-in API away from itself, instead, it defines a set of low-level interfaces
+for loading and managing plug-ins while allowing application writers the freedom to define their own set of APIs.
+What is unique about NModules approach to this is that even though NModule does not define the plug-in APIs, it
+can still interact with them!  This is done using NModule's role system.
+
+When an application defines an interface to be used by plug-ins, that interface has a purpose.  For example, I might
+define an interface called IAction that represented an action, and IController that represented a controller.  Different
+modules could fulfill different roles, this is where the role facility comes into play.  The application registers
+a "role" with the NModule master controller, using the RegisterRole() method.  When a module is loaded, its typed are
+searched for the [ModuleRole()] attribute.  If this is found, it checks the role to see if it is registered, and if it is,
+calls the appropriate handler with the assembly and type information.
+
+-->> Loading/Unloading Modules <<--
+
+Basic reflection in .NET uses the Assembly.Load and Assembly.LoadFrom methods.  However, this has the drawback that
+the loaded assemblies cannot be unloaded.  NModule gets around this by wrapping each load into an AppDomain.  (It is
+possible to reuse appdomains, or to disable them completely if necessary).  When NModule loads a module, it checks
+its dependencies, and attempts to load the dependencies.  NModule supports the detection of circular and unresolved
+dependencies, and supports several operators.  (See:  Dependencies for more information).
\ No newline at end of file

Added: trunk/doc/Documentation.mdp
===================================================================
--- trunk/doc/Documentation.mdp	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/doc/Documentation.mdp	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,23 @@
+<Project name="Documentation" fileversion="2.0" language="C#" ctype="DotNetProject">
+  <Configurations>
+    <Configuration name="Debug" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Debug" assembly="Documentation" />
+      <Build debugmode="True" target="Exe" />
+      <Execution runwithwarnings="True" consolepause="True" runtime="MsNet" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+    <Configuration name="Release" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Release" assembly="Documentation" />
+      <Build debugmode="False" target="Exe" />
+      <Execution runwithwarnings="True" consolepause="True" runtime="MsNet" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+  </Configurations>
+  <References />
+  <DeploymentInformation strategy="File">
+    <excludeFiles />
+  </DeploymentInformation>
+  <Contents>
+    <File name="./DESIGN" subtype="Code" buildaction="Nothing" />
+  </Contents>
+</Project>
\ No newline at end of file

Added: trunk/doc/Documentation.mds
===================================================================
--- trunk/doc/Documentation.mds	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/doc/Documentation.mds	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,16 @@
+<Combine name="Documentation" fileversion="2.0">
+  <Configurations>
+    <Configuration name="Debug" ctype="CombineConfiguration">
+      <Entry build="True" name="Documentation" />
+    </Configuration>
+    <Configuration name="Release" ctype="CombineConfiguration">
+      <Entry build="True" name="Documentation" />
+    </Configuration>
+  </Configurations>
+  <StartMode startupentry="Documentation" single="True">
+    <Execute type="None" entry="Documentation" />
+  </StartMode>
+  <Entries>
+    <Entry filename="./Documentation.mdp" />
+  </Entries>
+</Combine>
\ No newline at end of file

Added: trunk/misc/bash-copy.hdr
===================================================================
--- trunk/misc/bash-copy.hdr	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/misc/bash-copy.hdr	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,24 @@
+##########################################################################
+# Copyright (c) 2005 Michael Tindal and the individuals listed           #
+# on the ChangeLog entries.                                              #
+#                                                                        #
+# Permission is hereby granted, free of charge, to any person obtaining  #
+# a copy of this software and associated documentation files (the        #
+# "Software"), to deal in the Software without restriction, including    #
+# without limitation the rights to use, copy, modify, merge, publish,    #
+# distribute, sublicense, and/or sell copies of the Software, and to     #
+# permit persons to whom the Software is furnished to do so, subject to  #
+# the following conditions:                                              #
+#                                                                        #
+# The above copyright notice and this permission notice shall be         #
+# included in all copies or substantial portions of the Software.        #
+#                                                                        #
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        #
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     #
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  #
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE #
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION #
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  #
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        #
+##########################################################################
+

Added: trunk/misc/cs-copy.hdr
===================================================================
--- trunk/misc/cs-copy.hdr	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/misc/cs-copy.hdr	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,24 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions:                                              *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+

Added: trunk/misc/svkchangelog
===================================================================
--- trunk/misc/svkchangelog	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/misc/svkchangelog	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,20 @@
+#!/bin/bash
+
+mv ChangeLog .ChangeLog.sch
+
+echo "$(date "+%Y-%m-%d") $SVKCNAME <$SVKEMAIL>" > ChangeLog
+echo >> ChangeLog
+
+svk status | sed -e 's@^\?.*@@g' -e '/^$/d' | egrep -o '[^ ]*(/.*)?$' | sed -e 's@^\..*@@'  -e 's at .*ChangeLog@@g' -e '/^$/d' -e 's@^\./@@g' > .tmp-list
+
+for i in $(cat .tmp-list); do
+	echo -e "\t* ${i}: " >> ChangeLog
+done
+
+echo "" >> ChangeLog
+
+cat .ChangeLog.sch >> ChangeLog
+
+rm -f .ChangeLog.sch .tmp-list
+
+


Property changes on: trunk/misc/svkchangelog
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/misc/svkcommit
===================================================================
--- trunk/misc/svkcommit	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/misc/svkcommit	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,25 @@
+#!/bin/bash
+
+n=0
+instar=0
+
+while read -a target; do
+        if [ -z "${target}" -a $n -gt 1 ]; then
+                break;
+        fi
+        if [[ $n -gt 1 ]]; then
+                echo -n "  " >> .svk-commit.tmp
+        fi
+
+        echo "${target[@]}" >> .svk-commit.tmp
+        n="$(expr ${n} + 1)"
+done < ./ChangeLog
+
+echo "Committing with message: "
+cat  .svk-commit.tmp
+
+svk ci -F .svk-commit.tmp
+
+rm -f .svk-commit.tmp
+
+


Property changes on: trunk/misc/svkcommit
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/misc/xml-copy.hdr
===================================================================
--- trunk/misc/xml-copy.hdr	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/misc/xml-copy.hdr	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,24 @@
+<!--
+ Copyright (c) 2005 Michael Tindal and the individuals listed
+ on the ChangeLog entries.
+
+ Permission is hereby granted, free of charge, to any person obtaining
+ a copy of this software and associated documentation files (the
+ "Software"), to deal in the Software without restriction, including
+ without limitation the rights to use, copy, modify, merge, publish,
+ distribute, sublicense, and/or sell copies of the Software, and to
+ permit persons to whom the Software is furnished to do so, subject to
+ the following conditions:
+ 
+ The above copyright notice and this permission notice shall be
+ included in all copies or substantial portions of the Software.
+ 
+ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
+ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+

Modified: trunk/nmodule.mds
===================================================================
--- trunk/nmodule.mds	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/nmodule.mds	2005-06-23 08:40:23 UTC (rev 20)
@@ -7,6 +7,8 @@
       <Entry build="True" name="NModule.Core.Loader" />
       <Entry build="True" name="NModule.Core.Module" />
       <Entry build="True" name="NModule.Dependency.Core" />
+      <Entry build="True" name="NModule.Dependency.Resolver" />
+      <Entry build="True" name="NModule.Core" />
     </Configuration>
     <Configuration name="Release" ctype="CombineConfiguration">
       <Entry build="True" name="Documentation" />
@@ -15,6 +17,8 @@
       <Entry build="True" name="NModule.Core.Loader" />
       <Entry build="True" name="NModule.Core.Module" />
       <Entry build="True" name="NModule.Dependency.Core" />
+      <Entry build="True" name="NModule.Dependency.Resolver" />
+      <Entry build="True" name="NModule.Core" />
     </Configuration>
   </Configurations>
   <StartMode startupentry="Documentation" single="True">
@@ -24,6 +28,8 @@
     <Execute type="None" entry="NModule.Core.Loader" />
     <Execute type="None" entry="NModule.Core.Module" />
     <Execute type="None" entry="NModule.Dependency.Core" />
+    <Execute type="None" entry="NModule.Dependency.Resolver" />
+    <Execute type="None" entry="NModule.Core" />
   </StartMode>
   <Entries>
     <Entry filename="./Documentation/Documentation.mdp" />
@@ -31,5 +37,7 @@
     <Entry filename="./src/NModule.Core.Loader/NModule.Core.Loader.mdp" />
     <Entry filename="./src/NModule.Core.Module/NModule.Core.Module.mdp" />
     <Entry filename="./src/NModule.Dependency.Core/NModule.Dependency.Core.mdp" />
+    <Entry filename="./src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp" />
+    <Entry filename="./src/NModule.Core/NModule.Core.mdp" />
   </Entries>
 </Combine>
\ No newline at end of file

Added: trunk/src/NModule.Core/AssemblyInfo.cs
===================================================================
--- trunk/src/NModule.Core/AssemblyInfo.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core/AssemblyInfo.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,32 @@
+using System.Reflection;
+using System.Runtime.CompilerServices;
+
+// Information about this assembly is defined by the following
+// attributes.
+//
+// change them to the information which is associated with the assembly
+// you compile.
+
+[assembly: AssemblyTitle("")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("")]
+[assembly: AssemblyCopyright("")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// The assembly version has following format :
+//
+// Major.Minor.Build.Revision
+//
+// You can specify all values by your own or you can build default build and revision
+// numbers with the '*' character (the default):
+
+[assembly: AssemblyVersion("1.0.*")]
+
+// The following attributes specify the key for the sign of your assembly. See the
+// .NET Framework documentation for more information about signing.
+// This is not required, if you don't want signing let these attributes like they're.
+[assembly: AssemblyDelaySign(false)]
+[assembly: AssemblyKeyFile("")]

Added: trunk/src/NModule.Core/IModule.cs
===================================================================
--- trunk/src/NModule.Core/IModule.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core/IModule.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,7 @@
+// project created on 6/23/2005 at 3:28 AM
+using System;
+
+public class MyClass
+{
+
+}
\ No newline at end of file


Property changes on: trunk/src/NModule.Core/IModule.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/src/NModule.Core/ModuleDependencyAttribute.cs
===================================================================
--- trunk/src/NModule.Core/ModuleDependencyAttribute.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core/ModuleDependencyAttribute.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1 @@
+// created on 6/23/2005 at 3:29 AM
\ No newline at end of file


Property changes on: trunk/src/NModule.Core/ModuleDependencyAttribute.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/src/NModule.Core/ModuleRoleAttribute.cs
===================================================================
--- trunk/src/NModule.Core/ModuleRoleAttribute.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core/ModuleRoleAttribute.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1 @@
+// created on 6/23/2005 at 3:29 AM
\ No newline at end of file


Property changes on: trunk/src/NModule.Core/ModuleRoleAttribute.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/src/NModule.Core/NModule.Core.mdp
===================================================================
--- trunk/src/NModule.Core/NModule.Core.mdp	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core/NModule.Core.mdp	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,26 @@
+<Project name="NModule.Core" fileversion="2.0" language="C#" ctype="DotNetProject">
+  <Configurations>
+    <Configuration name="Debug" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Debug" assembly="NModule.Core" />
+      <Build debugmode="True" target="Library" />
+      <Execution runwithwarnings="True" consolepause="False" runtime="MsNet" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+    <Configuration name="Release" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Release" assembly="NModule.Core" />
+      <Build debugmode="False" target="Library" />
+      <Execution runwithwarnings="True" consolepause="False" runtime="MsNet" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+  </Configurations>
+  <References />
+  <DeploymentInformation strategy="File">
+    <excludeFiles />
+  </DeploymentInformation>
+  <Contents>
+    <File name="./IModule.cs" subtype="Code" buildaction="Compile" />
+    <File name="./AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
+    <File name="./ModuleDependencyAttribute.cs" subtype="Code" buildaction="Compile" />
+    <File name="./ModuleRoleAttribute.cs" subtype="Code" buildaction="Compile" />
+  </Contents>
+</Project>
\ No newline at end of file

Added: trunk/src/NModule.Core/NModule.Core.mds
===================================================================
--- trunk/src/NModule.Core/NModule.Core.mds	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core/NModule.Core.mds	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,16 @@
+<Combine name="NModule.Core" fileversion="2.0">
+  <Configurations>
+    <Configuration name="Debug" ctype="CombineConfiguration">
+      <Entry build="True" name="NModule.Core" />
+    </Configuration>
+    <Configuration name="Release" ctype="CombineConfiguration">
+      <Entry build="True" name="NModule.Core" />
+    </Configuration>
+  </Configurations>
+  <StartMode startupentry="NModule.Core" single="True">
+    <Execute type="None" entry="NModule.Core" />
+  </StartMode>
+  <Entries>
+    <Entry filename="./NModule.Core.mdp" />
+  </Entries>
+</Combine>
\ No newline at end of file

Added: trunk/src/NModule.Core.Loader/InvalidModuleException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/InvalidModuleException.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core.Loader/InvalidModuleException.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1 @@
+// created on 6/23/2005 at 2:31 AM
\ No newline at end of file


Property changes on: trunk/src/NModule.Core.Loader/InvalidModuleException.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Modified: trunk/src/NModule.Core.Loader/ModuleController.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -27,6 +27,7 @@
 using System.IO;
 using System.Reflection;
 using NModule.Dependency.Resolver;
+using NModule.Core.Module;
 
 namespace NModule.Core.Loader {
 	// This class is the heart and sole of the NModule architecture.
@@ -164,7 +165,7 @@
 #endregion
 
 #region Role Handlers
-		public void CallRoleHandlers (ModuleInfo _info) {
+		protected void CallRoleHandlers (ModuleInfo _info) {
 			foreach (ModuleRoleAttribute _attr in _info.ModuleRoleAttributes) {
 				string _myRole = _attr.Role;
 				
@@ -175,9 +176,17 @@
 						Type _type = null;
 						
 						foreach (Type __type in _asm.GetTypes ()) {
-							if (__type.IsSubclassOf (_role.BaseType)) {
-								_type = __type;
-								break;
+							
+							if (_role.BaseType.IsClass) {
+								if (__type.IsSubclassOf (_role.BaseType)) {
+									_type = __type;
+									break;
+								}
+							} else if (_role.BaseType.IsInterface) {
+								if (__type.GetInterface (_role.BaseType.ToString ()) != null) {
+									_type = __type;
+									break;
+								}
 							}
 						}
 						
@@ -191,7 +200,7 @@
 			}
 		}
 		
-		public void CallRoleUnregisterHandlers (ModuleInfo _info) {
+		protected void CallRoleUnregisterHandlers (ModuleInfo _info) {
 			foreach (ModuleRoleAttribute _attr in _info.ModuleRoleAttributes) {
 				string _myRole = _attr.Role;
 				
@@ -202,9 +211,16 @@
 						Type _type = null;
 						
 						foreach (Type __type in _asm.GetTypes ()) {
-							if (__type.IsSubclassOf (_role.BaseType)) {
-								_type = __type;
-								break;
+							if (_role.BaseType.IsClass) {
+								if (__type.IsSubclassOf (_role.BaseType)) {
+									_type = __type;
+									break;
+								}
+							} else if (_role.BaseType.IsInterface) {
+								if (__type.GetInterface (_role.BaseType.ToString ()) != null) {
+									_type = __type;
+									break;
+								}
 							}
 						}
 						
@@ -217,6 +233,30 @@
 				}
 			}
 		}
-#endregion 
+#endregion
+
+#region Entry/Exit Handlers
+		protected void CallEntryHandler (Assembly _asm) {
+			foreach (Type _type in _asm.GetTypes ()) {
+				if (_type.GetInterface (typeof (NModule.Core.Module.IModule)) != null) {
+					MethodInfo _method = _type.GetMethod ("ModuleEntry");
+		
+					if (_method != null)			
+						_method.Invoke (null, BindingFlags.Static | BindingFlags.Public, (new object[] { this }), null);
+				}
+			}
+		}
+		
+		protected void CallEntryHandler (Assembly _asm) {
+			foreach (Type _type in _asm.GetTypes ()) {
+				if (_type.GetInterface (typeof (NModule.Core.Module.IModule)) != null) {
+					MethodInfo _method = _type.GetMethod ("ModuleExit");
+					
+					if (_method != null)
+						_method.Invoke (null, BindingFlags.Static | BindingFlags.Public, (new object[] { this }), null);
+				}
+			}
+		}
+#endregion
 	}
 }		

Added: trunk/src/NModule.Core.Loader/ModuleImageException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleImageException.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core.Loader/ModuleImageException.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1 @@
+// created on 6/23/2005 at 2:31 AM
\ No newline at end of file


Property changes on: trunk/src/NModule.Core.Loader/ModuleImageException.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Modified: trunk/src/NModule.Core.Loader/ModuleLoader.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -26,6 +26,7 @@
 using System.Collections;
 using System.Reflection;
 using NModule.Dependency.Resolver;
+using NModule.Core.Module;
 
 namespace NModule.Core.Loader {
 	// This class is simply the loader class, it just creates a new AppDomain,
@@ -76,7 +77,7 @@
 			return LoadModule (null, _name, out _info);
 		}
 		
-		public AppDomain LoadModule (ArrayList<string> _parents, string _name, bool checking=false, out ModuleInfo _info) {
+		public AppDomain LoadModule (ArrayList _parents, string _name, out ModuleInfo _info, bool checking=false) {
 			// Okay, this is tricky.  First, we have to load the module into a temp domain
 			// to retrieve its module info.  Then, we have to attempt to resolve the dependencies.
 			// This is going to be fun.  Heh.
@@ -138,7 +139,7 @@
 			_resolver.ResolveCheck (_parents, _info);
 		
 			if (checking)
-				return;
+				return null;
 							
 			// okay, they're good, lets load the suckers.
 			_resolver.Resolve (_parents, _info);

Added: trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1 @@
+// created on 6/23/2005 at 2:30 AM
\ No newline at end of file


Property changes on: trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Deleted: trunk/src/NModule.Core.Loader/ModuleRole.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleRole.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core.Loader/ModuleRole.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -1,82 +0,0 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
- 
-using System;
-using System.Collections;
-using System.Reflection;
-
-namespace NModule.Core.Loader {
-	public delegate RoleRegisterHandler (Assembly asm, Type basetype);
-	
-	public delegate RoleUnregisterHandler (Assembly asm);
-	
-	/*
-	 * This class handles the roles used by the module loader.
-	 * It represents a role given its name, base type, and the
-	 * handler used to instantiate that role.  This role is opaque,
-	 * and could easily be used as a value type, but I feel this is
-	 * the best way to go to ensure future changes dont require semantic
-	 * changes to the engine.
-	 */
-	public class ModuleRole {
-		private Type _baseType;
-		private string _roleName;
-		private RoleRegisterHandler _regHandler;
-		private RoleUnregisterHandle _unregHandler;
-		
-		// Lets get this baby setup :)
-		public ModuleRole (string name, Type basetype, RoleRegisterHandler regHandler, RoleUnregisterHandler unregHandler) {
-			_baseType = basetype;
-			_roleName = name;
-			_regHandler = regHandler;
-			_unregHandler = unregHandler;
-		}
-		
-		// all properties are read-only for the moment except the handler (which could conceivably change as other modules are loaded which may take the load
-		// off the main engine)
-		public Type BaseType {
-			get {
-				return _baseType;
-			}
-		}
-		
-		public string RoleName {
-			get {
-				return _roleName;
-			}
-		}
-		
-		public RoleRegisterHandler RegistrationHandler {
-			get {
-				return _regHandler;
-			}
-		}
-		
-		public RoleUnregisterHandler UnregistrationHandler {
-			get {
-				return _unregHandler;
-			}
-		} 
-	}
-}
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp
===================================================================
--- trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp	2005-06-23 08:40:23 UTC (rev 20)
@@ -13,14 +13,20 @@
       <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
     </Configuration>
   </Configurations>
-  <References />
+  <References>
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Core.Module" />
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Core" />
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Resolver" />
+  </References>
   <DeploymentInformation strategy="File">
     <excludeFiles />
   </DeploymentInformation>
   <Contents>
     <File name="./AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
-    <File name="./ModuleRole.cs" subtype="Code" buildaction="Compile" />
     <File name="./ModuleLoader.cs" subtype="Code" buildaction="Compile" />
     <File name="./ModuleController.cs" subtype="Code" buildaction="Compile" />
+    <File name="./InvalidModuleException.cs" subtype="Code" buildaction="Compile" />
+    <File name="./ModuleImageException.cs" subtype="Code" buildaction="Compile" />
+    <File name="./ModuleNotFoundException.cs" subtype="Code" buildaction="Compile" />
   </Contents>
 </Project>
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/NModule.Core.Loader.pidb
===================================================================
(Binary files differ)

Modified: trunk/src/NModule.Core.Module/ModuleInfo.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -21,11 +21,62 @@
  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
  **************************************************************************/
- 
-using System;
-using System.Collections;
-using System.Reflection;
-using NModule.Dependency.Parser;
 
 namespace NModule.Core.Module {
+	using System;
+	using System.Collections;
+	using System.IO;
+	using System.Reflection;
+	
+	using NModule.Dependency.Core;
+	using NModule.Dependency.Parser;
+	
+	public class ModuleInfo {
+		// name
+		protected string _name;
+		
+		// version
+		protected DepVersion _version;
+		
+		// dependency stuff
+		protected DepNode _dependencies;
+		
+		public ModuleInfo (Assembly _asm) {
+			_name = _asm.GetName().Name;
+			_version = DepVersion.VersionParse (_asm.GetName().Version);
+			
+			ModuleDependencyAttribute _depAttr = ((ModuleDependencyAttribute)_asm.GetCustomAttributes (typeof (ModuleDependencyAttribute)));
+			
+			if (_depAttr != null)
+			{	
+				DepLexer _lexer = new DepLexer (new StringReader (_depAttr.DepString));
+				DepParser _parser = new DepParser (_lexer);
+				
+				// woot...lets do this!
+				_dependencies = new DepNode ();
+				
+				_parser.expr (_dependencies);
+			}
+			else
+				_depenencies = null;
+		}
+		
+		public string Name {
+			get {
+				return _name;
+			}
+		}
+		
+		public DepVersion Version {
+			get {
+				return _version;
+			}
+		}
+		
+		public DepNode Dependencies {
+			get {
+				return _dependencies;
+			}
+		}
+	}		
 }

Added: trunk/src/NModule.Core.Module/ModuleRole.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleRole.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core.Module/ModuleRole.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,82 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+using System;
+using System.Collections;
+using System.Reflection;
+
+namespace NModule.Core.Module {
+	public delegate RoleRegisterHandler (Assembly asm, Type basetype);
+	
+	public delegate RoleUnregisterHandler (Assembly asm);
+	
+	/*
+	 * This class handles the roles used by the module loader.
+	 * It represents a role given its name, base type, and the
+	 * handler used to instantiate that role.  This role is opaque,
+	 * and could easily be used as a value type, but I feel this is
+	 * the best way to go to ensure future changes dont require semantic
+	 * changes to the engine.
+	 */
+	public class ModuleRole {
+		private Type _baseType;
+		private string _roleName;
+		private RoleRegisterHandler _regHandler;
+		private RoleUnregisterHandle _unregHandler;
+		
+		// Lets get this baby setup :)
+		public ModuleRole (string name, Type basetype, RoleRegisterHandler regHandler, RoleUnregisterHandler unregHandler) {
+			_baseType = basetype;
+			_roleName = name;
+			_regHandler = regHandler;
+			_unregHandler = unregHandler;
+		}
+		
+		// all properties are read-only for the moment except the handler (which could conceivably change as other modules are loaded which may take the load
+		// off the main engine)
+		public Type BaseType {
+			get {
+				return _baseType;
+			}
+		}
+		
+		public string RoleName {
+			get {
+				return _roleName;
+			}
+		}
+		
+		public RoleRegisterHandler RegistrationHandler {
+			get {
+				return _regHandler;
+			}
+		}
+		
+		public RoleUnregisterHandler UnregistrationHandler {
+			get {
+				return _unregHandler;
+			}
+		} 
+	}
+}
\ No newline at end of file

Modified: trunk/src/NModule.Core.Module/NModule.Core.Module.mdp
===================================================================
--- trunk/src/NModule.Core.Module/NModule.Core.Module.mdp	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Core.Module/NModule.Core.Module.mdp	2005-06-23 08:40:23 UTC (rev 20)
@@ -14,6 +14,7 @@
     </Configuration>
   </Configurations>
   <References>
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Core" />
     <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Parser" />
   </References>
   <DeploymentInformation strategy="File">
@@ -22,5 +23,6 @@
   <Contents>
     <File name="./AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
     <File name="./ModuleInfo.cs" subtype="Code" buildaction="Compile" />
+    <File name="./ModuleRole.cs" subtype="Code" buildaction="Compile" />
   </Contents>
 </Project>
\ No newline at end of file

Modified: trunk/src/NModule.Core.Module/NModule.Core.Module.pidb
===================================================================
(Binary files differ)

Modified: trunk/src/NModule.Dependency.Core/DepConstraint.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/DepConstraint.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Dependency.Core/DepConstraint.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -32,7 +32,7 @@
 
 		public DepConstraint () {
 			_name = "";
-			_version = null;
+			_version = new DepVersion (-1, -1, -1, -1);
 		}
 
 		public DepVersion Version {
@@ -55,21 +55,8 @@
 
 		public string VersionTmp {
 			set {
-				_version = VersionParse(value);
+				_version = DepVersion.VersionParse(value);
 			}
 		}
-
-		protected DepVersion VersionParse (string v) {
-			// Here we go :)
-			DepVersion ver = new DepVersion ();
-			string[] vparts = v.Split ('.');
-			ver.Major = Int32.Parse (vparts[0]);
-			ver.Minor = Int32.Parse (vparts[1]);
-			if (vparts.Length > 2)
-				ver.Build = Int32.Parse(vparts[2]);
-			if (vparts.Length > 3)
-				ver.Revision = Int32.Parse(vparts[3]);
-			return ver;
-		}
 	}
 }

Modified: trunk/src/NModule.Dependency.Core/DepVersion.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/DepVersion.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Dependency.Core/DepVersion.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -92,5 +92,18 @@
 				_revision = value;
 			}
 		}
+		
+		public static DepVersion VersionParse (string v) {
+			// Here we go :)
+			DepVersion ver = new DepVersion ();
+			string[] vparts = v.Split ('.');
+			ver.Major = Int32.Parse (vparts[0]);
+			ver.Minor = Int32.Parse (vparts[1]);
+			if (vparts.Length > 2)
+				ver.Build = Int32.Parse(vparts[2]);
+			if (vparts.Length > 3)
+				ver.Revision = Int32.Parse(vparts[3]);
+			return ver;
+		}
 	}
 }

Modified: trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.pidb
===================================================================
(Binary files differ)

Modified: trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb
===================================================================
(Binary files differ)

Added: trunk/src/NModule.Dependency.Resolver/AssemblyInfo.cs
===================================================================
--- trunk/src/NModule.Dependency.Resolver/AssemblyInfo.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Dependency.Resolver/AssemblyInfo.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,32 @@
+using System.Reflection;
+using System.Runtime.CompilerServices;
+
+// Information about this assembly is defined by the following
+// attributes.
+//
+// change them to the information which is associated with the assembly
+// you compile.
+
+[assembly: AssemblyTitle("")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("")]
+[assembly: AssemblyCopyright("")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// The assembly version has following format :
+//
+// Major.Minor.Build.Revision
+//
+// You can specify all values by your own or you can build default build and revision
+// numbers with the '*' character (the default):
+
+[assembly: AssemblyVersion("1.0.*")]
+
+// The following attributes specify the key for the sign of your assembly. See the
+// .NET Framework documentation for more information about signing.
+// This is not required, if you don't want signing let these attributes like they're.
+[assembly: AssemblyDelaySign(false)]
+[assembly: AssemblyKeyFile("")]

Added: trunk/src/NModule.Dependency.Resolver/CircularDependencyException.cs
===================================================================
--- trunk/src/NModule.Dependency.Resolver/CircularDependencyException.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Dependency.Resolver/CircularDependencyException.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1 @@
+// created on 6/23/2005 at 3:27 AM
\ No newline at end of file


Property changes on: trunk/src/NModule.Dependency.Resolver/CircularDependencyException.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/src/NModule.Dependency.Resolver/DepResolver.cs
===================================================================
--- trunk/src/NModule.Dependency.Resolver/DepResolver.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Dependency.Resolver/DepResolver.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,217 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+
+namespace NModule.Dependency.Resolver {
+	using System;
+	using System.Collections;
+	using System.IO;
+	using System.Reflection;
+	
+	using NModule.Dependency.Core;
+	using NModule.Core.Loader;
+	using NModule.Core.Module;
+	
+	public class DepResolver {
+#region Members
+		// ModuleController used for loading modules to sastify dependencies.
+		protected ModuleController	_controller;
+		
+		// Search Path for modules
+		protected ArrayList _search_path;
+#endregion
+
+#region Constructor
+		public DepResolver (ModuleController controller, ArrayList search_path) {
+			_controller = controller;
+			_search_path = search_path;
+		}
+#endregion
+
+#region Internal Helper Functions
+		protected string SearchForModule (string _name) {
+			foreach (string s in _search_path) {
+				if (Directory.Exists (s)) {
+					foreach (string f in Directory.GetFiles (s, "*.dll")) {
+						if (f.SubString (0, f.Length - 4) == _name) {
+							return s + "/" + f;
+						}
+					}
+				}
+			}
+			
+			return null;
+		}
+		
+		protected void OpResolve (DepNode _node, ArrayList _parents, ModuleInfo _info, bool checking) {
+			DepOp _op = _node.DepOp;
+			DepConstraint _constraint = _node.Constraint;
+			if ((_op == DepOps.And) || (_op == DepOps.Not) || (_op == DepOps.Opt) || (_op == DepOps.Or) || (_op == DepOps.Xor)) {
+				// combo-operators
+				int c = 0;
+				ArrayList _results = new ArrayList ();
+				ArrayList _c = new ArrayList ();
+				foreach (DepNode _child in _node.Children) {
+					try {
+						OpResolve (_child, _parents, _info, checking);
+						_results.Add (true);
+						_c.Add (_child.Constraint);
+					} catch (Exception e) {
+						_results.Add (false);
+						_c.Add (_child.Constraint);
+					}
+				}
+				
+				switch (_op) {
+					case DepOps.And:
+						int r = 0;
+						foreach (bool _result in _results) {
+							if (!_result) {
+								throw new UnresolvedDependencyInformation (
+									string.Format("The following dependency for the module {0} could not be resolved: (AND operator)\n\t{1} ({2})",
+										_info.Name, ((DepConstraint)_c[r]).Name, ((DepConstraint)_c[r]).Version)
+								);
+							}
+						}
+						break;
+					case DepOps.Not:
+						foreach (bool _result in _results) {
+							if (_result) {
+								throw new UnresolvedDependencyInformation (
+									string.Format("The following dependency for the module {0} could not be resolved: (NOT operator)\n\t{1} ({2})",
+										_info.Name, ((DepConstraint)_c[r]).Name, ((DepConstraint)_c[r]).Version)
+								);
+						}
+						break;
+					case DepOps.Opt: // This is optional so stuff is true regardless
+						break;
+					case DepOps.Or:
+						_ret = false;
+						ArrayList _urexc = new ArrayList ();
+						
+						foreach (bool _result in _results) {
+							if (_result)
+								_ret = true;
+							else {
+								_urexc.Add (string.Format("{1} ({2})", _info.Name, ((DepConstraint)_c[r]).Name, ((DepConstraint)_c[r]).Version));
+							}
+						}
+						
+						if (!_ret) {
+							StringBuilder _sb = new StringBuilder (
+								string.Format("The following dependency for the module {0} could not be resolved: (OR operator)\n")
+							);
+							foreach (string _exc in _urexc) {
+								sb += string.Format("\t{0}\n", _exc);
+							}
+							throw new UnresolvedDependencyInformation (sb.ToString ());
+						}
+						break;
+					case DepOps.Xor:
+						_xt = true;
+						_xf = true;
+						ArrayList _urexc = new ArrayList ();
+				
+						foreach (bool _result in _results) {
+							if (_result) {
+								_xf = false;
+								_urexc.Add (string.Format("{1} ({2}) (True)", _info.Name, ((DepConstraint)_c[r]).Name, ((DepConstraint)_c[r]).Version));
+							}
+							if (!_result) {
+								_xt = false;
+								_ur.Add (string.Format("{1} ({2}) (False)", _info.Name, ((DepConstraint)_c[r]).Name, ((DepConstraint)_c[r]).Version));
+							}
+						}
+						
+						if (_xt || _xf)
+							_ret = false;
+							
+						if (!_ret) {
+							StringBuilder _sb = new StringBuilder (
+								string.Format("The following dependency for the module {0} could not be resolved: (XOR operator)\n")
+							);
+							foreach (string _exc in _urexc) {
+								sb += string.Format("\t{0}\n", _exc);
+							}
+							throw new UnresolvedDependencyInformation (sb.ToString ());
+						}
+						break;
+				}
+			} else {
+				// single operators
+				if (SearchForModule (_constraint.Name) == null)
+					_ret = false;
+		
+				ModuleInfo _ninfo;
+						
+				ModuleLoader _loader = new ModuleLoader (_search_path, this);
+						
+				_loader.LoadModule (_parents, _constraint.Name, out _ninfo, true);
+				
+				if ((_op == DepOps.Equal) || (_op == DepOps.GreaterThan) || (_op == DepOps.GreaterThanEqual) || (_op == DepOps.LessThan)
+					|| (_op == DepOps.LessThanEqual) || (_op == DepOps.NotEqual)) {
+					if (!IsEmptyVersion (_constraint.Version)) {
+						if (!VersionMatch (_ninfo, _version, _op)) {
+							throw new UnresolvedDependencyInformation (
+								string.Format("The following dependency for the module {0} could not be resolved: ({3} operator)\n\t{1} ({2})",
+									_info.Name, ((DepConstraint)_c[r]).Name, ((DepConstraint)_c[r]).Version, OpToString (_op))
+							);
+						}
+					}
+					if (!checking) {
+						_controller.LoadModule (_constraint.Name);
+					}		
+				}
+				// we got this far, so obviously it loaded okay
+			}		
+		}
+			
+		protected void InternalResolve (ArrayList _parents, ModuleInfo _info, bool checking) {
+			if (_info.Dependencies == null)
+				return;
+			
+			foreach (DepNode _node in _info.Dependencies) {
+				foreach (string _parent in _parents) {
+					if (_node.Constraint.Name == _parent) {
+						throw new CircularDependencyException (
+							string.Format("The module {0} is depending on {1} which is depending on {0}, causing a circular dependency.",
+								_parent, _info.Name, _parent)
+						);
+					}
+				}
+				OpResolve (_node, _parents, _info, checking);
+			}			
+		}
+#endregion
+
+#region Resolvers
+		public void ResolveCheck (ArrayList _parents, ModuleInfo _info) {
+			InternalResolve (_parents, _info, true);
+		}
+		
+		public void Resolve (ArrayList _parents, ModuleInfo _info) {
+			InternalResolve (_parents, _info, false);
+		}
+#endregion
+	}
+}
\ No newline at end of file

Added: trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp
===================================================================
--- trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,30 @@
+<Project name="NModule.Dependency.Resolver" fileversion="2.0" language="C#" ctype="DotNetProject">
+  <Configurations>
+    <Configuration name="Debug" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Debug" assembly="NModule.Dependency.Resolver" />
+      <Build debugmode="True" target="Library" />
+      <Execution runwithwarnings="True" consolepause="False" runtime="MsNet" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+    <Configuration name="Release" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Release" assembly="NModule.Dependency.Resolver" />
+      <Build debugmode="False" target="Library" />
+      <Execution runwithwarnings="True" consolepause="False" runtime="MsNet" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+  </Configurations>
+  <References>
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Core.Loader" />
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Core.Module" />
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Core" />
+  </References>
+  <DeploymentInformation strategy="File">
+    <excludeFiles />
+  </DeploymentInformation>
+  <Contents>
+    <File name="./DepResolver.cs" subtype="Code" buildaction="Compile" />
+    <File name="./AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
+    <File name="./CircularDependencyException.cs" subtype="Code" buildaction="Compile" />
+    <File name="./UnresolvedDependencyException.cs" subtype="Code" buildaction="Compile" />
+  </Contents>
+</Project>
\ No newline at end of file

Added: trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mds
===================================================================
--- trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mds	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mds	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,16 @@
+<Combine name="NModule.Dependency.Resolver" fileversion="2.0">
+  <Configurations>
+    <Configuration name="Debug" ctype="CombineConfiguration">
+      <Entry build="True" name="NModule.Dependency.Resolver" />
+    </Configuration>
+    <Configuration name="Release" ctype="CombineConfiguration">
+      <Entry build="True" name="NModule.Dependency.Resolver" />
+    </Configuration>
+  </Configurations>
+  <StartMode startupentry="NModule.Dependency.Resolver" single="True">
+    <Execute type="None" entry="NModule.Dependency.Resolver" />
+  </StartMode>
+  <Entries>
+    <Entry filename="./NModule.Dependency.Resolver.mdp" />
+  </Entries>
+</Combine>
\ No newline at end of file

Added: trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.pidb
===================================================================
(Binary files differ)


Property changes on: trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.pidb
___________________________________________________________________
Name: svn:mime-type
   + font/ttf

Added: trunk/src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs
===================================================================
--- trunk/src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1 @@
+// created on 6/23/2005 at 3:28 AM
\ No newline at end of file


Property changes on: trunk/src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/Data/test-1.txt
===================================================================
--- trunk/test/Data/test-1.txt	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/test/Data/test-1.txt	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1 @@
+(&& (>> Elfblade.Core.Net 2.0) (!= Elfblade.Core 1.0) (!! (<= Elfblade.Core.Net.Extensions 2.0)) (?? (## Elfblade.Core.Net.Extensions)))

Added: trunk/test/Data/test-2.txt
===================================================================
--- trunk/test/Data/test-2.txt	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/test/Data/test-2.txt	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1 @@
+(&& (>> Elfblade.Core.Net 2.0.1) (!= Elfblade.Core 1.0.9.1051) (!! (<= Elfblade.Core.Net.Extensions 2.0.2.225)) (?? (## Elfblade.Core.Net.Extensions)))

Added: trunk/test/NModuleTest.cs
===================================================================
--- trunk/test/NModuleTest.cs	2005-06-23 01:49:01 UTC (rev 19)
+++ trunk/test/NModuleTest.cs	2005-06-23 08:40:23 UTC (rev 20)
@@ -0,0 +1,76 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions:                                              *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+
+using System;
+using System.IO;
+using NModule.Dependency.Parser;
+using antlr.collections;
+
+namespace NModule
+{
+	public class NModuleTest
+	{
+		public static void PrintTree(DepNode root, int indent)
+		{
+			for(int i = 0; i < indent; i++)
+				Console.Write("  ");
+	
+			Console.Write("op = {0}, ", root.DepOp.ToString());
+
+			if (root.Constraint != null)
+			{
+				Console.Write("name = {0}", root.Constraint.Name);
+				if (root.Constraint.Version != null)
+				{
+					DepVersion ver = root.Constraint.Version;
+					Console.WriteLine(", version = {0}.{1}.{2}.{3}", ver.Major, ver.Minor, ver.Build, ver.Patch);
+				}
+				else
+					Console.WriteLine();
+			}
+			else
+				Console.WriteLine();
+
+			foreach(DepNode child in root.Children)
+				PrintTree(child, indent + 1);
+		}
+
+	       	public static void Main(string[] args)
+	        {
+			foreach(string file in args)
+			{
+				DepNode root = new DepNode();
+
+				Console.WriteLine("==== Testing Input from {0} ====", file);
+				DepLexer lexer = new DepLexer(new FileStream(file, FileMode.Open));
+		                DepParser parser = new DepParser(lexer);
+	                	parser.expr(root);
+                		PrintTree(root, 0);
+			}
+		
+	        }
+	}
+}
+
+



From urilith at sheep.berlios.de  Thu Jun 23 10:44:34 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Thu, 23 Jun 2005 10:44:34 +0200
Subject: [nmodule-commits] r21 - in trunk: . src/NModule.Core.Loader src/NModule.Core.Module src/NModule.Dependency.Core src/NModule.Dependency.Parser src/NModule.Dependency.Resolver
Message-ID: <200506230844.j5N8iYUX023717@sheep.berlios.de>

Author: urilith
Date: 2005-06-23 10:44:33 +0200 (Thu, 23 Jun 2005)
New Revision: 21

Removed:
   trunk/src/NModule.Core.Loader/NModule.Core.Loader.pidb
   trunk/src/NModule.Core.Module/NModule.Core.Module.pidb
   trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.pidb
   trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb
   trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.pidb
Modified:
   trunk/
Log:
 r114 at dreamshadow:  urilith | 2005-06-23 03:42:44 -0500
 Removed pidb files.



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:112
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:114

Deleted: trunk/src/NModule.Core.Loader/NModule.Core.Loader.pidb
===================================================================
(Binary files differ)

Deleted: trunk/src/NModule.Core.Module/NModule.Core.Module.pidb
===================================================================
(Binary files differ)

Deleted: trunk/src/NModule.Dependency.Core/NModule.Dependency.Core.pidb
===================================================================
(Binary files differ)

Deleted: trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.pidb
===================================================================
(Binary files differ)

Deleted: trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.pidb
===================================================================
(Binary files differ)



From urilith at sheep.berlios.de  Thu Jun 23 10:50:59 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Thu, 23 Jun 2005 10:50:59 +0200
Subject: [nmodule-commits] r22 - trunk
Message-ID: <200506230850.j5N8oxF8025641@sheep.berlios.de>

Author: urilith
Date: 2005-06-23 10:50:59 +0200 (Thu, 23 Jun 2005)
New Revision: 22

Modified:
   trunk/
Log:
 r116 at dreamshadow:  urilith | 2005-06-23 03:48:27 -0500
 svn:ignore



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:114
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:116
Name: svn:ignore
   + *.pidb
*.dll
*.exe



From urilith at sheep.berlios.de  Thu Jun 23 14:34:35 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Thu, 23 Jun 2005 14:34:35 +0200
Subject: [nmodule-commits] r23 - in trunk: . src/NModule.Core src/NModule.Core.Loader src/NModule.Core.Module src/NModule.Dependency.Resolver
Message-ID: <200506231234.j5NCYZUb030559@sheep.berlios.de>

Author: urilith
Date: 2005-06-23 14:34:33 +0200 (Thu, 23 Jun 2005)
New Revision: 23

Modified:
   trunk/
   trunk/nmodule.mds
   trunk/src/NModule.Core.Loader/InvalidModuleException.cs
   trunk/src/NModule.Core.Loader/ModuleController.cs
   trunk/src/NModule.Core.Loader/ModuleImageException.cs
   trunk/src/NModule.Core.Loader/ModuleLoader.cs
   trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs
   trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp
   trunk/src/NModule.Core.Module/ModuleInfo.cs
   trunk/src/NModule.Core/ModuleDependencyAttribute.cs
   trunk/src/NModule.Core/ModuleRoleAttribute.cs
   trunk/src/NModule.Dependency.Resolver/CircularDependencyException.cs
   trunk/src/NModule.Dependency.Resolver/DepResolver.cs
   trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp
   trunk/src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs
Log:
 r118 at dreamshadow:  urilith | 2005-06-23 05:55:54 -0500
 Implemented exceptions and attributes.



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:116
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:118

Modified: trunk/nmodule.mds
===================================================================
--- trunk/nmodule.mds	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/nmodule.mds	2005-06-23 12:34:33 UTC (rev 23)
@@ -32,7 +32,7 @@
     <Execute type="None" entry="NModule.Core" />
   </StartMode>
   <Entries>
-    <Entry filename="./Documentation/Documentation.mdp" />
+    <Entry filename="./doc/Documentation.mdp" />
     <Entry filename="./src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp" />
     <Entry filename="./src/NModule.Core.Loader/NModule.Core.Loader.mdp" />
     <Entry filename="./src/NModule.Core.Module/NModule.Core.Module.mdp" />

Modified: trunk/src/NModule.Core/ModuleDependencyAttribute.cs
===================================================================
--- trunk/src/NModule.Core/ModuleDependencyAttribute.cs	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Core/ModuleDependencyAttribute.cs	2005-06-23 12:34:33 UTC (rev 23)
@@ -1 +1,41 @@
-// created on 6/23/2005 at 3:29 AM
\ No newline at end of file
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+namespace NModule.Core {
+	using System;
+	
+	public class ModuleDependencyAttribute : Attribute {
+		protected string _dep_string;
+		
+		public ModuleDependencyAttribute (string dep_string) {
+			_dep_string = dep_string;
+		}
+		
+		public string DepString {
+			get {
+				return _dep_string;
+			}
+		}
+	}
+}
\ No newline at end of file

Modified: trunk/src/NModule.Core/ModuleRoleAttribute.cs
===================================================================
--- trunk/src/NModule.Core/ModuleRoleAttribute.cs	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Core/ModuleRoleAttribute.cs	2005-06-23 12:34:33 UTC (rev 23)
@@ -1 +1,41 @@
-// created on 6/23/2005 at 3:29 AM
\ No newline at end of file
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+namespace NModule.Core {
+	using System;
+	
+	public class ModuleRoleAttribute : Attribute {
+		protected string _roles;
+		
+		public ModuleDependencyAttribute (string role) {
+			_roles = role;
+		}
+		
+		public string Roles {
+			get {
+				return _roles;
+			}
+		}
+	}
+}
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/InvalidModuleException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/InvalidModuleException.cs	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Core.Loader/InvalidModuleException.cs	2005-06-23 12:34:33 UTC (rev 23)
@@ -1 +1,35 @@
-// created on 6/23/2005 at 2:31 AM
\ No newline at end of file
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+namespace NModule.Core.Loader {
+	using System;
+	
+	public class InvalidModuleException : Exception {
+		public InvalidModuleException ( ) : base ( ) { }
+		
+		public InvalidModuleException (string _msg) : base (_msg) { }
+		
+		public InvalidModuleException (string _msg, Exception _exc) : base (_msg) { }
+	}
+}
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/ModuleController.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-23 12:34:33 UTC (rev 23)
@@ -166,9 +166,7 @@
 
 #region Role Handlers
 		protected void CallRoleHandlers (ModuleInfo _info) {
-			foreach (ModuleRoleAttribute _attr in _info.ModuleRoleAttributes) {
-				string _myRole = _attr.Role;
-				
+			foreach (string _myRole in _info.Roles.Split(',')) {
 				foreach (ModuleRole _role in _roles) {
 					if (_role.Name == _myRole) {
 						Assembly _asm = _info.Owner;
@@ -201,9 +199,7 @@
 		}
 		
 		protected void CallRoleUnregisterHandlers (ModuleInfo _info) {
-			foreach (ModuleRoleAttribute _attr in _info.ModuleRoleAttributes) {
-				string _myRole = _attr.Role;
-				
+			foreach (string _myRole in _info.Roles.Split(',')) {
 				foreach (ModuleRole _role in _roles) {
 					if (_role.Name == _myRole) {
 						Assembly _asm = _info.Owner;

Modified: trunk/src/NModule.Core.Loader/ModuleImageException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleImageException.cs	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Core.Loader/ModuleImageException.cs	2005-06-23 12:34:33 UTC (rev 23)
@@ -1 +1,35 @@
-// created on 6/23/2005 at 2:31 AM
\ No newline at end of file
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+namespace NModule.Core.Loader {
+	using System;
+	
+	public class ModuleImageException : Exception {
+		public ModuleImageException ( ) : base ( ) { }
+		
+		public ModuleImageException (string _msg) : base (_msg) { }
+		
+		public ModuleImageException (string _msg, Exception _exc) : base (_msg) { }
+	}
+}
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/ModuleLoader.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-23 12:34:33 UTC (rev 23)
@@ -99,7 +99,7 @@
 				
 			// Okay, well, now we know the module exists at least in the file (we hope its a proper dll, but we'll see :).  Now we
 			// need to create the temporary AppDomain and load it to get the info from it.
-			AppDomain _tempDomain = AppDomain.Create ("_temp_" + _name);
+			AppDomain _tempDomain = AppDomain.CreateDomain ("_temp_" + _name);
 			
 			byte[] _raw_bytes = LoadRawFile (_filename);
 			
@@ -146,7 +146,7 @@
 			
 			// alright, we've got them all loaded, they exist in the assembly map.
 			// now we create the *real* app domain.
-			AppDomain _domain = AppDomain.Create (_name);
+			AppDomain _domain = AppDomain.CreateDomain (_name);
 			
 			// let's load this assembly into the real app domain.
 			_domain.Load (_raw_bytes);

Modified: trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs	2005-06-23 12:34:33 UTC (rev 23)
@@ -1 +1,35 @@
-// created on 6/23/2005 at 2:30 AM
\ No newline at end of file
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+namespace NModule.Core.Loader {
+	using System;
+	
+	public class ModuleNotFoundException : Exception {
+		public ModuleNotFoundException ( ) : base ( ) { }
+		
+		public ModuleNotFoundException (string _msg) : base (_msg) { }
+		
+		public ModuleNotFoundException (string _msg, Exception _exc) : base (_msg) { }
+	}
+}
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp
===================================================================
--- trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp	2005-06-23 12:34:33 UTC (rev 23)
@@ -17,6 +17,7 @@
     <ProjectReference type="Project" localcopy="True" refto="NModule.Core.Module" />
     <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Core" />
     <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Resolver" />
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Core" />
   </References>
   <DeploymentInformation strategy="File">
     <excludeFiles />
@@ -24,9 +25,9 @@
   <Contents>
     <File name="./AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
     <File name="./ModuleLoader.cs" subtype="Code" buildaction="Compile" />
-    <File name="./ModuleController.cs" subtype="Code" buildaction="Compile" />
     <File name="./InvalidModuleException.cs" subtype="Code" buildaction="Compile" />
     <File name="./ModuleImageException.cs" subtype="Code" buildaction="Compile" />
     <File name="./ModuleNotFoundException.cs" subtype="Code" buildaction="Compile" />
+    <File name="./ModuleController.cs" subtype="Code" buildaction="Compile" />
   </Contents>
 </Project>
\ No newline at end of file

Modified: trunk/src/NModule.Core.Module/ModuleInfo.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-23 12:34:33 UTC (rev 23)
@@ -30,6 +30,7 @@
 	
 	using NModule.Dependency.Core;
 	using NModule.Dependency.Parser;
+	using NModule.Core;
 	
 	public class ModuleInfo {
 		// name
@@ -41,14 +42,16 @@
 		// dependency stuff
 		protected DepNode _dependencies;
 		
+		// roles
+		protected string _roles;
+		
 		public ModuleInfo (Assembly _asm) {
 			_name = _asm.GetName().Name;
 			_version = DepVersion.VersionParse (_asm.GetName().Version);
 			
 			ModuleDependencyAttribute _depAttr = ((ModuleDependencyAttribute)_asm.GetCustomAttributes (typeof (ModuleDependencyAttribute)));
 			
-			if (_depAttr != null)
-			{	
+			if (_depAttr != null) {	
 				DepLexer _lexer = new DepLexer (new StringReader (_depAttr.DepString));
 				DepParser _parser = new DepParser (_lexer);
 				
@@ -56,9 +59,15 @@
 				_dependencies = new DepNode ();
 				
 				_parser.expr (_dependencies);
-			}
-			else
+			} else
 				_depenencies = null;
+				
+			ModuleRoleAttribute _roleAttr = ((ModuleRoleAttribute)_asm.GetCustomAttributes (typeof (ModuleRoleAttribute));
+			
+			if (_roleAttr != null) {
+				_roles = _roleAttr.Roles;
+			} else
+				_roles = null;
 		}
 		
 		public string Name {
@@ -78,5 +87,11 @@
 				return _dependencies;
 			}
 		}
+		
+		public string Roles {
+			get {
+				return _roles;
+			}
+		}
 	}		
 }

Modified: trunk/src/NModule.Dependency.Resolver/CircularDependencyException.cs
===================================================================
--- trunk/src/NModule.Dependency.Resolver/CircularDependencyException.cs	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Dependency.Resolver/CircularDependencyException.cs	2005-06-23 12:34:33 UTC (rev 23)
@@ -1 +1,37 @@
-// created on 6/23/2005 at 3:27 AM
\ No newline at end of file
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+namespace NModule.Dependency.Resolver {
+	using System;
+	
+	public class CircularDependencyException : Exception {
+		public CircularDependencyException ( ) : base ( ) { }
+		
+		public CircularDependencyException (string _msg) : base (_msg) { }
+		
+		public CircularDependencyException (string _msg, Exception _exc) : base (_msg) { }
+	}
+}
+		
+		
\ No newline at end of file

Modified: trunk/src/NModule.Dependency.Resolver/DepResolver.cs
===================================================================
--- trunk/src/NModule.Dependency.Resolver/DepResolver.cs	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Dependency.Resolver/DepResolver.cs	2005-06-23 12:34:33 UTC (rev 23)
@@ -35,7 +35,7 @@
 	public class DepResolver {
 #region Members
 		// ModuleController used for loading modules to sastify dependencies.
-		protected ModuleController	_controller;
+		protected ModuleController _controller;
 		
 		// Search Path for modules
 		protected ArrayList _search_path;

Modified: trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp
===================================================================
--- trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp	2005-06-23 12:34:33 UTC (rev 23)
@@ -14,9 +14,9 @@
     </Configuration>
   </Configurations>
   <References>
-    <ProjectReference type="Project" localcopy="True" refto="NModule.Core.Loader" />
     <ProjectReference type="Project" localcopy="True" refto="NModule.Core.Module" />
     <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Core" />
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Core" />
   </References>
   <DeploymentInformation strategy="File">
     <excludeFiles />

Modified: trunk/src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs
===================================================================
--- trunk/src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs	2005-06-23 08:50:59 UTC (rev 22)
+++ trunk/src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs	2005-06-23 12:34:33 UTC (rev 23)
@@ -1 +1,35 @@
-// created on 6/23/2005 at 3:28 AM
\ No newline at end of file
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+namespace NModule.Dependency.Resolver {
+	using System;
+	
+	public class UnresolvedDependencyException : Exception {
+		public UnresolvedDependencyException ( ) : base ( ) { }
+		
+		public UnresolvedDependencyException (string _msg) : base (_msg) { }
+		
+		public UnresolvedDependencyException (string _msg, Exception _exc) : base (_msg) { }
+	}
+}
\ No newline at end of file



From urilith at sheep.berlios.de  Thu Jun 23 14:34:57 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Thu, 23 Jun 2005 14:34:57 +0200
Subject: [nmodule-commits] r24 - in trunk: . lib/antlr-2.7.5/antlr lib/antlr-2.7.5/scripts src src/NModule.Core src/NModule.Core.Loader src/NModule.Core.Module src/NModule.Dependency.Core src/NModule.Dependency.Parser
Message-ID: <200506231234.j5NCYv6S030817@sheep.berlios.de>

Author: urilith
Date: 2005-06-23 14:34:54 +0200 (Thu, 23 Jun 2005)
New Revision: 24

Added:
   trunk/src/NModule.Core.Loader/CircularDependencyException.cs
   trunk/src/NModule.Core.Loader/DepResolver.cs
   trunk/src/NModule.Core.Loader/DomainStillReferencedException.cs
   trunk/src/NModule.Core.Loader/UnresolvedDependencyException.cs
   trunk/src/NModule.Core.Module/ModuleInfoException.cs
Removed:
   trunk/src/NModule.Dependency.Resolver/
Modified:
   trunk/
   trunk/ChangeLog
   trunk/lib/antlr-2.7.5/antlr/Version.java
   trunk/lib/antlr-2.7.5/scripts/antlr.sh
   trunk/lib/antlr-2.7.5/scripts/c.sh
   trunk/lib/antlr-2.7.5/scripts/config.deps
   trunk/lib/antlr-2.7.5/scripts/config.vars
   trunk/lib/antlr-2.7.5/scripts/cpp.sh
   trunk/lib/antlr-2.7.5/scripts/csc.sh
   trunk/lib/antlr-2.7.5/scripts/cxx.sh
   trunk/lib/antlr-2.7.5/scripts/jar.sh
   trunk/lib/antlr-2.7.5/scripts/java.sh
   trunk/lib/antlr-2.7.5/scripts/javac.sh
   trunk/lib/antlr-2.7.5/scripts/lib.sh
   trunk/lib/antlr-2.7.5/scripts/link.sh
   trunk/lib/antlr-2.7.5/scripts/pyantlr.sh
   trunk/lib/antlr-2.7.5/scripts/python.sh
   trunk/nmodule.mds
   trunk/src/NModule.Core.Loader/ModuleController.cs
   trunk/src/NModule.Core.Loader/ModuleLoader.cs
   trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp
   trunk/src/NModule.Core.Module/ModuleInfo.cs
   trunk/src/NModule.Core.Module/ModuleRole.cs
   trunk/src/NModule.Core.Module/NModule.Core.Module.mdp
   trunk/src/NModule.Core/IModule.cs
   trunk/src/NModule.Core/ModuleRoleAttribute.cs
   trunk/src/NModule.Dependency.Core/DepVersion.cs
   trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp
Log:
 r119 at dreamshadow:  urilith | 2005-06-23 07:32:48 -0500
 2005-06-23 Michael Tindal <urilith at gentoo.org>
 
   *******************
   ***** RELEASE *****
   *******************
   *
   ***
   * Tag 0.1 release.
   ***
   *
   * lib/antlr-2.7.5/antlr/ANTLRLexer.java: Removed for a clean install.
   * lib/antlr-2.7.5/antlr/ANTLRParser.java: Ditto.
   * lib/antlr-2.7.5/antlr/ANTLRTokdefLexer.java: Ditto.
   * lib/antlr-2.7.5/antlr/ANTLRTokdefParser.java: Ditto.
   * lib/antlr-2.7.5/antlr/ANTLRTokdefParserTokenTypes.java: Ditto.
   * lib/antlr-2.7.5/antlr/ANTLRTokenTypes.java: Ditto.
   * lib/antlr-2.7.5/antlr/Version.java: Ditto.
   * lib/antlr-2.7.5/antlr/actions/cpp/ActionLexer.java: Ditto.
   * lib/antlr-2.7.5/antlr/actions/cpp/ActionLexerTokenTypes.java: Ditto.
   * lib/antlr-2.7.5/antlr/actions/csharp/ActionLexer.java: Ditto.
   * lib/antlr-2.7.5/antlr/actions/csharp/ActionLexerTokenTypes.java: Ditto.
   * lib/antlr-2.7.5/antlr/actions/java/ActionLexer.java: Ditto.
   * lib/antlr-2.7.5/antlr/actions/java/ActionLexerTokenTypes.java: Ditto.
   * lib/antlr-2.7.5/antlr/actions/python/ActionLexer.java: Ditto.
   * lib/antlr-2.7.5/antlr/actions/python/ActionLexerTokenTypes.java: Ditto.
   * lib/antlr-2.7.5/antlr/actions/python/CodeLexer.java: Ditto.
   * lib/antlr-2.7.5/antlr/actions/python/CodeLexerTokenTypes.java: Ditto.
   * lib/antlr-2.7.5/antlr/antlr: Stuff.
   * lib/antlr-2.7.5/config.log: Removed.
   * lib/antlr-2.7.5/lib/antlr.astframe.dll: Removed.
   * lib/antlr-2.7.5/lib/antlr.runtime.dll: Removed.
   * lib/antlr-2.7.5/lib/csharp/ASTFrame/antlr.astframe.dll: Removed.
   * lib/antlr-2.7.5/scripts/antlr.sh: Cleaned.
   * lib/antlr-2.7.5/scripts/c.sh: Ditto.
   * lib/antlr-2.7.5/scripts/config.deps: Ditto.
   * lib/antlr-2.7.5/scripts/config.vars: Ditto.
   * lib/antlr-2.7.5/scripts/cpp.sh: Ditto.
   * lib/antlr-2.7.5/scripts/csc.sh: Ditto.
   * lib/antlr-2.7.5/scripts/cxx.sh: Ditto.
   * lib/antlr-2.7.5/scripts/jar.sh: Ditto.
   * lib/antlr-2.7.5/scripts/java.sh: Ditto.
   * lib/antlr-2.7.5/scripts/javac.sh: Ditto.
   * lib/antlr-2.7.5/scripts/lib.sh: Ditto.
   * lib/antlr-2.7.5/scripts/link.sh: Ditto.
   * lib/antlr-2.7.5/scripts/pyantlr.sh: Ditto.
   * lib/antlr-2.7.5/scripts/python.sh: Ditto.
   * nmodule.mds: Removed doc project.
   * src/NModule.Core/IModule.cs: Added.
   * src/NModule.Core/ModuleRoleAttribute.cs: Added Owner.
   * src/NModule.Core.Loader/ModuleController.cs: Added missing methods.
   * src/NModule.Core.Loader/ModuleLoader.cs: Fixed compilation errors.
   * src/NModule.Core.Loader/NModule.Core.Loader.mdp: Updated.
   * src/NModule.Core.Loader/CircularDependencyException.cs: New exceptions.
   * src/NModule.Core.Loader/DepResolver.cs: Moved here to avoid circular dependencies.
   * src/NModule.Core.Loader/DomainStillReferencedException.cs: New exceptions.
   * src/NModule.Core.Loader/UnresolvedDependencyException.cs: New exceptions.
   * src/NModule.Core.Module/ModuleInfo.cs: Fixed.
   * src/NModule.Core.Module/ModuleRole.cs: Fixed.
   * src/NModule.Core.Module/NModule.Core.Module.mdp: Added exception.
   * src/NModule.Core.Module/ModuleInfoException.cs: New exceptions.
   * src/NModule.Dependency.Core/DepVersion.cs: Fixed.
   * src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp: Updated.
   * src/NModule.Dependency.Resolver: Removed.
   * src/NModule.Dependency.Resolver/AssemblyInfo.cs: Ditto.
   * src/NModule.Dependency.Resolver/CircularDependencyException.cs: Ditto.
   * src/NModule.Dependency.Resolver/DepResolver.cs: Ditto.
   * src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp: Ditto.
   * src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mds: Ditto.
   * src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs: Ditto.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:118
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:119

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/ChangeLog	2005-06-23 12:34:54 UTC (rev 24)
@@ -1,5 +1,75 @@
 2005-06-23 Michael Tindal <urilith at gentoo.org>
 
+	*******************
+        ***** RELEASE *****
+        *******************
+	*
+        ***
+        * Tag 0.1 release.
+        ***
+	*
+	* lib/antlr-2.7.5/antlr/ANTLRLexer.java: Removed for a clean install.
+	* lib/antlr-2.7.5/antlr/ANTLRParser.java: Ditto.
+	* lib/antlr-2.7.5/antlr/ANTLRTokdefLexer.java: Ditto.
+	* lib/antlr-2.7.5/antlr/ANTLRTokdefParser.java: Ditto.
+	* lib/antlr-2.7.5/antlr/ANTLRTokdefParserTokenTypes.java: Ditto.
+	* lib/antlr-2.7.5/antlr/ANTLRTokenTypes.java: Ditto.
+	* lib/antlr-2.7.5/antlr/Version.java: Ditto.
+	* lib/antlr-2.7.5/antlr/actions/cpp/ActionLexer.java: Ditto.
+	* lib/antlr-2.7.5/antlr/actions/cpp/ActionLexerTokenTypes.java: Ditto.
+	* lib/antlr-2.7.5/antlr/actions/csharp/ActionLexer.java: Ditto.
+	* lib/antlr-2.7.5/antlr/actions/csharp/ActionLexerTokenTypes.java: Ditto.
+	* lib/antlr-2.7.5/antlr/actions/java/ActionLexer.java: Ditto.
+	* lib/antlr-2.7.5/antlr/actions/java/ActionLexerTokenTypes.java: Ditto.
+	* lib/antlr-2.7.5/antlr/actions/python/ActionLexer.java: Ditto.
+	* lib/antlr-2.7.5/antlr/actions/python/ActionLexerTokenTypes.java: Ditto.
+	* lib/antlr-2.7.5/antlr/actions/python/CodeLexer.java: Ditto.
+	* lib/antlr-2.7.5/antlr/actions/python/CodeLexerTokenTypes.java: Ditto.
+	* lib/antlr-2.7.5/antlr/antlr: Stuff.
+	* lib/antlr-2.7.5/config.log: Removed.
+	* lib/antlr-2.7.5/lib/antlr.astframe.dll: Removed.
+	* lib/antlr-2.7.5/lib/antlr.runtime.dll: Removed.
+	* lib/antlr-2.7.5/lib/csharp/ASTFrame/antlr.astframe.dll: Removed.
+	* lib/antlr-2.7.5/scripts/antlr.sh: Cleaned.
+	* lib/antlr-2.7.5/scripts/c.sh: Ditto.
+	* lib/antlr-2.7.5/scripts/config.deps: Ditto. 
+	* lib/antlr-2.7.5/scripts/config.vars: Ditto.
+	* lib/antlr-2.7.5/scripts/cpp.sh: Ditto.
+	* lib/antlr-2.7.5/scripts/csc.sh: Ditto.
+	* lib/antlr-2.7.5/scripts/cxx.sh: Ditto.
+	* lib/antlr-2.7.5/scripts/jar.sh: Ditto.
+	* lib/antlr-2.7.5/scripts/java.sh: Ditto.
+	* lib/antlr-2.7.5/scripts/javac.sh: Ditto.
+	* lib/antlr-2.7.5/scripts/lib.sh: Ditto.
+	* lib/antlr-2.7.5/scripts/link.sh: Ditto.
+	* lib/antlr-2.7.5/scripts/pyantlr.sh: Ditto.
+	* lib/antlr-2.7.5/scripts/python.sh: Ditto.
+	* nmodule.mds: Removed doc project.
+	* src/NModule.Core/IModule.cs: Added.
+	* src/NModule.Core/ModuleRoleAttribute.cs: Added Owner.
+	* src/NModule.Core.Loader/ModuleController.cs: Added missing methods.
+	* src/NModule.Core.Loader/ModuleLoader.cs: Fixed compilation errors.
+	* src/NModule.Core.Loader/NModule.Core.Loader.mdp: Updated.
+	* src/NModule.Core.Loader/CircularDependencyException.cs: New exceptions.
+	* src/NModule.Core.Loader/DepResolver.cs: Moved here to avoid circular dependencies.
+	* src/NModule.Core.Loader/DomainStillReferencedException.cs: New exceptions.
+	* src/NModule.Core.Loader/UnresolvedDependencyException.cs: New exceptions.
+	* src/NModule.Core.Module/ModuleInfo.cs: Fixed.
+	* src/NModule.Core.Module/ModuleRole.cs: Fixed.
+	* src/NModule.Core.Module/NModule.Core.Module.mdp: Added exception.
+	* src/NModule.Core.Module/ModuleInfoException.cs: New exceptions.
+	* src/NModule.Dependency.Core/DepVersion.cs: Fixed.
+	* src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp: Updated.
+	* src/NModule.Dependency.Resolver: Removed.
+	* src/NModule.Dependency.Resolver/AssemblyInfo.cs: Ditto.
+	* src/NModule.Dependency.Resolver/CircularDependencyException.cs: Ditto.
+	* src/NModule.Dependency.Resolver/DepResolver.cs: Ditto.
+	* src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp: Ditto.
+	* src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mds: Ditto.
+	* src/NModule.Dependency.Resolver/UnresolvedDependencyException.cs: Ditto.
+
+2005-06-23 Michael Tindal <urilith at gentoo.org>
+
 	* nmodule.mds: New projects.
 	* src/NModule.Core.Loader/ModuleController.cs: Finished implementing everything.  Woot.
 	* src/NModule.Core.Loader/ModuleLoader.cs: Dont remember.

Modified: trunk/lib/antlr-2.7.5/antlr/Version.java
===================================================================
--- trunk/lib/antlr-2.7.5/antlr/Version.java	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/antlr/Version.java	2005-06-23 12:34:54 UTC (rev 24)
@@ -4,6 +4,6 @@
 	public static final String version    = "2";
 	public static final String subversion = "7";
 	public static final String patchlevel = "5";
-	public static final String datestamp  = "20050517";
-	public static final String project_version = "2.7.5 (20050517)";
+	public static final String datestamp  = "20050623";
+	public static final String project_version = "2.7.5 (20050623)";
 }

Modified: trunk/lib/antlr-2.7.5/scripts/antlr.sh
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/antlr.sh	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/antlr.sh	2005-06-23 12:34:54 UTC (rev 24)
@@ -14,7 +14,7 @@
 test -z "$1" && exit 0
 
 ## This is the top build directory.
-abs_top_build_dir="/home/rodrigob/java/antlr-2.7.5"
+abs_top_build_dir="/home/urilith/development/nmodule/lib/antlr-2.7.5"
 
 ## If $ANTLR_JAR is given as environment variable we are going
 ## to use it, otherwise we are using configured value. The value
@@ -33,7 +33,7 @@
 
 
 test -z "${antlr_jar}" && {
-  for x in "/home/rodrigob/java/antlr-2.7.5/antlr/antlr.jar" ${abs_top_build_dir}/antlr.jar ${abs_top_build_dir}/lib/antlr.jar 
+  for x in "/home/urilith/development/nmodule/lib/antlr-2.7.5/antlr/antlr.jar" ${abs_top_build_dir}/antlr.jar ${abs_top_build_dir}/lib/antlr.jar 
    do
    test -f "${x}" -o -d "${x}" && {
      antlr_jar="$x"
@@ -62,7 +62,7 @@
 
 cmd=""
 if test -f "${antlr_jar}" ; then
-  cmd="/usr/bin/java  -classpath ${classpath} antlr.Tool ${ANTLRFLAGS}"
+  cmd="/opt/blackdown-jdk-1.4.2.01/bin/java  -classpath ${classpath} antlr.Tool ${ANTLRFLAGS}"
 else
   ### Ok, so there's no $cmd yet
   if test -n "" ; then
@@ -78,7 +78,7 @@
 Unable to compile ANTLR grammar file(s)
  $*
 Reason(s): 
- (a) there's no /home/rodrigob/java/antlr-2.7.5/antlr/antlr.jar
+ (a) there's no /home/urilith/development/nmodule/lib/antlr-2.7.5/antlr/antlr.jar
  (b) there's no ${abs_top_build_dir}/antlr.jar
  (c) there's no ${abs_top_build_dir}/lib/antlr.jar
  (d) options --with-antlr-jar --with-antlr-cmd not applied

Modified: trunk/lib/antlr-2.7.5/scripts/c.sh
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/c.sh	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/c.sh	2005-06-23 12:34:54 UTC (rev 24)
@@ -18,7 +18,7 @@
 fi
 
 ARCHFLAGS=
-INCLUDE="-I /home/rodrigob/java/antlr-2.7.5/scripts/../lib/cpp"
+INCLUDE="-I /home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../lib/cpp"
 DEBUG=
 EXTRA_CFLAGS=
 

Modified: trunk/lib/antlr-2.7.5/scripts/config.deps
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/config.deps	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/config.deps	2005-06-23 12:34:54 UTC (rev 24)
@@ -11,35 +11,35 @@
 ## used anyway (and should not be used).
 .SUFFIXES:
 
-Makefile :: /home/rodrigob/java/antlr-2.7.5/scripts/../$(subdir)/Makefile.in  \
-            /home/rodrigob/java/antlr-2.7.5/scripts/config.deps \
-					  /home/rodrigob/java/antlr-2.7.5/scripts/config.make \
-					  /home/rodrigob/java/antlr-2.7.5/scripts/config.vars \
-            /home/rodrigob/java/antlr-2.7.5/config.status
+Makefile :: /home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../$(subdir)/Makefile.in  \
+            /home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/config.deps \
+					  /home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/config.make \
+					  /home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/config.vars \
+            /home/urilith/development/nmodule/lib/antlr-2.7.5/config.status
 	@echo "*** update $(subdir)/Makefile"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES="$(subdir)/Makefile" /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES="$(subdir)/Makefile" /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/config.deps : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/config.deps.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/config.deps : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/config.deps.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/config.deps /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/config.deps /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/config.make : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/config.make.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/config.make : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/config.make.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/config.make /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/config.make /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/config.vars : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/config.vars.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/config.vars : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/config.vars.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/config.vars /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/config.vars /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/config.status : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../configure
+/home/urilith/development/nmodule/lib/antlr-2.7.5/config.status : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../configure
 	@echo "*** reconfigure $@ - stay tuned .."
-	@cd /home/rodrigob/java/antlr-2.7.5 && /bin/sh ./config.status -q --recheck
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && /bin/sh ./config.status -q --recheck
 	@echo "*** update all configured files .."
-	@cd /home/rodrigob/java/antlr-2.7.5 && /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && /bin/sh ./config.status -q
 
 ### In a pure devel mode there should be also a dependency listed on how
 ### to make configure out of  configure.in.  This  requires that usr has 
@@ -49,60 +49,60 @@
 ###   @rule_configure_configure_in@
 ###
 
-/home/rodrigob/java/antlr-2.7.5/scripts/antlr.sh : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/antlr.sh.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/antlr.sh : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/antlr.sh.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/antlr.sh /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/antlr.sh /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/cpp.sh : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/cpp.sh.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/cpp.sh : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/cpp.sh.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/cpp.sh /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/cpp.sh /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/csc.sh : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/csc.sh.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/csc.sh : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/csc.sh.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/csc.sh /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/csc.sh /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/cxx.sh : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/cxx.sh.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/cxx.sh : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/cxx.sh.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/cxx.sh /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/cxx.sh /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/jar.sh : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/jar.sh.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/jar.sh : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/jar.sh.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/jar.sh /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/jar.sh /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/javac.sh : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/javac.sh.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/javac.sh : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/javac.sh.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/javac.sh /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/javac.sh /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/java.sh : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/java.sh.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/java.sh : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/java.sh.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/java.sh /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/java.sh /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/lib.sh : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/lib.sh.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/lib.sh : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/lib.sh.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/lib.sh /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/lib.sh /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/link.sh : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/link.sh.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/link.sh : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/link.sh.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/link.sh /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/link.sh /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/pyinst.sh : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/pyinst.sh.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/pyinst.sh : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/pyinst.sh.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/pyinst.sh /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/pyinst.sh /bin/sh ./config.status -q
 
-/home/rodrigob/java/antlr-2.7.5/scripts/python.sh : \
-	/home/rodrigob/java/antlr-2.7.5/scripts/../scripts/python.sh.in
+/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/python.sh : \
+	/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../scripts/python.sh.in
 	@echo "*** update $@"
-	@cd /home/rodrigob/java/antlr-2.7.5 && CONFIG_FILES=scripts/python.sh /bin/sh ./config.status -q
+	@cd /home/urilith/development/nmodule/lib/antlr-2.7.5 && CONFIG_FILES=scripts/python.sh /bin/sh ./config.status -q
 
 
 ## This rule shall ensure that ANTLR_NET is up-to-date. The rule is a 
@@ -113,22 +113,22 @@
 ## already in. It is very important that  each Makefile[.in] sets the
 ## variable $(subdir) proper.
 
-/home/rodrigob/java/antlr-2.7.5/lib/antlr.runtime.dll :: 
+/home/urilith/development/nmodule/lib/antlr-2.7.5/lib/antlr.runtime.dll :: 
 	@ subdir="lib/csharp/src" ; \
     case $(subdir) in \
 	  $$subdir ) ;; \
-	  * ) d="/home/rodrigob/java/antlr-2.7.5/$$subdir" ; \
+	  * ) d="/home/urilith/development/nmodule/lib/antlr-2.7.5/$$subdir" ; \
         test -f "$$d/Makefile" && {  \
          $(MAKE) -C "$$d" $@ ; \
         } 	\
         ;; \
     esac
 
-/home/rodrigob/java/antlr-2.7.5/lib/antlr.astframe.dll :: 
+/home/urilith/development/nmodule/lib/antlr-2.7.5/lib/antlr.astframe.dll :: 
 	@ subdir="lib/csharp/ASTFrame" ; \
     case $(subdir) in \
 	  $$subdir ) ;; \
-	  * ) d="/home/rodrigob/java/antlr-2.7.5/$$subdir" ; \
+	  * ) d="/home/urilith/development/nmodule/lib/antlr-2.7.5/$$subdir" ; \
         test -f "$$d/Makefile" && {  \
          $(MAKE) -C "$$d" $@ ; \
         } 	\
@@ -136,11 +136,11 @@
     esac
 
 
-/home/rodrigob/java/antlr-2.7.5/antlr/antlr.jar ::
+/home/urilith/development/nmodule/lib/antlr-2.7.5/antlr/antlr.jar ::
 	@ subdir="antlr" ; \
     case $(subdir) in \
 	  $$subdir ) ;; \
-	  * ) d="/home/rodrigob/java/antlr-2.7.5/$$subdir" ; \
+	  * ) d="/home/urilith/development/nmodule/lib/antlr-2.7.5/$$subdir" ; \
         test -f "$$d/Makefile" && {  \
          $(MAKE) -C "$$d" $@ ; \
         } 	\
@@ -148,11 +148,11 @@
     esac
 
 
-/home/rodrigob/java/antlr-2.7.5/lib/cpp/src/libantlr.a ::
+/home/urilith/development/nmodule/lib/antlr-2.7.5/lib/cpp/src/libantlr.a ::
 	@ subdir="lib/cpp/src" ; \
     case $(subdir) in \
 	  $$subdir ) ;; \
-	  * ) d="/home/rodrigob/java/antlr-2.7.5/$$subdir" ; \
+	  * ) d="/home/urilith/development/nmodule/lib/antlr-2.7.5/$$subdir" ; \
         test -f "$$d/Makefile" && {  \
          $(MAKE) -C "$$d" $@ ; \
         } 	\

Modified: trunk/lib/antlr-2.7.5/scripts/config.vars
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/config.vars	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/config.vars	2005-06-23 12:34:54 UTC (rev 24)
@@ -3,15 +3,15 @@
 
 ## helper utilities ..
 INSTALL         = /usr/bin/install -c
-MKDIR           = /bin/mkdir
-RM              = /bin/rm
+MKDIR           = /usr/bin/mkdir
+RM              = /usr/bin/rm
 TAR             = /bin/tar
 TOUCH           = /bin/touch
-CHMOD           = /bin/chmod
-SED             = /bin/sed
+CHMOD           = /usr/bin/chmod
+SED             = /usr/bin/sed
 GREP            = /bin/grep
-CAT             = /bin/cat
-CHMOD           = /bin/chmod
+CAT             = /usr/bin/cat
+CHMOD           = /usr/bin/chmod
 
 # usual dribble
 exec_prefix     = ${prefix}
@@ -51,21 +51,21 @@
 versioneddir    = antlr-2.7.5
 
 # navigation 
-builddir        = /home/rodrigob/java/antlr-2.7.5
-buildtree       = /home/rodrigob/java/antlr-2.7.5
-sourcetree      = /home/rodrigob/java/antlr-2.7.5/scripts/..
+builddir        = /home/urilith/development/nmodule/lib/antlr-2.7.5
+buildtree       = /home/urilith/development/nmodule/lib/antlr-2.7.5
+sourcetree      = /home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/..
 
 ## Two abbrevs to shorten things. $(thisdir) shall be the current
 ## working  directory  as  absolute  name  and $(_srcdir) is it's 
 ## source dir companion. That means that  $(thisdir)/Makefile has
 ## been generated by $(_srcdir)/Makefile.in.
-_srcdir         = /home/rodrigob/java/antlr-2.7.5/scripts/../$(subdir)
-thisdir         = /home/rodrigob/java/antlr-2.7.5/$(subdir)
+_srcdir         = /home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../$(subdir)
+thisdir         = /home/urilith/development/nmodule/lib/antlr-2.7.5/$(subdir)
 
 # variable 'srcdir' is deprecated - use sourcetree
-srcdir          = /home/rodrigob/java/antlr-2.7.5/scripts/..
+srcdir          = /home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/..
 # variable 'objdir' is deprecated - use buildtree
-objdir          = /home/rodrigob/java/antlr-2.7.5
+objdir          = /home/urilith/development/nmodule/lib/antlr-2.7.5
 
 # other
 verbose         = 0
@@ -73,13 +73,13 @@
 ## SUBDIRS you want to exclude (separate them by using "|").
 SUBDIRS_NOT    := .
 
-CLR            = /usr/local/mono/bin/mono
+CLR            = /usr/bin/ilrun
 
-ANTLR_JAR      = /home/rodrigob/java/antlr-2.7.5/antlr/antlr.jar
-ANTLR_LIB      = /home/rodrigob/java/antlr-2.7.5/lib/cpp/src/libantlr.a
-ANTLR_NET      = /home/rodrigob/java/antlr-2.7.5/lib/antlr.runtime.dll
-ANTLR_PY       = /home/rodrigob/java/antlr-2.7.5/lib/python/antlr/python.py
-ASTFRAME_NET   = /home/rodrigob/java/antlr-2.7.5/lib/antlr.astframe.dll
+ANTLR_JAR      = /home/urilith/development/nmodule/lib/antlr-2.7.5/antlr/antlr.jar
+ANTLR_LIB      = /home/urilith/development/nmodule/lib/antlr-2.7.5/lib/cpp/src/libantlr.a
+ANTLR_NET      = /home/urilith/development/nmodule/lib/antlr-2.7.5/lib/antlr.runtime.dll
+ANTLR_PY       = /home/urilith/development/nmodule/lib/antlr-2.7.5/lib/python/antlr/python.py
+ASTFRAME_NET   = /home/urilith/development/nmodule/lib/antlr-2.7.5/lib/antlr.astframe.dll
 
 antlr_jar      = antlr.jar
 antlr_lib      = libantlr.a

Modified: trunk/lib/antlr-2.7.5/scripts/cpp.sh
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/cpp.sh	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/cpp.sh	2005-06-23 12:34:54 UTC (rev 24)
@@ -23,7 +23,7 @@
 ## use whitespace  to separate dirs, don't use compiler specific
 ## options like '-I' etc.  That will be added at runtime when we
 ## know what compiler is in use.
-CXXINCLUDE=". /home/rodrigob/java/antlr-2.7.5/scripts/../lib/cpp"
+CXXINCLUDE=". /home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../lib/cpp"
 
 test -z "${DEBUG}" && {
   DEBUG="0"

Modified: trunk/lib/antlr-2.7.5/scripts/csc.sh
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/csc.sh	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/csc.sh	2005-06-23 12:34:54 UTC (rev 24)
@@ -17,16 +17,16 @@
 ## source files:
 
 ## srcdir shall contain absolute path to package directory.
-srcdir="/home/rodrigob/java/antlr-2.7.5/scripts/.."
+srcdir="/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/.."
 
 ## objdir shall contain absolute path to this build directory.
-objdir="/home/rodrigob/java/antlr-2.7.5"
+objdir="/home/urilith/development/nmodule/lib/antlr-2.7.5"
 
 ## variable javac contains the canonical java compiler name.
 ## At point of writing known names are csc.
 csc="@csc@"
 
-antlr_net="/home/rodrigob/java/antlr-2.7.5/lib/antlr.runtime.dll"
+antlr_net="/home/urilith/development/nmodule/lib/antlr-2.7.5/lib/antlr.runtime.dll"
 
 ## When on cygwin we translage paths into DOS notation as 
 ## csc appears not to understand mixed notation.
@@ -84,7 +84,7 @@
 
 ## Command CHARPC is precomputed but user may override.
 test -z "${CSHARPC}" && {
-  CSHARPC="/usr/local/mono/bin/mcs"
+  CSHARPC="/usr/bin/cscc"
 }
 
 ## Compute the flags for well known compilers. Note that a user

Modified: trunk/lib/antlr-2.7.5/scripts/cxx.sh
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/cxx.sh	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/cxx.sh	2005-06-23 12:34:54 UTC (rev 24)
@@ -23,7 +23,7 @@
 ## use whitespace  to separate dirs, don't use compiler specific
 ## options like '-I' etc.  That will be added at runtime when we
 ## know what compiler is in use.
-CXXINCLUDE=". /home/rodrigob/java/antlr-2.7.5/scripts/../lib/cpp"
+CXXINCLUDE=". /home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../lib/cpp"
 
 test -z "${DEBUG}" && {
   DEBUG="0"

Modified: trunk/lib/antlr-2.7.5/scripts/jar.sh
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/jar.sh	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/jar.sh	2005-06-23 12:34:54 UTC (rev 24)
@@ -29,7 +29,7 @@
 
 ## Command JAR is precomputed but user may override.
 if test -z "${JAR}" ; then
-  JAR="/usr/bin/jar"
+  JAR="/opt/blackdown-jdk-1.4.2.01/bin/jar"
   jar="jar"
 else
   jar="`basename $JAR`"

Modified: trunk/lib/antlr-2.7.5/scripts/java.sh
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/java.sh	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/java.sh	2005-06-23 12:34:54 UTC (rev 24)
@@ -3,9 +3,9 @@
   verbose=0
 }
 
-abs_top_build_dir=/home/rodrigob/java/antlr-2.7.5/scripts/../.
-java_cmd="/usr/bin/java"
-antlr_jar="/home/rodrigob/java/antlr-2.7.5/antlr/antlr.jar"
+abs_top_build_dir=/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../.
+java_cmd="/opt/blackdown-jdk-1.4.2.01/bin/java"
+antlr_jar="/home/urilith/development/nmodule/lib/antlr-2.7.5/antlr/antlr.jar"
 ARGV="$*"
 
 case linux-gnu in

Modified: trunk/lib/antlr-2.7.5/scripts/javac.sh
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/javac.sh	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/javac.sh	2005-06-23 12:34:54 UTC (rev 24)
@@ -17,17 +17,17 @@
 ## Java source files.
 
 ## srcdir shall contain absolute path to package directory.
-srcdir="/home/rodrigob/java/antlr-2.7.5/scripts/.."
+srcdir="/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/.."
 
 ## objdir shall contain absolute path to this build directory.
-objdir="/home/rodrigob/java/antlr-2.7.5"
+objdir="/home/urilith/development/nmodule/lib/antlr-2.7.5"
 
 ## bootclasspath shall contain jar or zip file required to
 ## boot Javac. An example where this variable is used is 
 ## jikes. Note, this variable can be plain empty.
 bootclasspath=""
 
-classpath="/home/rodrigob/java/antlr-2.7.5/antlr/antlr.jar"
+classpath="/home/urilith/development/nmodule/lib/antlr-2.7.5/antlr/antlr.jar"
 
 case linux-gnu in
   cygwin)
@@ -68,7 +68,7 @@
 
 ## Command JAVAC is precomputed but user may override.
 if test -z "${JAVAC}" ; then
-  JAVAC="/usr/bin/javac"
+  JAVAC="/opt/blackdown-jdk-1.4.2.01/bin/javac"
   javac="javac"
 else
   javac=`basename $JAVAC`

Modified: trunk/lib/antlr-2.7.5/scripts/lib.sh
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/lib.sh	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/lib.sh	2005-06-23 12:34:54 UTC (rev 24)
@@ -23,7 +23,7 @@
 }
 
 RANLIB="ranlib"
-LIBNAME="/home/rodrigob/java/antlr-2.7.5/lib/cpp/src/libantlr.a"
+LIBNAME="/home/urilith/development/nmodule/lib/antlr-2.7.5/lib/cpp/src/libantlr.a"
 
 ##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##
 ##             Prepate input arguments                    ##

Modified: trunk/lib/antlr-2.7.5/scripts/link.sh
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/link.sh	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/link.sh	2005-06-23 12:34:54 UTC (rev 24)
@@ -12,7 +12,7 @@
 CXX="g++"
 CXXFLAGS=""
 
-LIBNAME="/home/rodrigob/java/antlr-2.7.5/lib/cpp/src/libantlr.a"
+LIBNAME="/home/urilith/development/nmodule/lib/antlr-2.7.5/lib/cpp/src/libantlr.a"
 TARGET="$1" ; shift
 
 ##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##

Modified: trunk/lib/antlr-2.7.5/scripts/pyantlr.sh
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/pyantlr.sh	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/pyantlr.sh	2005-06-23 12:34:54 UTC (rev 24)
@@ -7,7 +7,7 @@
 dstdir = '/usr/local/share/antlr-2.7.5'
 
 ## This is where module 'antlr' resides in the source distribution'
-srcdir = '/home/rodrigob/java/antlr-2.7.5/scripts/../lib/python/antlr'
+srcdir = '/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../lib/python/antlr'
 moddir = None
 
 for d in [ dstdir, srcdir ] :

Modified: trunk/lib/antlr-2.7.5/scripts/python.sh
===================================================================
--- trunk/lib/antlr-2.7.5/scripts/python.sh	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/lib/antlr-2.7.5/scripts/python.sh	2005-06-23 12:34:54 UTC (rev 24)
@@ -11,7 +11,7 @@
 }
 
 cmd=/usr/bin/python
-PYTHONPATH=/home/rodrigob/java/antlr-2.7.5/scripts/../lib/python
+PYTHONPATH=/home/urilith/development/nmodule/lib/antlr-2.7.5/scripts/../lib/python
 export PYTHONPATH
 ARGV="$*"
 

Modified: trunk/nmodule.mds
===================================================================
--- trunk/nmodule.mds	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/nmodule.mds	2005-06-23 12:34:54 UTC (rev 24)
@@ -1,43 +1,35 @@
 <Combine name="nmodule" fileversion="2.0">
   <Configurations>
     <Configuration name="Debug" ctype="CombineConfiguration">
-      <Entry build="True" name="Documentation" />
       <Entry build="True" name="NModule.Dependency.Parser" />
       <Entry build="True" name="NModule.Dependency.Parser" />
       <Entry build="True" name="NModule.Core.Loader" />
       <Entry build="True" name="NModule.Core.Module" />
       <Entry build="True" name="NModule.Dependency.Core" />
-      <Entry build="True" name="NModule.Dependency.Resolver" />
       <Entry build="True" name="NModule.Core" />
     </Configuration>
     <Configuration name="Release" ctype="CombineConfiguration">
-      <Entry build="True" name="Documentation" />
       <Entry build="True" name="NModule.Dependency.Parser" />
       <Entry build="True" name="NModule.Dependency.Parser" />
       <Entry build="True" name="NModule.Core.Loader" />
       <Entry build="True" name="NModule.Core.Module" />
       <Entry build="True" name="NModule.Dependency.Core" />
-      <Entry build="True" name="NModule.Dependency.Resolver" />
       <Entry build="True" name="NModule.Core" />
     </Configuration>
   </Configurations>
-  <StartMode startupentry="Documentation" single="True">
-    <Execute type="None" entry="Documentation" />
+  <StartMode startupentry="NModule.Dependency.Parser" single="True">
     <Execute type="None" entry="NModule.Dependency.Parser" />
     <Execute type="None" entry="NModule.Dependency.Parser" />
     <Execute type="None" entry="NModule.Core.Loader" />
     <Execute type="None" entry="NModule.Core.Module" />
     <Execute type="None" entry="NModule.Dependency.Core" />
-    <Execute type="None" entry="NModule.Dependency.Resolver" />
     <Execute type="None" entry="NModule.Core" />
   </StartMode>
   <Entries>
-    <Entry filename="./doc/Documentation.mdp" />
     <Entry filename="./src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp" />
     <Entry filename="./src/NModule.Core.Loader/NModule.Core.Loader.mdp" />
     <Entry filename="./src/NModule.Core.Module/NModule.Core.Module.mdp" />
     <Entry filename="./src/NModule.Dependency.Core/NModule.Dependency.Core.mdp" />
-    <Entry filename="./src/NModule.Dependency.Resolver/NModule.Dependency.Resolver.mdp" />
     <Entry filename="./src/NModule.Core/NModule.Core.mdp" />
   </Entries>
 </Combine>
\ No newline at end of file

Modified: trunk/src/NModule.Core/IModule.cs
===================================================================
--- trunk/src/NModule.Core/IModule.cs	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core/IModule.cs	2005-06-23 12:34:54 UTC (rev 24)
@@ -1,7 +1,33 @@
-// project created on 6/23/2005 at 3:28 AM
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
 using System;
 
-public class MyClass
-{
-
+namespace NModule.Core {
+	public interface IModule {
+		void ModuleEntry (object controller);
+		
+		void ModuleExit (object controller);
+	}
 }
\ No newline at end of file

Modified: trunk/src/NModule.Core/ModuleRoleAttribute.cs
===================================================================
--- trunk/src/NModule.Core/ModuleRoleAttribute.cs	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core/ModuleRoleAttribute.cs	2005-06-23 12:34:54 UTC (rev 24)
@@ -28,7 +28,7 @@
 	public class ModuleRoleAttribute : Attribute {
 		protected string _roles;
 		
-		public ModuleDependencyAttribute (string role) {
+		public ModuleRoleAttribute (string role) {
 			_roles = role;
 		}
 		

Added: trunk/src/NModule.Core.Loader/CircularDependencyException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/CircularDependencyException.cs	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core.Loader/CircularDependencyException.cs	2005-06-23 12:34:54 UTC (rev 24)
@@ -0,0 +1,37 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+namespace NModule.Dependency.Resolver {
+	using System;
+	
+	public class CircularDependencyException : Exception {
+		public CircularDependencyException ( ) : base ( ) { }
+		
+		public CircularDependencyException (string _msg) : base (_msg) { }
+		
+		public CircularDependencyException (string _msg, Exception _exc) : base (_msg) { }
+	}
+}
+		
+		
\ No newline at end of file


Property changes on: trunk/src/NModule.Core.Loader/CircularDependencyException.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/src/NModule.Core.Loader/DepResolver.cs
===================================================================
--- trunk/src/NModule.Core.Loader/DepResolver.cs	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core.Loader/DepResolver.cs	2005-06-23 12:34:54 UTC (rev 24)
@@ -0,0 +1,396 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+
+namespace NModule.Dependency.Resolver {
+	using System;
+	using System.Collections;
+	using System.IO;
+	using System.Reflection;
+	using System.Text;
+	
+	using NModule.Dependency.Core;
+	using NModule.Core.Loader;
+	using NModule.Core.Module;
+	
+	public class DepResolver {
+#region Members
+		// ModuleController used for loading modules to sastify dependencies.
+		protected ModuleController _controller;
+		
+		// Search Path for modules
+		protected ArrayList _search_path;
+#endregion
+
+#region Constructor
+		public DepResolver (ModuleController controller, ArrayList search_path) {
+			_controller = controller;
+			_search_path = search_path;
+		}
+#endregion
+
+#region Internal Helper Functions
+		protected string SearchForModule (string _name) {
+			foreach (string s in _search_path) {
+				if (Directory.Exists (s)) {
+					foreach (string f in Directory.GetFiles (s, "*.dll")) {
+						if (f.Substring (0, f.Length - 4) == _name) {
+							return s + "/" + f;
+						}
+					}
+				}
+			}
+			
+			return null;
+		}
+		
+		protected void OpResolve (DepNode _node, ArrayList _parents, ModuleInfo _info, bool checking) {
+			bool _ret;
+			DepOps _op = _node.DepOp;
+			DepConstraint _constraint = _node.Constraint;
+			if ((_op == DepOps.And) || (_op == DepOps.Not) || (_op == DepOps.Opt) || (_op == DepOps.Or) || (_op == DepOps.Xor)) {
+				// combo-operators
+				ArrayList _results = new ArrayList ();
+				ArrayList _c = new ArrayList ();
+				foreach (DepNode _child in _node.Children) {
+					try {
+						OpResolve (_child, _parents, _info, checking);
+						_results.Add (true);
+						_c.Add (_child.Constraint);
+					} catch (Exception e) {
+						_results.Add (false);
+						_c.Add (_child.Constraint);
+					}
+				}
+				
+				switch (_op) {
+					case DepOps.And:
+						int r = 0;
+						foreach (bool _result in _results) {
+							if (!_result) {
+								throw new UnresolvedDependencyException (
+									string.Format("The following dependency for the module {0} could not be resolved: (AND operator)\n\t{1} ({2})",
+										_info.Name, ((DepConstraint)_c[r]).Name, ((DepConstraint)_c[r]).Version)
+								);
+							}
+							r++;
+						}
+						break;
+					case DepOps.Not:
+						foreach (bool _result in _results) {
+							if (_result)
+								throw new UnresolvedDependencyException (
+									string.Format("The following dependency for the module {0} could not be resolved: (NOT operator)\n\t{1} ({2})",
+										_info.Name, ((DepConstraint)_c[r]).Name, ((DepConstraint)_c[r]).Version)
+								);
+						}
+						break;
+					case DepOps.Opt: // This is optional so stuff is true regardless
+						break;
+					case DepOps.Or:
+						_ret = false;
+						ArrayList _urexc = new ArrayList ();
+						r = 0;
+						foreach (bool _result in _results) {
+							if (_result)
+								_ret = true;
+							else {
+								_urexc.Add (string.Format("{1} ({2})", _info.Name, ((DepConstraint)_c[r]).Name, ((DepConstraint)_c[r]).Version));
+							}
+							r++;
+						}
+						
+						if (!_ret) {
+							StringBuilder _sb = new StringBuilder (
+								string.Format("The following dependency for the module {0} could not be resolved: (OR operator)\n")
+							);
+							foreach (string _exc in _urexc) {
+								_sb.Append(string.Format("\t{0}\n", _exc));
+							}
+							throw new UnresolvedDependencyException (_sb.ToString ());
+						}
+						break;
+					case DepOps.Xor:
+						bool _xt = true;
+						bool _xf = true;
+						ArrayList _xexc = new ArrayList ();
+				
+						r = 0;
+						_ret = true;
+						
+						foreach (bool _result in _results) {
+							if (_result) {
+								_xf = false;
+								_xexc.Add (string.Format("{1} ({2}) (True)", _info.Name, ((DepConstraint)_c[r]).Name, ((DepConstraint)_c[r]).Version));
+							}
+							if (!_result) {
+								_xt = false;
+								_xexc.Add (string.Format("{1} ({2}) (False)", _info.Name, ((DepConstraint)_c[r]).Name, ((DepConstraint)_c[r]).Version));
+							}
+							r++;
+						}
+						
+						if (_xt || _xf)
+							_ret = false;
+							
+						if (!_ret) {
+							StringBuilder _sb = new StringBuilder (
+								string.Format ("The following dependency for the module {0} could not be resolved: (XOR operator)\n")
+							);
+							foreach (string _exc in _xexc) {
+								_sb.Append (string.Format("\t{0}\n", _exc));
+							}
+							throw new UnresolvedDependencyException (_sb.ToString ());
+						}
+						break;
+				}
+			} else {
+				// single operators
+				if (SearchForModule (_constraint.Name) == null)
+					_ret = false;
+		
+				ModuleInfo _ninfo;
+						
+				ModuleLoader _loader = new ModuleLoader (_search_path, this);
+						
+				_loader.LoadModule (_parents, _constraint.Name, out _ninfo, true);
+				
+				if ((_op == DepOps.Equal) || (_op == DepOps.GreaterThan) || (_op == DepOps.GreaterThanEqual) || (_op == DepOps.LessThan)
+					|| (_op == DepOps.LessThanEqual) || (_op == DepOps.NotEqual)) {
+					if (!IsEmptyVersion (_constraint.Version)) {
+						if (!VersionMatch (_constraint.Version, _ninfo.Version, _op)) {
+							throw new UnresolvedDependencyException (
+								string.Format("The following dependency for the module {0} could not be resolved: ({3} operator)\n\t{1} ({2})",
+									_info.Name, _constraint.Name, _constraint.Version, OpToString (_op))
+							);
+						}
+					}
+					if (!checking) {
+						_controller.LoadModule (_constraint.Name);
+					}		
+				}
+				// we got this far, so obviously it loaded okay
+			}		
+		}
+		
+		protected string OpToString (DepOps _op) {
+			switch (_op)
+			{
+				case DepOps.And:
+					return "&&";
+				case DepOps.Equal:
+					return "==";
+				case DepOps.GreaterThan:
+					return ">>";
+				case DepOps.GreaterThanEqual:
+					return ">=";
+				case DepOps.LessThan:
+					return "<<";
+				case DepOps.LessThanEqual:
+					return "<=";
+				case DepOps.Loaded:
+					return "##";
+				case DepOps.Not:
+					return "!!";
+				case DepOps.NotEqual:
+					return "!=";
+				case DepOps.Opt:
+					return "??";
+				case DepOps.Or:
+					return "||";
+				case DepOps.Xor:
+					return "^^";
+			}
+			
+			return "";
+		}
+		
+		protected bool IsEmptyVersion (DepVersion _ver) {
+			return ((_ver.Major == -1) && (_ver.Minor == -1) && (_ver.Build == -1) && (_ver.Revision == -1));
+		}
+		
+		protected bool VersionMatch (DepVersion _dver, DepVersion _ver, DepOps _op) {
+			bool mjgt = false, mngt = false, bgt = false, rgt = false;
+			bool mjeq = false, mneq = false, beq = false, req = false;
+			bool mjlt = false, mnlt = false, blt = false, rlt = false;
+			bool mji = false, mni = false, bi = false, ri = false;
+			
+			if (_dver.Major == -1) {
+				mji = true;
+			} else if (_dver.Major > _ver.Major) {
+				mjgt = true;
+			} else if (_dver.Major == _ver.Major) {
+				mjeq = true;
+			} else {
+				mjlt = true;
+			}
+			
+			if (_dver.Minor == -1) {
+				mni = true;
+			} else if (_dver.Minor > _ver.Minor) {
+				mngt = true;
+			} else if (_dver.Minor == _ver.Minor) {
+				mneq = true;
+			} else {
+				mnlt = true;
+			}
+			
+			if (_dver.Build == -1) {
+				bi = true;
+			} else if (_dver.Build > _ver.Build) {
+				bgt = true;
+			} else if (_dver.Build == _ver.Build) {
+				beq = true;
+			} else {
+				blt = true;
+			}
+			
+			if (_dver.Revision == -1) {
+				ri = true;
+			} else if (_dver.Revision > _ver.Revision) {
+				rgt = true;
+			} else if (_dver.Revision == _ver.Revision) {
+				req = true;
+			} else {
+				rlt = true;
+			}
+
+			if (mji)
+				return true;
+									
+			if ((_op == DepOps.Equal) || (_op == DepOps.GreaterThanEqual) || (_op == DepOps.LessThanEqual)) {					
+					if (mjeq && mni)
+						return true;
+						
+					if (mjeq && mneq && bi)
+						return true;
+						
+					if (mjeq && mneq && beq && ri)
+						return true;
+					
+					if (mjeq && mneq && beq && req)
+						return true;
+			}
+			
+			if (_op == DepOps.NotEqual) {
+				if (!mjeq && mni)
+					return true;
+					
+				if (!mjeq && !mneq && bi)
+					return true;
+					
+				if (!mjeq && !mneq && !beq && ri)
+					return true;
+					
+				if (!mjeq && !mneq && !beq && !req)
+					return true;
+			}
+			
+			if (_op == DepOps.GreaterThan) {
+				if (mjlt)
+					return false;
+					
+				if (mjgt)
+					return true;
+				
+				if (mjeq && mnlt)
+					return false;
+					
+				if (mngt)
+					return true;
+					
+				if (mjeq && mneq && blt)
+					return false;
+					
+				if (bgt)
+					return true;
+					
+				if (mjeq && mneq && beq && rlt)
+					return false;
+					
+				if (rgt)
+					return true;
+			}
+			
+			if (_op == DepOps.LessThan) {
+				if (mjgt)
+					return false;
+					
+				if (mjlt)
+					return true;
+				
+				if (mjeq && mngt)
+					return false;
+					
+				if (mnlt)
+					return true;
+					
+				if (mjeq && mneq && bgt)
+					return false;
+					
+				if (blt)
+					return true;
+					
+				if (mjeq && mneq && beq && rgt)
+					return false;
+					
+				if (rlt)
+					return true;
+			}
+			
+			if (_op == DepOps.Loaded)
+				return true;
+				
+			
+			return false;
+		}
+				
+		protected void InternalResolve (ArrayList _parents, ModuleInfo _info, bool checking) {
+			if (_info.Dependencies == null)
+				return;
+			
+			DepNode _node = _info.Dependencies;
+			
+			foreach (string _parent in _parents) {
+				if (_node.Constraint.Name == _parent) {
+					throw new CircularDependencyException (
+						string.Format("The module {0} is depending on {1} which is depending on {0}, causing a circular dependency.",
+							_parent, _info.Name, _parent)
+					);
+				}
+			}
+			OpResolve (_node, _parents, _info, checking);			
+		}
+#endregion
+
+#region Resolvers
+		public void ResolveCheck (ArrayList _parents, ModuleInfo _info) {
+			InternalResolve (_parents, _info, true);
+		}
+		
+		public void Resolve (ArrayList _parents, ModuleInfo _info) {
+			InternalResolve (_parents, _info, false);
+		}
+#endregion
+	}
+}
\ No newline at end of file

Added: trunk/src/NModule.Core.Loader/DomainStillReferencedException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/DomainStillReferencedException.cs	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core.Loader/DomainStillReferencedException.cs	2005-06-23 12:34:54 UTC (rev 24)
@@ -0,0 +1,35 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+namespace NModule.Core.Module {
+	using System;
+	
+	public class DomainStillReferencedException : Exception {
+		public DomainStillReferencedException ( ) : base ( ) { }
+		
+		public DomainStillReferencedException (string _msg) : base (_msg) { }
+		
+		public DomainStillReferencedException (string _msg, Exception _exc) : base (_msg) { }
+	}
+}
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/ModuleController.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-23 12:34:54 UTC (rev 24)
@@ -26,6 +26,7 @@
 using System.Collections;
 using System.IO;
 using System.Reflection;
+using NModule.Dependency.Core;
 using NModule.Dependency.Resolver;
 using NModule.Core.Module;
 
@@ -73,9 +74,15 @@
 		}
 		
 		public void LoadModule (ArrayList _parents, string _name) {
+			if (_app_domain_map.ContainsKey (_name))
+			{
+				IncRef ((AppDomain)_app_domain_map[_name]);
+				return; // Already loaded, no need to load it again.
+			}
+			
 			ModuleInfo _info;
 			
-			AppDomain _domain = _loader.LoadModule (_parents, _name, out _info);
+			AppDomain _domain = _loader.LoadModule (_parents, _name, out _info, false);
 			
 			// set up the map
 			_app_domain_map.Add (_name, _domain);
@@ -86,7 +93,6 @@
 			// increment the reference count for all the dependencies recursively (i.e.
 			// if module A depends on B which depends on C, B gets inc ref'd once, while C
 			// gets inc ref'd twice, for both A and B).
-			_resolver.IncRefs (_info);
 			
 			// Set up roles.
 			CallRoleHandlers (_info);
@@ -98,6 +104,13 @@
 			CallEntryHandler (_domain.GetAssemblies()[0]);
 		}
 		
+		protected void DecRefs (DepNode _x) {
+			foreach (DepNode _d in _x.Children) {
+				DecRefs (_d);
+			}
+			DecRef ((AppDomain)_app_domain_map[_x.Constraint.Name]);
+		}
+		
 		public void UnloadModule (string _name) {
 			// This is fun stuff.  We can't unload a module any of the following conditions fail:
 			//  1) The module must be a top-level node in the dep map, i.e no other modules can
@@ -105,12 +118,12 @@
 			//  2) The reference count on the appdomain must be 1, which means the only thing
 			//  using this appdomain is the module inside of it.
 			
-			if (!_domain_map.Contains (_name))
+			if (!_app_domain_map.ContainsKey (_name))
 				return; // suckers not loaded, why are we unloading it?
 			
 			ModuleInfo _info = (ModuleInfo)_info_map[_name];
 			
-			AppDomain _domain = (AppDomain)_domain_map[_name];
+			AppDomain _domain = (AppDomain)_app_domain_map[_name];
 			if (((int)_ref_counts[_domain]) > 1) {
 				throw new DomainStillReferencedException (string.Format ("The domain holding the module {0} cannot be unloaded because it is still being referenced.", _name));
 			}
@@ -118,8 +131,12 @@
 			// okay, everything's good.  This will remove the domain from the reference list since its reference count is now 0.
 			DecRef (_domain);
 			
+			DepNode _root = _info.Dependencies;
+						
+			DecRefs (_root);
+			
 			// okay, lets remove the domain map association
-			_domain_map.Remove (_name);
+			_app_domain_map.Remove (_name);
 			
 			// the info map needs to go too
 			_info_map.Remove (_name);
@@ -131,7 +148,7 @@
 			CallExitHandler (_domain.GetAssemblies()[0]);
 			
 			// And finally, unload the domain.
-			_domain.Unload ();
+			AppDomain.Unload (_domain);
 		}
 #endregion
 
@@ -145,7 +162,7 @@
 		}
 		
 		protected void DecRef (AppDomain _domain) {
-			if (!_ref_counts.Contains (_domain)) {
+			if (!_ref_counts.Contains (_domain))
 				return;
 				
 			_ref_counts[_domain] = ((int)_ref_counts[_domain]) - 1;
@@ -168,7 +185,7 @@
 		protected void CallRoleHandlers (ModuleInfo _info) {
 			foreach (string _myRole in _info.Roles.Split(',')) {
 				foreach (ModuleRole _role in _roles) {
-					if (_role.Name == _myRole) {
+					if (_role.RoleName == _myRole) {
 						Assembly _asm = _info.Owner;
 						
 						Type _type = null;
@@ -201,7 +218,7 @@
 		protected void CallRoleUnregisterHandlers (ModuleInfo _info) {
 			foreach (string _myRole in _info.Roles.Split(',')) {
 				foreach (ModuleRole _role in _roles) {
-					if (_role.Name == _myRole) {
+					if (_role.RoleName == _myRole) {
 						Assembly _asm = _info.Owner;
 						
 						Type _type = null;
@@ -224,7 +241,7 @@
 							continue; // don't have a type for this role.
 						}
 						
-						_role.UnregistrationHandler (_asm, _type);
+						_role.UnregistrationHandler (_asm);
 					}
 				}
 			}
@@ -234,22 +251,22 @@
 #region Entry/Exit Handlers
 		protected void CallEntryHandler (Assembly _asm) {
 			foreach (Type _type in _asm.GetTypes ()) {
-				if (_type.GetInterface (typeof (NModule.Core.Module.IModule)) != null) {
+				if (_type.GetInterface (typeof (NModule.Core.IModule).ToString()) != null) {
 					MethodInfo _method = _type.GetMethod ("ModuleEntry");
 		
 					if (_method != null)			
-						_method.Invoke (null, BindingFlags.Static | BindingFlags.Public, (new object[] { this }), null);
+						_method.Invoke (null, BindingFlags.Static | BindingFlags.Public, null, (new object[] { this }), null);
 				}
 			}
 		}
 		
-		protected void CallEntryHandler (Assembly _asm) {
+		protected void CallExitHandler (Assembly _asm) {
 			foreach (Type _type in _asm.GetTypes ()) {
-				if (_type.GetInterface (typeof (NModule.Core.Module.IModule)) != null) {
+				if (_type.GetInterface (typeof (NModule.Core.IModule).ToString()) != null) {
 					MethodInfo _method = _type.GetMethod ("ModuleExit");
 					
 					if (_method != null)
-						_method.Invoke (null, BindingFlags.Static | BindingFlags.Public, (new object[] { this }), null);
+						_method.Invoke (null, BindingFlags.Static | BindingFlags.Public, null, (new object[] { this }), null);
 				}
 			}
 		}

Modified: trunk/src/NModule.Core.Loader/ModuleLoader.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-23 12:34:54 UTC (rev 24)
@@ -24,6 +24,7 @@
  
 using System;
 using System.Collections;
+using System.IO;
 using System.Reflection;
 using NModule.Dependency.Resolver;
 using NModule.Core.Module;
@@ -39,7 +40,7 @@
 		
 		protected DepResolver _resolver;
 		
-		public ModuleLoader (string search_path, DepResolver resolver) {
+		public ModuleLoader (ArrayList search_path, DepResolver resolver) {
 			_search_path = search_path;
 			_resolver = resolver;
 		}
@@ -48,8 +49,8 @@
 		protected byte[] LoadRawFile (string _filename) {
 			FileStream _fs = new FileStream (_filename, FileMode.Open);
 			byte[] _buffer = new byte [(int) _fs.Length];
-			fs.Read (_buffer, 0, _buffer.Length);
-			fs.Close ();
+			_fs.Read (_buffer, 0, _buffer.Length);
+			_fs.Close ();
    
 			return _buffer;
 		}
@@ -58,7 +59,7 @@
 			foreach (string s in _search_path) {
 				if (Directory.Exists (s)) {
 					foreach (string f in Directory.GetFiles (s, "*.dll")) {
-						if (f.SubString (0, f.Length - 4) == _name) {
+						if (f.Substring (0, f.Length - 4) == _name) {
 							return s + "/" + f;
 						}
 					}
@@ -74,17 +75,13 @@
 		 * parents list.  The parents list is used for detecting circular dependencies.
 		 */
 		public AppDomain LoadModule (string _name, out ModuleInfo _info) {
-			return LoadModule (null, _name, out _info);
+			return LoadModule (null, _name, out _info, false);
 		}
 		
-		public AppDomain LoadModule (ArrayList _parents, string _name, out ModuleInfo _info, bool checking=false) {
+		public AppDomain LoadModule (ArrayList _parents, string _name, out ModuleInfo _info, bool checking) {
 			// Okay, this is tricky.  First, we have to load the module into a temp domain
 			// to retrieve its module info.  Then, we have to attempt to resolve the dependencies.
 			// This is going to be fun.  Heh.
-			
-			if (_app_domain_map.HasKey (_name))
-				return; // Already loaded, no need to load it again.
-				
 			if (_parents == null)
 				_parents = new ArrayList ();
 				
@@ -108,7 +105,7 @@
 			try {
 				_tempDomain.Load (_raw_bytes);
 			} catch (BadImageFormatException e) {
-				throw ModuleImageException (e.Message);
+				throw new ModuleImageException (e.Message);
 			}
 			
 			// Okay, now lets grab the module info from the assembly attributes.
@@ -117,12 +114,12 @@
 			try {
 				_info = new ModuleInfo (_asm);
 			} catch (ModuleInfoException e) {
-				throw InvalidModuleException (e.Message);
+				throw new InvalidModuleException (e.Message);
 			}
 			
 			// unload the temp domain since its unneeded now.
 			
-			_tempDomain.Unload ();
+			AppDomain.Unload (_tempDomain);
 			
 			// okay, now we've got the info, let's do some magic with the dependencies.
 			// this will recursively load all of the appropriate assemblies as per the parsed

Modified: trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp
===================================================================
--- trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core.Loader/NModule.Core.Loader.mdp	2005-06-23 12:34:54 UTC (rev 24)
@@ -16,7 +16,6 @@
   <References>
     <ProjectReference type="Project" localcopy="True" refto="NModule.Core.Module" />
     <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Core" />
-    <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Resolver" />
     <ProjectReference type="Project" localcopy="True" refto="NModule.Core" />
   </References>
   <DeploymentInformation strategy="File">
@@ -29,5 +28,9 @@
     <File name="./ModuleImageException.cs" subtype="Code" buildaction="Compile" />
     <File name="./ModuleNotFoundException.cs" subtype="Code" buildaction="Compile" />
     <File name="./ModuleController.cs" subtype="Code" buildaction="Compile" />
+    <File name="./CircularDependencyException.cs" subtype="Code" buildaction="Compile" />
+    <File name="./DepResolver.cs" subtype="Code" buildaction="Compile" />
+    <File name="./UnresolvedDependencyException.cs" subtype="Code" buildaction="Compile" />
+    <File name="./DomainStillReferencedException.cs" subtype="Code" buildaction="Compile" />
   </Contents>
 </Project>
\ No newline at end of file

Added: trunk/src/NModule.Core.Loader/UnresolvedDependencyException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/UnresolvedDependencyException.cs	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core.Loader/UnresolvedDependencyException.cs	2005-06-23 12:34:54 UTC (rev 24)
@@ -0,0 +1,35 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+namespace NModule.Dependency.Resolver {
+	using System;
+	
+	public class UnresolvedDependencyException : Exception {
+		public UnresolvedDependencyException ( ) : base ( ) { }
+		
+		public UnresolvedDependencyException (string _msg) : base (_msg) { }
+		
+		public UnresolvedDependencyException (string _msg, Exception _exc) : base (_msg) { }
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/NModule.Core.Loader/UnresolvedDependencyException.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Modified: trunk/src/NModule.Core.Module/ModuleInfo.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-23 12:34:54 UTC (rev 24)
@@ -45,11 +45,14 @@
 		// roles
 		protected string _roles;
 		
+		// owner
+		protected Assembly _owner;
+		
 		public ModuleInfo (Assembly _asm) {
 			_name = _asm.GetName().Name;
-			_version = DepVersion.VersionParse (_asm.GetName().Version);
+			_version = DepVersion.VersionParse (_asm.GetName().Version.ToString ());
 			
-			ModuleDependencyAttribute _depAttr = ((ModuleDependencyAttribute)_asm.GetCustomAttributes (typeof (ModuleDependencyAttribute)));
+			ModuleDependencyAttribute _depAttr = ((ModuleDependencyAttribute)(_asm.GetCustomAttributes (typeof (ModuleDependencyAttribute), false)[0]));
 			
 			if (_depAttr != null) {	
 				DepLexer _lexer = new DepLexer (new StringReader (_depAttr.DepString));
@@ -60,14 +63,16 @@
 				
 				_parser.expr (_dependencies);
 			} else
-				_depenencies = null;
+				_dependencies = null;
 				
-			ModuleRoleAttribute _roleAttr = ((ModuleRoleAttribute)_asm.GetCustomAttributes (typeof (ModuleRoleAttribute));
+			ModuleRoleAttribute _roleAttr = ((ModuleRoleAttribute)(_asm.GetCustomAttributes (typeof (ModuleRoleAttribute), false)[0]));
 			
 			if (_roleAttr != null) {
 				_roles = _roleAttr.Roles;
 			} else
-				_roles = null;
+				throw new ModuleInfoException (string.Format ("The module {0} has no defined roles, and is not a valid NModule module.", _asm.GetName ().Name));
+				
+			_owner = _asm;
 		}
 		
 		public string Name {
@@ -93,5 +98,11 @@
 				return _roles;
 			}
 		}
+		
+		public Assembly Owner {
+			get {
+				return _owner;
+			}
+		}
 	}		
 }

Added: trunk/src/NModule.Core.Module/ModuleInfoException.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleInfoException.cs	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core.Module/ModuleInfoException.cs	2005-06-23 12:34:54 UTC (rev 24)
@@ -0,0 +1,35 @@
+/**************************************************************************
+ * Copyright (c) 2005 Michael Tindal and the individuals listed           *
+ * on the ChangeLog entries.                                              *
+ *                                                                        *
+ * Permission is hereby granted, free of charge, to any person obtaining  *
+ * a copy of this software and associated documentation files (the        *
+ * "Software"), to deal in the Software without restriction, including    *
+ * without limitation the rights to use, copy, modify, merge, publish,    *
+ * distribute, sublicense, and/or sell copies of the Software, and to     *
+ * permit persons to whom the Software is furnished to do so, subject to  *
+ * the following conditions                                               *
+ *                                                                        *
+ * The above copyright notice and this permission notice shall be         *
+ * included in all copies or substantial portions of the Software.        *
+ *                                                                        *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
+ * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
+ * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
+ **************************************************************************/
+ 
+namespace NModule.Core.Module {
+	using System;
+	
+	public class ModuleInfoException : Exception {
+		public ModuleInfoException ( ) : base ( ) { }
+		
+		public ModuleInfoException (string _msg) : base (_msg) { }
+		
+		public ModuleInfoException (string _msg, Exception _exc) : base (_msg) { }
+	}
+}
\ No newline at end of file

Modified: trunk/src/NModule.Core.Module/ModuleRole.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleRole.cs	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core.Module/ModuleRole.cs	2005-06-23 12:34:54 UTC (rev 24)
@@ -27,9 +27,9 @@
 using System.Reflection;
 
 namespace NModule.Core.Module {
-	public delegate RoleRegisterHandler (Assembly asm, Type basetype);
+	public delegate void RoleRegisterHandler (Assembly asm, Type basetype);
 	
-	public delegate RoleUnregisterHandler (Assembly asm);
+	public delegate void RoleUnregisterHandler (Assembly asm);
 	
 	/*
 	 * This class handles the roles used by the module loader.
@@ -43,7 +43,7 @@
 		private Type _baseType;
 		private string _roleName;
 		private RoleRegisterHandler _regHandler;
-		private RoleUnregisterHandle _unregHandler;
+		private RoleUnregisterHandler _unregHandler;
 		
 		// Lets get this baby setup :)
 		public ModuleRole (string name, Type basetype, RoleRegisterHandler regHandler, RoleUnregisterHandler unregHandler) {

Modified: trunk/src/NModule.Core.Module/NModule.Core.Module.mdp
===================================================================
--- trunk/src/NModule.Core.Module/NModule.Core.Module.mdp	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Core.Module/NModule.Core.Module.mdp	2005-06-23 12:34:54 UTC (rev 24)
@@ -16,6 +16,7 @@
   <References>
     <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Core" />
     <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Parser" />
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Core" />
   </References>
   <DeploymentInformation strategy="File">
     <excludeFiles />
@@ -24,5 +25,6 @@
     <File name="./AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
     <File name="./ModuleInfo.cs" subtype="Code" buildaction="Compile" />
     <File name="./ModuleRole.cs" subtype="Code" buildaction="Compile" />
+    <File name="./ModuleInfoException.cs" subtype="Code" buildaction="Compile" />
   </Contents>
 </Project>
\ No newline at end of file

Modified: trunk/src/NModule.Dependency.Core/DepVersion.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/DepVersion.cs	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Dependency.Core/DepVersion.cs	2005-06-23 12:34:54 UTC (rev 24)
@@ -23,6 +23,8 @@
  **************************************************************************/
 
 namespace NModule.Dependency.Core {
+	using System;
+	
 	public class DepVersion {
 		private int _major;
 		private int _minor;

Modified: trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp
===================================================================
--- trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp	2005-06-23 12:34:33 UTC (rev 23)
+++ trunk/src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp	2005-06-23 12:34:54 UTC (rev 24)
@@ -14,8 +14,8 @@
     </Configuration>
   </Configurations>
   <References>
-    <ProjectReference type="Assembly" localcopy="True" refto="../../../../usr/lib/antlr.runtime.dll" />
     <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Core" />
+    <ProjectReference type="Assembly" localcopy="True" refto="../../lib/antlr.runtime.dll" />
   </References>
   <DeploymentInformation strategy="File">
     <excludeFiles />



From urilith at sheep.berlios.de  Thu Jun 23 14:35:44 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Thu, 23 Jun 2005 14:35:44 +0200
Subject: [nmodule-commits] r25 - tags
Message-ID: <200506231235.j5NCZiM9031086@sheep.berlios.de>

Author: urilith
Date: 2005-06-23 14:35:44 +0200 (Thu, 23 Jun 2005)
New Revision: 25

Added:
   tags/nmodule-0-1/
Log:
Tagging 0.1 release.


Copied: tags/nmodule-0-1 (from rev 24, trunk)



From urilith at sheep.berlios.de  Fri Jun 24 06:09:39 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Fri, 24 Jun 2005 06:09:39 +0200
Subject: [nmodule-commits] r26 - in trunk: . src src/antlr-runtime src/antlr-runtime/antlr src/antlr-runtime/antlr.collections src/antlr-runtime/antlr.collections.impl src/antlr-runtime/antlr.debug
Message-ID: <200506240409.j5O49dIL028980@sheep.berlios.de>

Author: urilith
Date: 2005-06-24 06:09:17 +0200 (Fri, 24 Jun 2005)
New Revision: 26

Added:
   trunk/Buildfile
   trunk/Buildfile.config
   trunk/INSTALL
   trunk/NEWS
   trunk/TODO
   trunk/src/Buildfile
   trunk/src/NModule.Core.Loader.dll.sources
   trunk/src/NModule.Core.Module.dll.sources
   trunk/src/NModule.Core.dll.sources
   trunk/src/NModule.Dependency.Core.dll.sources
   trunk/src/NModule.Dependency.Parser.dll.sources
   trunk/src/antlr-runtime.dll.sources
   trunk/src/antlr-runtime/
   trunk/src/antlr-runtime/AssemblyInfo.cs
   trunk/src/antlr-runtime/SupportClass.cs
   trunk/src/antlr-runtime/antlr.collections.impl/
   trunk/src/antlr-runtime/antlr.collections.impl/ASTArray.cs
   trunk/src/antlr-runtime/antlr.collections.impl/BitSet.cs
   trunk/src/antlr-runtime/antlr.collections/
   trunk/src/antlr-runtime/antlr.collections/AST.cs
   trunk/src/antlr-runtime/antlr.debug/
   trunk/src/antlr-runtime/antlr.debug/ANTLREventArgs.cs
   trunk/src/antlr-runtime/antlr.debug/DebuggingCharScanner.cs
   trunk/src/antlr-runtime/antlr.debug/DebuggingInputBuffer.cs
   trunk/src/antlr-runtime/antlr.debug/DebuggingParser.cs
   trunk/src/antlr-runtime/antlr.debug/GuessingEventArgs.cs
   trunk/src/antlr-runtime/antlr.debug/ICharScannerDebugSubject.cs
   trunk/src/antlr-runtime/antlr.debug/IDebugSubject.cs
   trunk/src/antlr-runtime/antlr.debug/IParserDebugSubject.cs
   trunk/src/antlr-runtime/antlr.debug/InputBufferEventArgs.cs
   trunk/src/antlr-runtime/antlr.debug/InputBufferEventSupport.cs
   trunk/src/antlr-runtime/antlr.debug/InputBufferListener.cs
   trunk/src/antlr-runtime/antlr.debug/InputBufferListenerBase.cs
   trunk/src/antlr-runtime/antlr.debug/InputBufferReporter.cs
   trunk/src/antlr-runtime/antlr.debug/LLkDebuggingParser.cs
   trunk/src/antlr-runtime/antlr.debug/Listener.cs
   trunk/src/antlr-runtime/antlr.debug/MessageEventArgs.cs
   trunk/src/antlr-runtime/antlr.debug/MessageListener.cs
   trunk/src/antlr-runtime/antlr.debug/MessageListenerBase.cs
   trunk/src/antlr-runtime/antlr.debug/NewLineEventArgs.cs
   trunk/src/antlr-runtime/antlr.debug/NewLineListener.cs
   trunk/src/antlr-runtime/antlr.debug/ParseTreeDebugParser.cs
   trunk/src/antlr-runtime/antlr.debug/ParserController.cs
   trunk/src/antlr-runtime/antlr.debug/ParserEventSupport.cs
   trunk/src/antlr-runtime/antlr.debug/ParserListener.cs
   trunk/src/antlr-runtime/antlr.debug/ParserListenerBase.cs
   trunk/src/antlr-runtime/antlr.debug/ParserMatchEventArgs.cs
   trunk/src/antlr-runtime/antlr.debug/ParserMatchListener.cs
   trunk/src/antlr-runtime/antlr.debug/ParserMatchListenerBase.cs
   trunk/src/antlr-runtime/antlr.debug/ParserReporter.cs
   trunk/src/antlr-runtime/antlr.debug/ParserTokenEventArgs.cs
   trunk/src/antlr-runtime/antlr.debug/ParserTokenListener.cs
   trunk/src/antlr-runtime/antlr.debug/ParserTokenListenerBase.cs
   trunk/src/antlr-runtime/antlr.debug/ScannerEventSupport.cs
   trunk/src/antlr-runtime/antlr.debug/SemanticPredicateEventArgs.cs
   trunk/src/antlr-runtime/antlr.debug/SemanticPredicateListener.cs
   trunk/src/antlr-runtime/antlr.debug/SemanticPredicateListenerBase.cs
   trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateEventArgs.cs
   trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateListener.cs
   trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateListenerBase.cs
   trunk/src/antlr-runtime/antlr.debug/TraceEventArgs.cs
   trunk/src/antlr-runtime/antlr.debug/TraceListener.cs
   trunk/src/antlr-runtime/antlr.debug/TraceListenerBase.cs
   trunk/src/antlr-runtime/antlr.debug/Tracer.cs
   trunk/src/antlr-runtime/antlr/
   trunk/src/antlr-runtime/antlr/ANTLRException.cs
   trunk/src/antlr-runtime/antlr/ANTLRPanicException.cs
   trunk/src/antlr-runtime/antlr/ASTFactory.cs
   trunk/src/antlr-runtime/antlr/ASTNULLType.cs
   trunk/src/antlr-runtime/antlr/ASTNodeCreator.cs
   trunk/src/antlr-runtime/antlr/ASTPair.cs
   trunk/src/antlr-runtime/antlr/ASTVisitor.cs
   trunk/src/antlr-runtime/antlr/BaseAST.cs
   trunk/src/antlr-runtime/antlr/ByteBuffer.cs
   trunk/src/antlr-runtime/antlr/CharBuffer.cs
   trunk/src/antlr-runtime/antlr/CharQueue.cs
   trunk/src/antlr-runtime/antlr/CharScanner.cs
   trunk/src/antlr-runtime/antlr/CharStreamException.cs
   trunk/src/antlr-runtime/antlr/CharStreamIOException.cs
   trunk/src/antlr-runtime/antlr/CommonAST.cs
   trunk/src/antlr-runtime/antlr/CommonASTWithHiddenTokens.cs
   trunk/src/antlr-runtime/antlr/CommonHiddenStreamToken.cs
   trunk/src/antlr-runtime/antlr/CommonToken.cs
   trunk/src/antlr-runtime/antlr/DefaultFileLineFormatter.cs
   trunk/src/antlr-runtime/antlr/DumpASTVisitor.cs
   trunk/src/antlr-runtime/antlr/FileLineFormatter.cs
   trunk/src/antlr-runtime/antlr/IHiddenStreamToken.cs
   trunk/src/antlr-runtime/antlr/IToken.cs
   trunk/src/antlr-runtime/antlr/InputBuffer.cs
   trunk/src/antlr-runtime/antlr/LLkParser.cs
   trunk/src/antlr-runtime/antlr/LexerSharedInputState.cs
   trunk/src/antlr-runtime/antlr/MismatchedCharException.cs
   trunk/src/antlr-runtime/antlr/MismatchedTokenException.cs
   trunk/src/antlr-runtime/antlr/NoViableAltException.cs
   trunk/src/antlr-runtime/antlr/NoViableAltForCharException.cs
   trunk/src/antlr-runtime/antlr/ParseTree.cs
   trunk/src/antlr-runtime/antlr/ParseTreeRule.cs
   trunk/src/antlr-runtime/antlr/ParseTreeToken.cs
   trunk/src/antlr-runtime/antlr/Parser.cs
   trunk/src/antlr-runtime/antlr/ParserSharedInputState.cs
   trunk/src/antlr-runtime/antlr/RecognitionException.cs
   trunk/src/antlr-runtime/antlr/SemanticException.cs
   trunk/src/antlr-runtime/antlr/StringUtils.cs
   trunk/src/antlr-runtime/antlr/Token.cs
   trunk/src/antlr-runtime/antlr/TokenBuffer.cs
   trunk/src/antlr-runtime/antlr/TokenCreator.cs
   trunk/src/antlr-runtime/antlr/TokenQueue.cs
   trunk/src/antlr-runtime/antlr/TokenStream.cs
   trunk/src/antlr-runtime/antlr/TokenStreamBasicFilter.cs
   trunk/src/antlr-runtime/antlr/TokenStreamException.cs
   trunk/src/antlr-runtime/antlr/TokenStreamHiddenTokenFilter.cs
   trunk/src/antlr-runtime/antlr/TokenStreamIOException.cs
   trunk/src/antlr-runtime/antlr/TokenStreamRecognitionException.cs
   trunk/src/antlr-runtime/antlr/TokenStreamRetryException.cs
   trunk/src/antlr-runtime/antlr/TokenStreamRewriteEngine.cs
   trunk/src/antlr-runtime/antlr/TokenStreamSelector.cs
   trunk/src/antlr-runtime/antlr/TokenWithIndex.cs
   trunk/src/antlr-runtime/antlr/TreeParser.cs
   trunk/src/antlr-runtime/antlr/TreeParserSharedInputState.cs
   trunk/src/nmodule.snk
Removed:
   trunk/lib/
Modified:
   trunk/
   trunk/ChangeLog
Log:
 r122 at dreamshadow:  urilith | 2005-06-23 21:53:44 -0500
 2005-06-23 Michael Tindal <urilith at gentoo.org>
 
   * src/Buildfile: New build file for mbuild system.
   * src/NModule.Core.Loader.dll.sources: Response file.
   * src/NModule.Core.Module.dll.sources: Response file.
   * src/NModule.Core.dll.sources: Response file.
   * src/NModule.Dependency.Core.dll.sources: Response file.
   * src/NModule.Dependency.Parser.dll.sources: Response file.
   * src/antlr-runtime: Imported just the runtime stuff from antlr.
   * src/antlr-runtime.dll.sources: Response file.
   * src/nmodule.snk: New keyfile for signing.
   * Buildfile: New build for mbuild system.
   * Buildfile.config: Configuration file for mbuild.
   * INSTALL: New file, nothing in here yet.
   * NEWS: New file, nothing in here yet.
   * TODO: New file, nothing in here yet.
   * lib: Removed the lib stuff since its no longer needed.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:119
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:122

Added: trunk/Buildfile
===================================================================
--- trunk/Buildfile	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/Buildfile	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,70 @@
+using [ Core
+	Core.Clr
+	Core.Install
+	Languages.CSharp
+	Tools.Bundlegen
+]
+
+# information about this project
+
+project [ 
+	name = nmodule
+	version = 0.1.0.0
+
+	# This is a 'compatibility code'; a standard piece
+	# of text that should be munged into names
+	# of installed files if you want to be able
+	# to do parallel installs. For instance, header files
+	# should be installed into ${includedir}/${name}-${compat-code}.
+	# More to the point, there should be infrastructure
+	# to make this easy. More useful is /config/env/compat_name,
+	# which is the string "${name}-${compat-code}". For instance,
+	# our assemblies are installed with a Mono gacutil 'package'
+	# of compat_name. Anyway, typically this should be the upper
+	# two pieces of the version number, but you can choose
+	# something else if you want.
+
+	compat-code = 0.1
+
+	# Versioned assembly references pulled
+	# from the GAC. No more aclocal hell!
+
+	ref [ 
+		Languages.CSharp = 0.0.4.0
+		Tools.Jay = 0.0.4.0
+		Tools.PkgConfig = 0.0.4.0
+		Tools.Bundlegen = 0.0.4.0
+		Tools.Monodoc = 0.0.4.0
+	]
+]
+
+# Load a separate file of configuration options
+# in a virtual prefix
+
+load Buildfile.config inside config/nmodule
+
+# There are also Buildfiles in these
+# subdirectories.
+
+subdirs [
+	src
+]
+
+# Back to regular compiles. Monkeywrench is the on-disk implementation
+# of mbuild logic: it has the parser for this file, code to cache results
+# in files, etc.
+ 
+# for now, this is how we do our version of EXTRA_DIST
+
+TODO = TextSource[] 
+	with [ install = /config/nmodule/doc_installer ]
+README = TextSource[] 
+	with [ install = /config/nmodule/doc_installer ]
+INSTALL = TextSource[] 
+	with [ install = /config/nmodule/doc_installer ]
+NEWS = TextSource[] 
+	with [ install = /config/nmodule/doc_installer ]
+COPYING = TextSource[]
+	with [ install = /config/nmodule/doc_installer ]
+AUTHORS = TextSource[]
+	with [ install = /config/nmodule/doc_installer ]

Added: trunk/Buildfile.config
===================================================================
--- trunk/Buildfile.config	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/Buildfile.config	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,47 @@
+using [ 
+	Core
+	Core.Config 
+	Core.Clr 
+	Core.Install
+	Languages.CSharp
+	Tools.PkgConfig 
+]
+
+# Dll dependencies
+
+# Define our gac installer: use our "compat name" as package name,
+# which looks something like "mbuild-1.0"
+# defaults to rootdir /config/install/libdir and 
+# program /config/clr/gacutil
+
+gac_installer = MakeGacutilInstaller [ /config/env/compat_name ]
+
+#good_example = ConfigBool[true] with [
+#	prompt = "This is an example configuration option. Ok?"
+#]
+
+# Document installing: {prefix}/share/doc/{compat-name}
+
+docdir = JoinPath [ 
+	/config/install/prefix_dir 
+	{ "share", "doc", /config/env/compat_name } 
+]
+
+doc_installer = MakeCopyInstaller [ docdir ]
+
+# Exe installing: {libdir}/{compat-name}
+# (The default exe installer puts them in {bindir}, which
+# we don't want -- wrappers go there.
+
+exe_installer = Clone [ /config/lang/csharp/dll_installer ]
+
+# Our compiler options
+
+# no prompt! Bad programmer!
+#bad_example = ConfigBool[false]
+
+#test_pkgconfig = PkgConfig["gtk+-2.0"]
+
+# would use with [ default = false ], but
+# this breaks when we make dist
+# nopkg = PkgConfig["donthavethis"]

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/ChangeLog	2005-06-24 04:09:17 UTC (rev 26)
@@ -1,5 +1,23 @@
 2005-06-23 Michael Tindal <urilith at gentoo.org>
 
+	* src/Buildfile: New build file for mbuild system.
+	* src/NModule.Core.Loader.dll.sources: Response file.
+	* src/NModule.Core.Module.dll.sources: Response file.
+	* src/NModule.Core.dll.sources: Response file.
+	* src/NModule.Dependency.Core.dll.sources: Response file. 
+	* src/NModule.Dependency.Parser.dll.sources: Response file. 
+	* src/antlr-runtime: Imported just the runtime stuff from antlr.
+	* src/antlr-runtime.dll.sources: Response file.
+	* src/nmodule.snk: New keyfile for signing.
+	* Buildfile: New build for mbuild system.
+	* Buildfile.config: Configuration file for mbuild.
+	* INSTALL: New file, nothing in here yet.
+	* NEWS: New file, nothing in here yet.
+	* TODO: New file, nothing in here yet.
+	* lib: Removed the lib stuff since its no longer needed.
+
+2005-06-23 Michael Tindal <urilith at gentoo.org>
+
 	*******************
         ***** RELEASE *****
         *******************

Added: trunk/INSTALL
===================================================================

Added: trunk/NEWS
===================================================================

Added: trunk/TODO
===================================================================

Added: trunk/src/Buildfile
===================================================================
--- trunk/src/Buildfile	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/Buildfile	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,82 @@
+using [ Core
+        Core.Clr
+        Core.Install
+        Languages.CSharp
+        Tools.Bundlegen
+]
+
+# Instead of creating mostly-blank Buildfiles
+# in these directories, we can implicitly define
+# their contents.
+
+inside [ 
+	NModule.Core
+	NModule.Dependency.Core
+	antlr-runtime
+	antlr-runtime/antlr
+	antlr-runtime/antlr.collections
+	antlr-runtime/antlr.collections.impl
+	antlr-runtime/antlr.debug
+	NModule.Dependency.Parser
+	NModule.Core.Module
+	NModule.Core.Loader
+] [
+	using [ Core
+		Core.Clr
+		Languages.CSharp
+		Tools.Bundlegen # for Core
+	]
+]
+
+# Load a response file to get the list of sources
+# Use a custom installer that installs the DLL into
+# the GAC, not just libdir. Also use a set of compiler
+# options defined in Buildfile.config
+
+# Now we declare "bundles", sets of rules used by mbuild. They
+# are generated with a special tool called mb-bundlegen.exe.
+# Bundlegen makes it so you don't need to worry about writing a 
+# lot of boilerplate code to create new build rules.
+
+# Now, declare all the bundles. Again, install them into
+# the GAC, not into libdir
+
+NModule.Core.dll = [
+	@NModule.Core.dll.sources
+	nmodule.snk
+] with [ install = /config/nmodule/gac_installer ]
+
+NModule.Dependency.Core.dll = [
+	@NModule.Dependency.Core.dll.sources
+	NModule.Core.dll
+	nmodule.snk
+] with [ install = /config/nmodule/gac_installer ]
+
+antlr-runtime.dll = [
+	@antlr-runtime.dll.sources
+	nmodule.snk
+] with [ install = /config/nmodule/gac_installer ]
+
+NModule.Dependency.Parser.dll = [
+	@NModule.Dependency.Parser.dll.sources
+	NModule.Core.dll
+	NModule.Dependency.Core.dll
+	antlr-runtime.dll
+	nmodule.snk
+] with [ install = /config/nmodule/gac_installer ]
+
+NModule.Core.Module.dll = [
+	@NModule.Core.Module.dll.sources
+	NModule.Core.dll
+	NModule.Dependency.Core.dll
+	NModule.Dependency.Parser.dll
+	nmodule.snk
+] with [ install = /config/nmodule/gac_installer ]
+
+NModule.Core.Loader.dll = [
+	@NModule.Core.Loader.dll.sources
+	NModule.Core.dll
+	NModule.Core.Module.dll
+	NModule.Dependency.Core.dll
+	nmodule.snk
+] with [ install = /config/nmodule/gac_installer ]

Added: trunk/src/NModule.Core.Loader.dll.sources
===================================================================
--- trunk/src/NModule.Core.Loader.dll.sources	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/NModule.Core.Loader.dll.sources	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,10 @@
+NModule.Core.Loader/AssemblyInfo.cs
+NModule.Core.Loader/CircularDependencyException.cs
+NModule.Core.Loader/UnresolvedDependencyException.cs
+NModule.Core.Loader/ModuleController.cs
+NModule.Core.Loader/DepResolver.cs
+NModule.Core.Loader/ModuleImageException.cs
+NModule.Core.Loader/DomainStillReferencedException.cs
+NModule.Core.Loader/ModuleLoader.cs
+NModule.Core.Loader/ModuleNotFoundException.cs
+NModule.Core.Loader/InvalidModuleException.cs

Added: trunk/src/NModule.Core.Module.dll.sources
===================================================================
--- trunk/src/NModule.Core.Module.dll.sources	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/NModule.Core.Module.dll.sources	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,4 @@
+NModule.Core.Module/AssemblyInfo.cs
+NModule.Core.Module/ModuleRole.cs
+NModule.Core.Module/ModuleInfo.cs
+NModule.Core.Module/ModuleInfoException.cs

Added: trunk/src/NModule.Core.dll.sources
===================================================================
--- trunk/src/NModule.Core.dll.sources	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/NModule.Core.dll.sources	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,4 @@
+NModule.Core/AssemblyInfo.cs
+NModule.Core/IModule.cs
+NModule.Core/ModuleDependencyAttribute.cs
+NModule.Core/ModuleRoleAttribute.cs

Added: trunk/src/NModule.Dependency.Core.dll.sources
===================================================================
--- trunk/src/NModule.Dependency.Core.dll.sources	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/NModule.Dependency.Core.dll.sources	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,5 @@
+NModule.Dependency.Core/DepConstraint.cs
+NModule.Dependency.Core/AssemblyInfo.cs
+NModule.Dependency.Core/DepNode.cs
+NModule.Dependency.Core/DepOps.cs
+NModule.Dependency.Core/DepVersion.cs

Added: trunk/src/NModule.Dependency.Parser.dll.sources
===================================================================
--- trunk/src/NModule.Dependency.Parser.dll.sources	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/NModule.Dependency.Parser.dll.sources	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,4 @@
+NModule.Dependency.Parser/AssemblyInfo.cs
+NModule.Dependency.Parser/DepParser.cs
+NModule.Dependency.Parser/DepLexer.cs
+NModule.Dependency.Parser/DepParserTokenTypes.cs

Added: trunk/src/antlr-runtime/AssemblyInfo.cs
===================================================================
--- trunk/src/antlr-runtime/AssemblyInfo.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/AssemblyInfo.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,32 @@
+using System;
+using System.Reflection;
+using System.Runtime.CompilerServices;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+
+// TODO: Review the values of the assembly attributes
+
+[assembly: AssemblyTitle("antlr.runtime")]
+[assembly: AssemblyDescription("ANTLR Runtime for .NET")]
+[assembly: AssemblyCompany("www.antlr.org")]
+[assembly: AssemblyProduct("")]
+[assembly: AssemblyCopyright("")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+[assembly: AssemblyVersion("2.7.5.02")]
+
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Revision
+//      Build Number
+//
+// You can specify all the values or you can default the Revision and Build Numbers
+// by using the '*' as shown below:
+
+[assembly: CLSCompliantAttribute(true)]


Property changes on: trunk/src/antlr-runtime/AssemblyInfo.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/SupportClass.cs
===================================================================
--- trunk/src/antlr-runtime/SupportClass.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/SupportClass.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,29 @@
+using System;
+internal class SupportClass
+{
+	public static int URShift(int number, int bits)
+	{
+		if ( number >= 0)
+			return number >> bits;
+		else
+			return (number >> bits) + (2 << ~bits);
+	}
+
+	public static int URShift(int number, long bits)
+	{
+		return URShift(number, (int)bits);
+	}
+
+	public static long URShift(long number, int bits)
+	{
+		if ( number >= 0)
+			return number >> bits;
+		else
+			return (number >> bits) + (2L << ~bits);
+	}
+
+	public static long URShift(long number, long bits)
+	{
+		return URShift(number, (int)bits);
+	}
+}


Property changes on: trunk/src/antlr-runtime/SupportClass.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/ANTLRException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/ANTLRException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/ANTLRException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,35 @@
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	using System;
+	
+	[Serializable]
+	public class ANTLRException : Exception
+	{
+		public ANTLRException() : base() 
+		{
+		}
+
+		public ANTLRException(string s) : base(s) 
+		{
+		}
+
+		public ANTLRException(string s, Exception inner) : base(s, inner)
+		{
+		}
+	}
+}


Property changes on: trunk/src/antlr-runtime/antlr/ANTLRException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/ANTLRPanicException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/ANTLRPanicException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/ANTLRPanicException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,35 @@
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	using System;
+	
+	[Serializable]
+	public class ANTLRPanicException : ANTLRException 
+	{
+		public ANTLRPanicException() : base() 
+		{
+		}
+
+		public ANTLRPanicException(string s) : base(s)
+		{
+		}
+
+		public ANTLRPanicException(string s, Exception inner) : base(s, inner)
+		{
+		}
+	}
+}


Property changes on: trunk/src/antlr-runtime/antlr/ANTLRPanicException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/ASTFactory.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/ASTFactory.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/ASTFactory.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,696 @@
+using System;
+using System.Collections;
+using Assembly			= System.Reflection.Assembly;
+using ArrayList			= System.Collections.ArrayList;
+using Debug				= System.Diagnostics.Debug;
+using AST				= antlr.collections.AST;
+using ASTArray			= antlr.collections.impl.ASTArray;
+using ANTLRException	= antlr.ANTLRException;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+	
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+
+	// HISTORY:
+	//
+	// 19-Aug-2002 kunle    Augmented the basic flexibility of the default ASTFactory with a map
+	//                      of TokenID-to-NodeTypeName. It's now a proper GoF-style Factory ;-)
+	//
+
+	/// <summary>
+	/// AST Support code shared by TreeParser and Parser.
+	/// </summary>
+	/// <remarks>
+	/// <para>
+	/// We use delegation to share code (and have only one 
+	/// bit of code to maintain) rather than subclassing
+	/// or superclassing (forces AST support code to be
+	/// loaded even when you don't want to do AST stuff).
+	/// </para>
+	/// <para>
+	/// Typically, <see cref="setASTNodeType"/>  is used to specify the
+	/// homogeneous type of node to create, but you can override
+	/// <see cref="create"/>  to make heterogeneous nodes etc...
+	/// </para>
+	/// </remarks>
+	public class ASTFactory
+	{
+		//---------------------------------------------------------------------
+		// CONSTRUCTORS
+		//---------------------------------------------------------------------
+
+		/// <summary>
+		/// Constructs an <c>ASTFactory</c> with the default AST node type of
+		/// <see cref="antlr.CommonAST"/>.
+		/// </summary>
+		public ASTFactory() : this("antlr.CommonAST")
+		{
+		}
+
+		/// <summary>
+		/// Constructs an <c>ASTFactory</c> and use the specified AST node type
+		/// as the default.
+		/// </summary>
+		/// <param name="nodeTypeName">
+		///		Name of default AST node type for this factory.
+		/// </param>
+		public ASTFactory(string nodeTypeName)
+		{
+			heteroList_					= new FactoryEntry[Token.MIN_USER_TYPE+1];
+			defaultASTNodeTypeObject_	= loadNodeTypeObject(nodeTypeName);
+			defaultCreator_				= null;
+			typename2creator_			= new Hashtable(32, (float) 0.3);
+			typename2creator_["antlr.CommonAST"]					= CommonAST.Creator;
+			typename2creator_["antlr.CommonASTWithHiddenTokens"]	= CommonASTWithHiddenTokens.Creator;
+
+		}
+		
+		//---------------------------------------------------------------------
+		// DATA MEMBERS
+		//---------------------------------------------------------------------
+
+		/// <summary>
+		/// Stores the Type of the default AST node class to be used during tree construction.
+		/// </summary>
+		protected Type				defaultASTNodeTypeObject_;
+		protected ASTNodeCreator	defaultCreator_;
+
+		/// <summary>
+		/// Stores the mapping between custom AST NodeTypes and their NodeTypeName/NodeTypeClass
+		/// and ASTNodeCreator.
+		/// </summary>
+		protected FactoryEntry[]	heteroList_;
+
+		/// <summary>
+		/// Stores the mapping between AST node typenames and their token ID.
+		/// </summary>
+		protected Hashtable			typename2creator_;
+
+		//---------------------------------------------------------------------
+		// FUNCTION MEMBERS
+		//---------------------------------------------------------------------
+
+		/// <summary>
+		/// Specify an "override" for the <see cref="AST"/> type created for
+		/// the specified Token type.
+		/// </summary>
+		/// <remarks>
+		/// This method is useful for situations that ANTLR cannot oridinarily deal 
+		/// with (i.e., when you  create a token based upon a nonliteral token symbol 
+		/// like #[LT(1)].  This is a runtime value and ANTLR cannot determine the token 
+		/// type (and hence the AST) statically.
+		/// </remarks>
+		/// <param name="tokenType">Token type to override.</param>
+		/// <param name="NodeTypeName">
+		///		Fully qualified AST typename (or null to specify 
+		///		the factory's default AST type).
+		/// </param>
+		public void setTokenTypeASTNodeType(int tokenType, string NodeTypeName)
+		{
+			// check validity of arguments...
+			if( tokenType < Token.MIN_USER_TYPE )
+				throw new ANTLRException("Internal parser error: Cannot change AST Node Type for Token ID '" + tokenType + "'");
+
+			// resize up to and including 'type' and initialize any gaps to default
+			// factory.
+			if (tokenType > (heteroList_.Length+1))
+				setMaxNodeType(tokenType);
+			// And add new thing..
+			if (heteroList_[tokenType] == null)
+                heteroList_[tokenType] = new FactoryEntry(loadNodeTypeObject(NodeTypeName));
+			else
+				heteroList_[tokenType].NodeTypeObject = loadNodeTypeObject(NodeTypeName);
+		}
+
+		/// <summary>
+		/// Register an AST Node Type for a given Token type ID.
+		/// </summary>
+		/// <param name="NodeType">The Token type ID.</param>
+		/// <param name="NodeTypeName">The AST Node Type to register.</param>
+		[Obsolete("Replaced by setTokenTypeASTNodeType(int, string) since version 2.7.2.6", true)]
+		public void registerFactory(int NodeType, string NodeTypeName)
+		{
+			setTokenTypeASTNodeType(NodeType, NodeTypeName);
+		}
+
+		/// <summary>
+		/// Register an ASTNodeCreator for a given Token type ID.
+		/// </summary>
+		/// <param name="NodeType">The Token type ID.</param>
+		/// <param name="creator">The creater to register.</param>
+		public void setTokenTypeASTNodeCreator(int NodeType, ASTNodeCreator creator)
+		{
+			// check validity of arguments...
+			if( NodeType < Token.MIN_USER_TYPE )
+				throw new ANTLRException("Internal parser error: Cannot change AST Node Type for Token ID '" + NodeType + "'");
+
+			// resize up to and including 'type' and initialize any gaps to default
+			// factory.
+			if (NodeType > (heteroList_.Length+1))
+				setMaxNodeType(NodeType);
+			// And add new thing..
+			if (heteroList_[NodeType] == null)
+				heteroList_[NodeType] = new FactoryEntry(creator);
+			else
+				heteroList_[NodeType].Creator = creator;
+
+			//typename2creator_[NodeType.ToString()]		= creator;
+			typename2creator_[creator.ASTNodeTypeName]	= creator;
+		}
+
+		/// <summary>
+		/// Register an ASTNodeCreator to be used for creating node by default.
+		/// </summary>
+		/// <param name="creator">The ASTNodeCreator.</param>
+		public void setASTNodeCreator(ASTNodeCreator creator)
+		{
+			defaultCreator_ = creator;
+		}
+
+		/// <summary>
+		/// Pre-expands the internal list of TokenTypeID-to-ASTNodeType mappings
+		/// to the specified size.
+		/// This is primarily a convenience method that can be used to prevent 
+		/// unnecessary and costly re-org of the mappings list.
+		/// </summary>
+		/// <param name="NodeType">Maximum Token Type ID.</param>
+		public void setMaxNodeType( int NodeType )
+		{
+			//Debug.WriteLine(this, "NodeType = " + NodeType + " and NodeList.Length = " + nodeTypeList_.Length);
+			if (heteroList_ == null)
+			{
+				heteroList_ = new FactoryEntry[NodeType+1];
+			}
+			else
+			{
+				int length = heteroList_.Length;
+
+				if ( NodeType > (length + 1) )
+				{
+					FactoryEntry[] newList = new FactoryEntry[NodeType+1];
+					Array.Copy(heteroList_, 0, newList, 0, heteroList_.Length);
+					heteroList_ = newList;
+				}
+				else if ( NodeType < (length + 1) )
+				{
+					FactoryEntry[] newList = new FactoryEntry[NodeType+1];
+					Array.Copy(heteroList_, 0, newList, 0, (NodeType+1));
+					heteroList_ = newList;
+				}
+			}
+			//Debug.WriteLine(this, "NodeType = " + NodeType + " and NodeList.Length = " + nodeTypeList_.Length);
+		}
+
+		/// <summary>
+		/// Add a child to the current AST
+		/// </summary>
+		/// <param name="currentAST">The AST to add a child to</param>
+		/// <param name="child">The child AST to be added</param>
+		public virtual void  addASTChild(ASTPair currentAST, AST child)
+		{
+			if (child != null)
+			{
+				if (currentAST.root == null)
+				{
+					// Make new child the current root
+					currentAST.root = child;
+				}
+				else
+				{
+					if (currentAST.child == null)
+					{
+						// Add new child to current root
+						currentAST.root.setFirstChild(child);
+					}
+					else
+					{
+						currentAST.child.setNextSibling(child);
+					}
+				}
+				// Make new child the current child
+				currentAST.child = child;
+				currentAST.advanceChildToEnd();
+			}
+		}
+		
+		/// <summary>
+		/// Creates a new uninitialized AST node. Since a specific AST Node Type
+		/// wasn't indicated, the new AST node is created using the current default
+		/// AST Node type - <see cref="defaultASTNodeTypeObject_"/>
+		/// </summary>
+		/// <returns>An uninitialized AST node object.</returns>
+		public virtual AST create()
+		{
+			AST newNode;
+			
+			if (defaultCreator_ == null)
+				newNode = createFromNodeTypeObject(defaultASTNodeTypeObject_);
+			else
+				newNode = defaultCreator_.Create();
+
+			return newNode;
+		}
+		
+		/// <summary>
+		/// Creates and initializes a new AST node using the specified Token Type ID.
+		/// The <see cref="System.Type"/> used for creating this new AST node is 
+		/// determined by the following:
+		/// <list type="bullet">
+		///		<item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item>
+		///		<item>the <see cref="defaultASTNodeTypeObject_"/> otherwise</item>
+		/// </list>
+		/// </summary>
+		/// <param name="type">Token type ID to be used to create new AST Node.</param>
+		/// <returns>An initialized AST node object.</returns>
+		public virtual AST create(int type)
+		{
+			AST newNode = createFromNodeType(type);
+			newNode.initialize(type, "");
+			return newNode;
+		}
+		
+		/// <summary>
+		/// Creates and initializes a new AST node using the specified Token Type ID.
+		/// The <see cref="System.Type"/> used for creating this new AST node is 
+		/// determined by the following:
+		/// <list type="bullet">
+		///		<item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item>
+		///		<item>the <see cref="defaultASTNodeTypeObject_"/> otherwise</item>
+		/// </list>
+		/// </summary>
+		/// <param name="type">Token type ID to be used to create new AST Node.</param>
+		/// <param name="txt">Text for initializing the new AST Node.</param>
+		/// <returns>An initialized AST node object.</returns>
+		public virtual AST create(int type, string txt)
+		{
+			AST newNode = createFromNodeType(type);
+			newNode.initialize(type, txt);
+			return newNode;
+		}
+		
+		/// <summary>
+		/// Creates a new AST node using the specified AST Node Type name. Once created,
+		/// the new AST node is initialized with the specified Token type ID and string.
+		/// The <see cref="System.Type"/> used for creating this new AST node is 
+		/// determined solely by <c>ASTNodeTypeName</c>.
+		/// The AST Node type must have a default/parameterless constructor.
+		/// </summary>
+		/// <param name="type">Token type ID to be used to create new AST Node.</param>
+		/// <param name="txt">Text for initializing the new AST Node.</param>
+		/// <param name="ASTNodeTypeName">Fully qualified name of the Type to be used for creating the new AST Node.</param>
+		/// <returns>An initialized AST node object.</returns>
+		public virtual AST create(int type, string txt, string ASTNodeTypeName)
+		{
+			AST newNode = createFromNodeName(ASTNodeTypeName);
+			newNode.initialize(type, txt);
+			return newNode;
+		}
+		
+		/// <summary>
+		/// Creates a new AST node using the specified AST Node Type name.
+		/// </summary>
+		/// <param name="tok">Token instance to be used to initialize the new AST Node.</param>
+		/// <param name="ASTNodeTypeName">
+		///		Fully qualified name of the Type to be used for creating the new AST Node.
+		///	</param>
+		/// <returns>A newly created and initialized AST node object.</returns>
+		/// <remarks>
+		/// Once created, the new AST node is initialized with the specified Token 
+		/// instance. The <see cref="System.Type"/> used for creating this new AST 
+		/// node is  determined solely by <c>ASTNodeTypeName</c>.
+		/// <para>The AST Node type must have a default/parameterless constructor.</para>
+		/// </remarks>
+		public virtual AST create(IToken tok, string ASTNodeTypeName)
+		{
+			AST newNode = createFromNodeName(ASTNodeTypeName);
+			newNode.initialize(tok);
+			return newNode;
+		}
+		
+		/// <summary>
+		/// Creates and initializes a new AST node using the specified AST Node instance.
+		/// the new AST node is initialized with the specified Token type ID and string.
+		/// The <see cref="System.Type"/> used for creating this new AST node is 
+		/// determined solely by <c>aNode</c>.
+		/// The AST Node type must have a default/parameterless constructor.
+		/// </summary>
+		/// <param name="aNode">AST Node instance to be used for creating the new AST Node.</param>
+		/// <returns>An initialized AST node object.</returns>
+		public virtual AST create(AST aNode)
+		{
+			AST	newNode;
+
+			if (aNode == null)
+				newNode = null;
+			else
+			{			
+				newNode = createFromAST(aNode);
+				newNode.initialize(aNode);
+			}
+			return newNode;
+		}
+		
+		/// <summary>
+		/// Creates and initializes a new AST node using the specified Token instance.
+		/// The <see cref="System.Type"/> used for creating this new AST node is 
+		/// determined by the following:
+		/// <list type="bullet">
+		///		<item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item>
+		///		<item>the <see cref="defaultASTNodeTypeObject_"/> otherwise</item>
+		/// </list>
+		/// </summary>
+		/// <param name="tok">Token instance to be used to create new AST Node.</param>
+		/// <returns>An initialized AST node object.</returns>
+		public virtual AST create(IToken tok)
+		{
+			AST newNode;
+
+			if (tok == null)
+				newNode = null;
+			else
+			{
+				newNode = createFromNodeType(tok.Type);
+				newNode.initialize(tok);
+			}
+			return newNode;
+		}
+		
+		/// <summary>
+		/// Returns a copy of the specified AST Node instance. The copy is obtained by
+		/// using the <see cref="ICloneable"/> method Clone().
+		/// </summary>
+		/// <param name="t">AST Node to copy.</param>
+		/// <returns>An AST Node (or null if <c>t</c> is null).</returns>
+		public virtual AST dup(AST t)
+		{
+			// The Java version is implemented using code like this:
+			if (t == null)
+				return null;
+
+			AST dup_edNode = createFromAST(t);
+			dup_edNode.initialize(t);
+			return dup_edNode;
+		}
+		
+		/// <summary>
+		/// Duplicate AST Node tree rooted at specified AST node and all of it's siblings.
+		/// </summary>
+		/// <param name="t">Root of AST Node tree.</param>
+		/// <returns>Root node of new AST Node tree (or null if <c>t</c> is null).</returns>
+		public virtual AST dupList(AST t)
+		{
+			AST result = dupTree(t); // if t == null, then result==null
+			AST nt = result;
+			while (t != null)
+			{
+				// for each sibling of the root
+				t = t.getNextSibling();
+				nt.setNextSibling(dupTree(t)); // dup each subtree, building new tree
+				nt = nt.getNextSibling();
+			}
+			return result;
+		}
+		
+		/// <summary>
+		/// Duplicate AST Node tree rooted at specified AST node. Ignore it's siblings.
+		/// </summary>
+		/// <param name="t">Root of AST Node tree.</param>
+		/// <returns>Root node of new AST Node tree (or null if <c>t</c> is null).</returns>
+		public virtual AST dupTree(AST t)
+		{
+			AST result = dup(t); // make copy of root
+			// copy all children of root.
+			if (t != null)
+			{
+				result.setFirstChild(dupList(t.getFirstChild()));
+			}
+			return result;
+		}
+		
+		/// <summary>
+		/// Make a tree from a list of nodes.  The first element in the
+		/// array is the root.  If the root is null, then the tree is
+		/// a simple list not a tree.  Handles null children nodes correctly.
+		/// For example, build(a, b, null, c) yields tree (a b c).  build(null,a,b)
+		/// yields tree (nil a b).
+		/// </summary>
+		/// <param name="nodes">List of Nodes.</param>
+		/// <returns>AST Node tree.</returns>
+		public virtual AST make(params AST[] nodes)
+		{
+			if (nodes == null || nodes.Length == 0)
+				return null;
+			AST root = nodes[0];
+			AST tail = null;
+			if (root != null)
+			{
+				root.setFirstChild(null); // don't leave any old pointers set
+			}
+			// link in children;
+			for (int i = 1; i < nodes.Length; i++)
+			{
+				if (nodes[i] == null)
+					continue;
+				// ignore null nodes
+				if (root == null)
+				{
+					// Set the root and set it up for a flat list
+					root = (tail = nodes[i]);
+				}
+				else if (tail == null)
+				{
+					root.setFirstChild(nodes[i]);
+					tail = root.getFirstChild();
+				}
+				else
+				{
+					tail.setNextSibling(nodes[i]);
+					tail = tail.getNextSibling();
+				}
+				// Chase tail to last sibling
+				while (tail.getNextSibling() != null)
+				{
+					tail = tail.getNextSibling();
+				}
+			}
+			return root;
+		}
+		
+		/// <summary>
+		/// Make a tree from a list of nodes, where the nodes are contained
+		/// in an ASTArray object.
+		/// </summary>
+		/// <param name="nodes">List of Nodes.</param>
+		/// <returns>AST Node tree.</returns>
+		public virtual AST make(ASTArray nodes)
+		{
+			return make(nodes.array);
+		}
+		
+		/// <summary>
+		/// Make an AST the root of current AST.
+		/// </summary>
+		/// <param name="currentAST"></param>
+		/// <param name="root"></param>
+		public virtual void  makeASTRoot(ASTPair currentAST, AST root)
+		{
+			if (root != null)
+			{
+				// Add the current root as a child of new root
+				root.addChild(currentAST.root);
+				// The new current child is the last sibling of the old root
+				currentAST.child = currentAST.root;
+				currentAST.advanceChildToEnd();
+				// Set the new root
+				currentAST.root = root;
+			}
+		}
+
+		/// <summary>
+		/// Sets the global default AST Node Type for this ASTFactory instance.
+		/// This method also attempts to load the <see cref="System.Type"/> instance
+		/// for the specified typename.
+		/// </summary>
+		/// <param name="t">Fully qualified AST Node Type name.</param>
+		public virtual void  setASTNodeType(string t)
+		{
+			if (defaultCreator_ != null)
+			{
+				if (t != defaultCreator_.ASTNodeTypeName)
+				{
+					defaultCreator_ = null;
+				}
+			}
+			defaultASTNodeTypeObject_ = loadNodeTypeObject(t);
+		}
+		
+		/// <summary>
+		/// To change where error messages go, can subclass/override this method
+		/// and then setASTFactory in Parser and TreeParser.  This method removes
+		/// a prior dependency on class antlr.Tool.
+		/// </summary>
+		/// <param name="e"></param>
+		public virtual void  error(string e)
+		{
+			Console.Error.WriteLine(e);
+		}
+
+		//---------------------------------------------------------------------
+		// PRIVATE FUNCTION MEMBERS
+		//---------------------------------------------------------------------
+
+		private Type loadNodeTypeObject(string nodeTypeName)
+		{
+			Type	nodeTypeObject	= null;
+			bool	typeCreated		= false;
+
+			if (nodeTypeName != null)
+			{
+				foreach (Assembly assem in AppDomain.CurrentDomain.GetAssemblies())
+				{
+					try
+					{
+						nodeTypeObject = assem.GetType(nodeTypeName);
+						if (nodeTypeObject != null)
+						{
+							typeCreated = true;
+							break;
+						}
+					}
+					catch
+					{
+						typeCreated = false;
+					}
+				}
+			}
+			if (!typeCreated)
+			{
+				throw new TypeLoadException("Unable to load AST Node Type: '" + nodeTypeName + "'");
+			}
+			return nodeTypeObject;
+		}
+
+		private AST createFromAST(AST node)
+		{
+			AST		newNode			= null;
+			Type	nodeAsTypeObj	= node.GetType();
+
+			ASTNodeCreator creator = (ASTNodeCreator) typename2creator_[nodeAsTypeObj.FullName];
+			if (creator != null)
+			{
+				newNode = creator.Create();
+				if (newNode == null)
+				{
+					throw new ArgumentException("Unable to create AST Node Type: '" + nodeAsTypeObj.FullName + "'");
+				}
+			}
+			else
+			{
+				newNode = createFromNodeTypeObject(nodeAsTypeObj);
+			}
+			return newNode;
+		}
+
+		private AST createFromNodeName(string nodeTypeName)
+		{
+			AST		newNode			= null;
+
+			ASTNodeCreator creator = (ASTNodeCreator) typename2creator_[nodeTypeName];
+			if (creator != null)
+			{
+				newNode = creator.Create();
+				if (newNode == null)
+				{
+					throw new ArgumentException("Unable to create AST Node Type: '" + nodeTypeName + "'");
+				}
+			}
+			else
+			{
+				newNode = createFromNodeTypeObject( loadNodeTypeObject(nodeTypeName) );
+			}
+			return newNode;
+		}
+
+		private AST createFromNodeType(int nodeTypeIndex)
+		{
+			Debug.Assert((nodeTypeIndex >= 0) && (nodeTypeIndex <= heteroList_.Length), "Invalid AST node type!");
+			AST newNode = null;
+
+			FactoryEntry	entry = heteroList_[nodeTypeIndex];
+			if ((entry != null) && (entry.Creator != null))
+			{
+				newNode = entry.Creator.Create();
+			}
+			else
+			{
+				if ((entry == null) || (entry.NodeTypeObject == null))
+				{
+					if (defaultCreator_ == null)
+					{
+						newNode = createFromNodeTypeObject(defaultASTNodeTypeObject_);
+					}
+					else
+						newNode = defaultCreator_.Create();
+				}
+				else
+                    newNode = createFromNodeTypeObject( entry.NodeTypeObject );
+			}
+			return newNode;
+		}
+
+		private AST createFromNodeTypeObject(Type nodeTypeObject)
+		{
+			AST		newNode			= null;
+
+			try
+			{
+				newNode = (AST) Activator.CreateInstance(nodeTypeObject);
+				if (newNode == null)
+				{
+					throw new ArgumentException("Unable to create AST Node Type: '" + nodeTypeObject.FullName + "'");
+				}
+			}
+			catch(Exception ex)
+			{
+				throw new ArgumentException("Unable to create AST Node Type: '" + nodeTypeObject.FullName + "'", ex);
+			}
+			return newNode;
+		}
+
+		protected class FactoryEntry
+		{
+			public FactoryEntry(Type typeObj, ASTNodeCreator creator)
+			{
+				NodeTypeObject	= typeObj;
+				Creator			= creator;
+			}
+
+			public FactoryEntry(Type typeObj)
+			{
+				NodeTypeObject	= typeObj;
+			}
+
+			public FactoryEntry(ASTNodeCreator creator)
+			{
+				Creator			= creator;
+			}
+
+			public Type				NodeTypeObject;
+			public ASTNodeCreator	Creator;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/ASTFactory.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/ASTNULLType.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/ASTNULLType.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/ASTNULLType.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,123 @@
+using System;
+using IEnumerator		= System.Collections.IEnumerator;
+
+using AST				= antlr.collections.AST;
+using Token				= antlr.Token;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+	
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*There is only one instance of this class **/
+	public class ASTNULLType : AST
+	{
+		public virtual void  addChild(AST c) {}
+
+		public virtual bool Equals(AST t)
+		{
+			return false;
+		}
+		public virtual bool EqualsList(AST t)
+		{
+			return false;
+		}
+		public virtual bool EqualsListPartial(AST t)
+		{
+			return false;
+		}
+		public virtual bool EqualsTree(AST t)
+		{
+			return false;
+		}
+		public virtual bool EqualsTreePartial(AST t)
+		{
+			return false;
+		}
+		public virtual IEnumerator findAll(AST tree)
+		{
+			return null;
+		}
+		public virtual IEnumerator findAllPartial(AST subtree)
+		{
+			return null;
+		}
+		public virtual AST getFirstChild()
+		{
+			return this;
+		}
+		public virtual AST getNextSibling()
+		{
+			return this;
+		}
+		public virtual string getText()
+		{
+			return "<ASTNULL>";
+		}
+		public virtual int Type
+		{
+			get { return Token.NULL_TREE_LOOKAHEAD; }
+			set { ; }
+		}
+		public int getNumberOfChildren() 
+		{
+			return 0;
+		}
+		public virtual void  initialize(int t, string txt)
+		{
+		}
+		public virtual void  initialize(AST t)
+		{
+		}
+		public virtual void  initialize(IToken t)
+		{
+		}
+		public virtual void  setFirstChild(AST c)
+		{
+			;
+		}
+		public virtual void  setNextSibling(AST n)
+		{
+			;
+		}
+		public virtual void  setText(string text)
+		{
+			;
+		}
+		public virtual void  setType(int ttype)
+		{
+			this.Type = ttype;
+		}
+		override public string ToString()
+		{
+			return getText();
+		}
+		public virtual string ToStringList()
+		{
+			return getText();
+		}
+		public virtual string ToStringTree()
+		{
+			return getText();
+		}
+
+		#region Implementation of ICloneable
+		public object Clone()
+		{
+			return MemberwiseClone();
+		}
+		#endregion
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/ASTNULLType.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/ASTNodeCreator.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/ASTNodeCreator.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/ASTNodeCreator.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,52 @@
+namespace antlr
+{
+	using System;
+	using AST		= antlr.collections.AST;
+
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+	
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+
+	/// <summary>
+	/// A creator of AST node instances.
+	/// </summary>
+	/// <remarks>
+	/// <para>
+	/// This class and it's sub-classes exists primarily as an optimization
+	/// of the reflection-based mechanism(s) previously used exclusively to 
+	/// create instances of AST node objects.
+	/// </para>
+	/// <para>
+	/// Parsers and TreeParsers already use the ASTFactory class in ANTLR whenever
+	/// they need to create an AST node objeect. What this class does is to support
+	/// performant extensibility of the basic ASTFactory. The ASTFactory can now be
+	/// extnded as run-time to support more new AST node types without using needing
+	/// to use reflection.
+	/// </para>
+	/// </remarks>
+	public abstract class ASTNodeCreator
+	{
+		/// <summary>
+		/// Returns the fully qualified name of the AST type that this
+		/// class creates.
+		/// </summary>
+		public abstract string ASTNodeTypeName
+		{
+			get;
+		}
+
+		/// <summary>
+		/// Constructs an <see cref="AST"/> instance.
+		/// </summary>
+		public abstract AST Create();
+	}
+}
\ No newline at end of file

Added: trunk/src/antlr-runtime/antlr/ASTPair.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/ASTPair.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/ASTPair.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,88 @@
+namespace antlr
+{
+	using System;
+	using Queue = System.Collections.Queue;
+	using AST	= antlr.collections.AST;
+
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+
+	/*ASTPair:  utility class used for manipulating a pair of ASTs
+	* representing the current AST root and current AST sibling.
+	* This exists to compensate for the lack of pointers or 'var'
+	* arguments in Java.
+	*/
+
+	public class ASTPair
+	{
+		static private Queue instancePool_ = new Queue();
+
+		static public ASTPair GetInstance()
+		{
+			if (instancePool_.Count > 0)
+			{
+				return (ASTPair) instancePool_.Dequeue();
+			}
+			return new ASTPair();
+		}
+
+		static public void PutInstance(ASTPair p)
+		{
+			if (p != null)
+			{
+				p.reset();
+				instancePool_.Enqueue(p);
+			}
+		}
+
+		public AST root; // current root of tree
+		public AST child; // current child to which siblings are added
+		
+		/*Make sure that child is the last sibling */
+		public void  advanceChildToEnd()
+		{
+			if (child != null)
+			{
+				while (child.getNextSibling() != null)
+				{
+					child = child.getNextSibling();
+				}
+			}
+		}
+		
+		/*Copy an ASTPair.  Don't call it clone() because we want type-safety */
+		public virtual ASTPair copy()
+		{
+			ASTPair tmp = ASTPair.GetInstance();
+			tmp.root = root;
+			tmp.child = child;
+			return tmp;
+		}
+
+		private void reset()
+		{
+			root  = null;
+			child = null;
+		}
+		
+		override public string ToString()
+		{
+			string r = (root == null) ? "null" : root.getText();
+			string c = (child == null) ? "null" : child.getText();
+			return "[" + r + "," + c + "]";
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/ASTPair.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/ASTVisitor.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/ASTVisitor.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/ASTVisitor.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,29 @@
+using System;
+
+using AST		= antlr.collections.AST;
+
+namespace antlr
+{
+	/* ANTLR Translator Generator
+	 * Project led by Terence Parr at http://www.jGuru.com
+	 * Software rights: http://www.antlr.org/license.html
+	 *
+	 * $Id:$
+	 */
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/// <summary>
+	/// Summary description for ASTVisitor.
+	/// </summary>
+	public interface ASTVisitor
+	{
+		void visit(AST node);
+	}
+}


Property changes on: trunk/src/antlr-runtime/antlr/ASTVisitor.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/BaseAST.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/BaseAST.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/BaseAST.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,616 @@
+using System;
+using StringBuilder		= System.Text.StringBuilder;
+using ISerializable		= System.Runtime.Serialization.ISerializable;
+using TextWriter		= System.IO.TextWriter;
+using ArrayList			= System.Collections.ArrayList;
+using IEnumerator		= System.Collections.IEnumerator;
+
+using AST				= antlr.collections.AST;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+	
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*
+	* A Child-Sibling Tree.
+	*
+	* A tree with PLUS at the root and with two children 3 and 4 is
+	* structured as:
+	*
+	*		PLUS
+	*		  |
+	*		  3 -- 4
+	*
+	* and can be specified easily in LISP notation as
+	*
+	* (PLUS 3 4)
+	*
+	* where every '(' starts a new subtree.
+	*
+	* These trees are particular useful for translators because of
+	* the flexibility of the children lists.  They are also very easy
+	* to walk automatically, whereas trees with specific children
+	* reference fields can't easily be walked automatically.
+	*
+	* This class contains the basic support for an AST.
+	* Most people will create ASTs that are subclasses of
+	* BaseAST or of CommonAST.
+	*/
+	[Serializable()] 
+	public abstract class BaseAST : AST
+	{
+		protected internal BaseAST down;
+		protected internal BaseAST right;
+		
+		private static bool verboseStringConversion = false;
+		private static string[] tokenNames = null;
+
+		/*Add a node to the end of the child list for this node */
+		public virtual void  addChild(AST node)
+		{
+			if (node == null)
+				return ;
+			BaseAST t = this.down;
+			if (t != null)
+			{
+				while (t.right != null)
+				{
+					t = t.right;
+				}
+				t.right = (BaseAST) node;
+			}
+			else
+			{
+				this.down = (BaseAST) node;
+			}
+		}
+		
+		private void  doWorkForFindAll(ArrayList v, AST target, bool partialMatch)
+		{
+			AST sibling;
+			
+			// Start walking sibling lists, looking for matches.
+//siblingWalk: 
+			 for (sibling = this; sibling != null; sibling = sibling.getNextSibling())
+			{
+				if ((partialMatch && sibling.EqualsTreePartial(target)) || (!partialMatch && sibling.EqualsTree(target)))
+				{
+					v.Add(sibling);
+				}
+				// regardless of match or not, check any children for matches
+				if (sibling.getFirstChild() != null)
+				{
+					((BaseAST) sibling.getFirstChild()).doWorkForFindAll(v, target, partialMatch);
+				}
+			}
+		}
+		
+		public override bool Equals(object obj) 
+		{      
+			if (obj == null) 
+				return false;       			
+			if (this.GetType() != obj.GetType()) 
+				return false;       			
+			return Equals((AST)obj);       
+		}    
+		
+		/*Is node t equal to this in terms of token type and text? */
+		public virtual bool Equals(AST t)
+		{
+			if (t == null)
+				return false;
+
+			return	(Object.Equals(this.getText(), t.getText())) && 
+					(this.Type == t.Type);
+		}
+		
+		/*Is t an exact structural and equals() match of this tree.  The
+		*  'this' reference is considered the start of a sibling list.
+		*/
+		public virtual bool EqualsList(AST t)
+		{
+			AST sibling;
+			
+			// the empty tree is not a match of any non-null tree.
+			if (t == null)
+			{
+				return false;
+			}
+			
+			// Otherwise, start walking sibling lists.  First mismatch, return false.
+			 for (sibling = this; sibling != null && t != null; sibling = sibling.getNextSibling(), t = t.getNextSibling())
+			{
+				// as a quick optimization, check roots first.
+				if (!sibling.Equals(t))
+				{
+					return false;
+				}
+				// if roots match, do full list match test on children.
+				if (sibling.getFirstChild() != null)
+				{
+					if (!sibling.getFirstChild().EqualsList(t.getFirstChild()))
+					{
+						return false;
+					}
+				}
+				else if (t.getFirstChild() != null)
+				{
+					return false;
+				}
+			}
+			if (sibling == null && t == null)
+			{
+				return true;
+			}
+			// one sibling list has more than the other
+			return false;
+		}
+		
+		/*Is 'sub' a subtree of this list?
+		*  The siblings of the root are NOT ignored.
+		*/
+		public virtual bool EqualsListPartial(AST sub)
+		{
+			AST sibling;
+			
+			// the empty tree is always a subset of any tree.
+			if (sub == null)
+			{
+				return true;
+			}
+			
+			// Otherwise, start walking sibling lists.  First mismatch, return false.
+			 for (sibling = this; sibling != null && sub != null; sibling = sibling.getNextSibling(), sub = sub.getNextSibling())
+			{
+				// as a quick optimization, check roots first.
+				if (!sibling.Equals(sub))
+					return false;
+				// if roots match, do partial list match test on children.
+				if (sibling.getFirstChild() != null)
+				{
+					if (!sibling.getFirstChild().EqualsListPartial(sub.getFirstChild()))
+						return false;
+				}
+			}
+			if (sibling == null && sub != null)
+			{
+				// nothing left to match in this tree, but subtree has more
+				return false;
+			}
+			// either both are null or sibling has more, but subtree doesn't
+			return true;
+		}
+		
+		/*Is tree rooted at 'this' equal to 't'?  The siblings
+		*  of 'this' are ignored.
+		*/
+		public virtual bool EqualsTree(AST t)
+		{
+			// check roots first.
+			if (!this.Equals(t))
+				return false;
+			// if roots match, do full list match test on children.
+			if (this.getFirstChild() != null)
+			{
+				if (!this.getFirstChild().EqualsList(t.getFirstChild()))
+					return false;
+			}
+			else if (t.getFirstChild() != null)
+			{
+				return false;
+			}
+			return true;
+		}
+		
+		/*Is 't' a subtree of the tree rooted at 'this'?  The siblings
+		*  of 'this' are ignored.
+		*/
+		public virtual bool EqualsTreePartial(AST sub)
+		{
+			// the empty tree is always a subset of any tree.
+			if (sub == null)
+			{
+				return true;
+			}
+			
+			// check roots first.
+			if (!this.Equals(sub))
+				return false;
+			// if roots match, do full list partial match test on children.
+			if (this.getFirstChild() != null)
+			{
+				if (!this.getFirstChild().EqualsListPartial(sub.getFirstChild()))
+					return false;
+			}
+			return true;
+		}
+		
+		/*Walk the tree looking for all exact subtree matches.  Return
+		*  an IEnumerator that lets the caller walk the list
+		*  of subtree roots found herein.
+		*/
+		public virtual IEnumerator findAll(AST target)
+		{
+			ArrayList roots = new ArrayList(10);
+			//AST sibling;
+			
+			// the empty tree cannot result in an enumeration
+			if (target == null)
+			{
+				return null;
+			}
+			
+			doWorkForFindAll(roots, target, false); // find all matches recursively
+			
+			return roots.GetEnumerator();
+		}
+		
+		/*Walk the tree looking for all subtrees.  Return
+		*  an IEnumerator that lets the caller walk the list
+		*  of subtree roots found herein.
+		*/
+		public virtual IEnumerator findAllPartial(AST sub)
+		{
+			ArrayList roots = new ArrayList(10);
+			//AST sibling;
+			
+			// the empty tree cannot result in an enumeration
+			if (sub == null)
+			{
+				return null;
+			}
+			
+			doWorkForFindAll(roots, sub, true); // find all matches recursively
+			
+			return roots.GetEnumerator();
+		}
+		
+		/*Get the first child of this node; null if not children */
+		public virtual AST getFirstChild()
+		{
+			return down;
+		}
+		
+		/*Get the next sibling in line after this one */
+		public virtual AST getNextSibling()
+		{
+			return right;
+		}
+		
+		/*Get the token text for this node */
+		public virtual string getText()
+		{
+			return "";
+		}
+		
+		/*Get the token type for this node */
+		public virtual int Type
+		{
+			get { return 0; }
+			set { ; }
+		}
+		
+		/// <summary>
+		/// Get number of children of this node; if leaf, returns 0
+		/// </summary>
+		/// <returns>Number of children</returns>
+		public int getNumberOfChildren() 
+		{
+			BaseAST t = this.down;
+			int n = 0;
+			if (t != null) 
+			{
+				n = 1;
+				while (t.right != null) 
+				{
+					t = t.right;
+					n++;
+				}
+			}
+			return n;
+		}
+
+		public abstract void  initialize(int t, string txt);
+		
+		public abstract void  initialize(AST t);
+		
+		public abstract void  initialize(IToken t);
+		
+		/*Remove all children */
+		public virtual void  removeChildren()
+		{
+			down = null;
+		}
+		
+		public virtual void  setFirstChild(AST c)
+		{
+			down = (BaseAST) c;
+		}
+		
+		public virtual void  setNextSibling(AST n)
+		{
+			right = (BaseAST) n;
+		}
+		
+		/*Set the token text for this node */
+		public virtual void  setText(string text)
+		{
+			;
+		}
+		
+		/*Set the token type for this node */
+		public virtual void  setType(int ttype)
+		{
+			this.Type = ttype;
+		}
+		
+		public static void  setVerboseStringConversion(bool verbose, string[] names)
+		{
+			verboseStringConversion = verbose;
+			tokenNames = names;
+		}
+		
+		override public string ToString()
+		{
+			StringBuilder b = new StringBuilder();
+			// if verbose and type name not same as text (keyword probably)
+			if (verboseStringConversion && 
+					(0 != String.Compare(getText(), (tokenNames[Type]), true)) &&
+					(0 != String.Compare(getText(), StringUtils.stripFrontBack(tokenNames[Type], @"""", @""""), true)))
+			{
+				b.Append('[');
+				b.Append(getText());
+				b.Append(",<");
+				b.Append(tokenNames[Type]);
+				b.Append(">]");
+				return b.ToString();
+			}
+			return getText();
+		}
+		
+		/*Print out a child-sibling tree in LISP notation */
+		public virtual string ToStringList()
+		{
+			AST t = this;
+			string ts = "";
+			if (t.getFirstChild() != null)
+				ts += " (";
+			ts += " " + this.ToString();
+			if (t.getFirstChild() != null)
+			{
+				ts += ((BaseAST) t.getFirstChild()).ToStringList();
+			}
+			if (t.getFirstChild() != null)
+				ts += " )";
+			if (t.getNextSibling() != null)
+			{
+				ts += ((BaseAST) t.getNextSibling()).ToStringList();
+			}
+			return ts;
+		}
+		
+		public virtual string ToStringTree() 
+		{
+			AST t = this;
+			string ts = "";
+			if (t.getFirstChild() != null) 
+			{
+				ts += " (";
+			}
+			ts += " " + this.ToString();
+			if (t.getFirstChild() != null)
+			{
+				ts += ((BaseAST) t.getFirstChild()).ToStringList();
+			}
+			if (t.getFirstChild() != null)
+			{
+				ts += " )";
+			}
+			return ts;
+		 }
+
+		public virtual string ToTree()
+		{
+			return ToTree(string.Empty);
+		}
+		
+		public virtual string ToTree(string prefix) 
+		{
+			StringBuilder sb = new StringBuilder(prefix);
+		
+			// Replace vertical bar if there is no next sibling.
+			if ( (getNextSibling() == null) )
+				sb.Append("+--");
+			else
+				sb.Append("|--");
+		
+			sb.Append( ToString() );
+			sb.Append( Environment.NewLine );
+
+			if ( getFirstChild() != null ) 
+			{
+				// Replace vertical bar if there is no next sibling.
+				if ( getNextSibling() == null )
+					sb.Append( ((BaseAST) getFirstChild()).ToTree(prefix + "   ") );
+				else
+					sb.Append( ((BaseAST) getFirstChild()).ToTree(prefix + "|  ") );
+			}
+
+			if ( getNextSibling() != null )
+				sb.Append( ((BaseAST) getNextSibling()).ToTree(prefix) );
+
+			return sb.ToString();
+		}
+
+		public static string decode(string text)
+		{
+			char c, c1, c2, c3, c4, c5;
+			StringBuilder n = new StringBuilder();
+			 for (int i = 0; i < text.Length; i++)
+			{
+				c = text[i];
+				if (c == '&')
+				{
+					c1 = text[i + 1];
+					c2 = text[i + 2];
+					c3 = text[i + 3];
+					c4 = text[i + 4];
+					c5 = text[i + 5];
+					
+					if (c1 == 'a' && c2 == 'm' && c3 == 'p' && c4 == ';')
+					{
+						n.Append("&");
+						i += 5;
+					}
+					else if (c1 == 'l' && c2 == 't' && c3 == ';')
+					{
+						n.Append("<");
+						i += 4;
+					}
+					else if (c1 == 'g' && c2 == 't' && c3 == ';')
+					{
+						n.Append(">");
+						i += 4;
+					}
+					else if (c1 == 'q' && c2 == 'u' && c3 == 'o' && c4 == 't' && c5 == ';')
+					{
+						n.Append("\"");
+						i += 6;
+					}
+					else if (c1 == 'a' && c2 == 'p' && c3 == 'o' && c4 == 's' && c5 == ';')
+					{
+						n.Append("'");
+						i += 6;
+					}
+					else
+						n.Append("&");
+				}
+				else
+					n.Append(c);
+			}
+			return n.ToString();
+		}
+		
+		public static string encode(string text)
+		{
+			char c;
+			StringBuilder n = new StringBuilder();
+			 for (int i = 0; i < text.Length; i++)
+			{
+				c = text[i];
+				switch (c)
+				{
+					case '&': 
+					{
+						n.Append("&amp;");
+						break;
+					}
+					
+					case '<': 
+					{
+						n.Append("&lt;");
+						break;
+					}
+					
+					case '>': 
+					{
+						n.Append("&gt;");
+						break;
+					}
+					
+					case '"': 
+					{
+						n.Append("&quot;");
+						break;
+					}
+					
+					case '\'': 
+					{
+						n.Append("&apos;");
+						break;
+					}
+					
+					default: 
+					{
+						n.Append(c);
+						break;
+					}
+					
+				}
+			}
+			return n.ToString();
+		}
+		
+		public virtual void  xmlSerializeNode(TextWriter outWriter)
+		{
+			StringBuilder buf = new StringBuilder(100);
+			buf.Append("<");
+			buf.Append(GetType().FullName + " ");
+			buf.Append("text=\"" + encode(getText()) + "\" type=\"" + Type + "\"/>");
+			outWriter.Write(buf.ToString());
+		}
+		
+		public virtual void  xmlSerializeRootOpen(TextWriter outWriter)
+		{
+			StringBuilder buf = new StringBuilder(100);
+			buf.Append("<");
+			buf.Append(GetType().FullName + " ");
+			buf.Append("text=\"" + encode(getText()) + "\" type=\"" + Type + "\">\n");
+			outWriter.Write(buf.ToString());
+		}
+		
+		public virtual void  xmlSerializeRootClose(TextWriter outWriter)
+		{
+			outWriter.Write("</" + GetType().FullName + ">\n");
+		}
+		
+		public virtual void  xmlSerialize(TextWriter outWriter)
+		{
+			// print out this node and all siblings
+			 for (AST node = this; node != null; node = node.getNextSibling())
+			{
+				if (node.getFirstChild() == null)
+				{
+					// print guts (class name, attributes)
+					((BaseAST) node).xmlSerializeNode(outWriter);
+				}
+				else
+				{
+					((BaseAST) node).xmlSerializeRootOpen(outWriter);
+					
+					// print children
+					((BaseAST) node.getFirstChild()).xmlSerialize(outWriter);
+					
+					// print end tag
+					((BaseAST) node).xmlSerializeRootClose(outWriter);
+				}
+			}
+		}
+
+		#region Implementation of ICloneable
+		[Obsolete("Deprecated since version 2.7.2. Use ASTFactory.dup() instead.", false)]
+		public virtual object Clone()
+		{
+			return MemberwiseClone();
+		}
+		#endregion
+
+		public override Int32 GetHashCode() 
+		{
+			return base.GetHashCode();
+		}	
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/BaseAST.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/ByteBuffer.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/ByteBuffer.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/ByteBuffer.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,90 @@
+using System;
+using System.Runtime.InteropServices;
+using Stream		= System.IO.Stream;
+using BinaryReader	= System.IO.BinaryReader;
+using IOException	= System.IO.IOException;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*A Stream of characters fed to the lexer from a InputStream that can
+	* be rewound via mark()/rewind() methods.
+	* <p>
+	* A dynamic array is used to buffer up all the input characters.  Normally,
+	* "k" characters are stored in the buffer.  More characters may be stored during
+	* guess mode (testing syntactic predicate), or when LT(i>k) is referenced.
+	* Consumption of characters is deferred.  In other words, reading the next
+	* character is not done by conume(), but deferred until needed by LA or LT.
+	* <p>
+	*/
+
+	// SAS: added this class to handle Binary input w/ FileInputStream
+	
+	public class ByteBuffer:InputBuffer
+	{
+		
+		// char source
+		[NonSerialized()]
+		internal Stream input;
+		
+		private const int BUF_SIZE = 16;
+		/// <summary>
+		/// Small buffer used to avoid reading individual chars
+		/// </summary>
+		private byte[] buf = new byte[BUF_SIZE];
+
+		
+		/*Create a character buffer */
+		public ByteBuffer(Stream input_) : base()
+		{
+			input = input_;
+		}
+		
+		/*Ensure that the character buffer is sufficiently full */
+		override public void  fill(int amount)
+		{
+//			try
+//			{
+			syncConsume();
+			// Fill the buffer sufficiently to hold needed characters
+			int bytesToRead = (amount + markerOffset) - queue.Count;
+			int c;
+
+			while (bytesToRead > 0)
+			{
+				// Read a few characters
+				c = input.Read(buf, 0, BUF_SIZE);
+				for (int i = 0; i < c; i++)
+				{
+					// Append the next character
+					queue.Add(unchecked((char) buf[i]));
+				}
+				if (c < BUF_SIZE)
+				{
+					queue.Add(CharScanner.EOF_CHAR);
+					break;
+				}
+				bytesToRead -= c;
+			}
+			//			}
+//			catch (IOException io)
+//			{
+//				throw new CharStreamIOException(io);
+//			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/ByteBuffer.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/CharBuffer.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/CharBuffer.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/CharBuffer.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,89 @@
+using System;
+using System.Runtime.InteropServices;
+using TextReader		= System.IO.TextReader;
+using IOException		= System.IO.IOException;
+
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*A Stream of characters fed to the lexer from a InputStream that can
+	* be rewound via mark()/rewind() methods.
+	* <p>
+	* A dynamic array is used to buffer up all the input characters.  Normally,
+	* "k" characters are stored in the buffer.  More characters may be stored during
+	* guess mode (testing syntactic predicate), or when LT(i>k) is referenced.
+	* Consumption of characters is deferred.  In other words, reading the next
+	* character is not done by conume(), but deferred until needed by LA or LT.
+	* <p>
+	*/
+	
+	// SAS: Move most functionality into InputBuffer -- just the file-specific
+	//      stuff is in here
+	public class CharBuffer : InputBuffer
+	{
+		// char source
+		[NonSerialized()]
+		internal TextReader input;
+
+		private const int BUF_SIZE = 16;
+		/// <summary>
+		/// Small buffer used to avoid reading individual chars
+		/// </summary>
+		private char[] buf = new char[BUF_SIZE];
+
+		
+		/*Create a character buffer */
+		public CharBuffer(TextReader input_) : base()
+		{ 
+			input = input_;
+		}
+		
+		/*Ensure that the character buffer is sufficiently full */
+		override public void  fill(int amount)
+		{
+			try
+			{
+				syncConsume();
+				// Fill the buffer sufficiently to hold needed characters
+				int charsToRead = (amount + markerOffset) - queue.Count;
+				int c;
+
+				while (charsToRead > 0)
+				{
+					// Read a few characters
+					c = input.Read(buf, 0, BUF_SIZE);
+					for (int i = 0; i < c; i++)
+					{
+						// Append the next character
+						queue.Add(buf[i]);
+					}
+					if (c < BUF_SIZE)
+					{
+						queue.Add(CharScanner.EOF_CHAR);
+						break;
+					}
+					charsToRead -= c;
+				}
+			}
+			catch (IOException io)
+			{
+				throw new CharStreamIOException(io);
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/CharBuffer.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/CharQueue.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/CharQueue.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/CharQueue.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,120 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	/*A circular buffer object used by CharBuffer */
+	public class CharQueue
+	{
+		/*Physical circular buffer of tokens */
+		protected internal char[] buffer;
+		/*buffer.length-1 for quick modulos */
+		private int sizeLessOne;
+		/*physical index of front token */
+		private int offset;
+		/*number of tokens in the queue */
+		protected internal int nbrEntries;
+		
+		public CharQueue(int minSize)
+		{
+			// Find first power of 2 >= to requested size
+			int size;
+			if (minSize < 0)
+			{
+				init(16); // pick some value for them
+				return ;
+			}
+			// check for overflow
+			if (minSize >= (Int32.MaxValue / 2))
+			{
+				init(Int32.MaxValue); // wow that's big.
+				return ;
+			}
+			for (size = 2; size < minSize; size *= 2) 
+			{ 
+				;
+			}
+			init(size);
+		}
+		
+		/*Add token to end of the queue
+		* @param tok The token to add
+		*/
+		public void append(char tok)
+		{
+			if (nbrEntries == buffer.Length)
+			{
+				expand();
+			}
+			buffer[(offset + nbrEntries) & sizeLessOne] = tok;
+			nbrEntries++;
+		}
+		
+		/*Fetch a token from the queue by index
+		* @param idx The index of the token to fetch, where zero is the token at the front of the queue
+		*/
+		public char elementAt(int idx)
+		{
+			return buffer[(offset + idx) & sizeLessOne];
+		}
+		
+		/*Expand the token buffer by doubling its capacity */
+		private void  expand()
+		{
+			char[] newBuffer = new char[buffer.Length * 2];
+			// Copy the contents to the new buffer
+			// Note that this will store the first logical item in the
+			// first physical array element.
+			 for (int i = 0; i < buffer.Length; i++)
+			{
+				newBuffer[i] = elementAt(i);
+			}
+			// Re-initialize with new contents, keep old nbrEntries
+			buffer = newBuffer;
+			sizeLessOne = buffer.Length - 1;
+			offset = 0;
+		}
+		
+		/*Initialize the queue.
+		* @param size The initial size of the queue
+		*/
+		public virtual void  init(int size)
+		{
+			// Allocate buffer
+			buffer = new char[size];
+			// Other initialization
+			sizeLessOne = size - 1;
+			offset = 0;
+			nbrEntries = 0;
+		}
+		
+		/*Clear the queue. Leaving the previous buffer alone.
+		*/
+		public void  reset()
+		{
+			offset = 0;
+			nbrEntries = 0;
+		}
+		
+		/*Remove char from front of queue */
+		public void  removeFirst()
+		{
+			offset = (offset + 1) & sizeLessOne;
+			nbrEntries--;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/CharQueue.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/CharScanner.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/CharScanner.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/CharScanner.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,800 @@
+using System;
+using Stream			= System.IO.Stream;
+using TextReader		= System.IO.TextReader;
+using StringBuilder		= System.Text.StringBuilder;
+using Hashtable			= System.Collections.Hashtable;
+using Assembly			= System.Reflection.Assembly;
+using EventHandlerList	= System.ComponentModel.EventHandlerList;
+
+using BitSet			= antlr.collections.impl.BitSet;
+using antlr.debug;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	public abstract class CharScanner : TokenStream, ICharScannerDebugSubject
+	{
+		internal const char NO_CHAR = (char) (0);
+		public static readonly char EOF_CHAR = Char.MaxValue;
+
+		// Used to store event delegates
+		private EventHandlerList events_ = new EventHandlerList();
+
+		protected internal EventHandlerList Events 
+		{
+			get	{ return events_;	}
+		}
+
+		// The unique keys for each event that CharScanner [objects] can generate
+		internal static readonly object EnterRuleEventKey			= new object();
+		internal static readonly object ExitRuleEventKey			= new object();
+		internal static readonly object DoneEventKey				= new object();
+		internal static readonly object ReportErrorEventKey			= new object();
+		internal static readonly object ReportWarningEventKey		= new object();
+		internal static readonly object NewLineEventKey				= new object();
+		internal static readonly object MatchEventKey				= new object();
+		internal static readonly object MatchNotEventKey			= new object();
+		internal static readonly object MisMatchEventKey			= new object();
+		internal static readonly object MisMatchNotEventKey			= new object();
+		internal static readonly object ConsumeEventKey				= new object();
+		internal static readonly object LAEventKey					= new object();
+		internal static readonly object SemPredEvaluatedEventKey	= new object();
+		internal static readonly object SynPredStartedEventKey		= new object();
+		internal static readonly object SynPredFailedEventKey		= new object();
+		internal static readonly object SynPredSucceededEventKey	= new object();
+
+		protected internal StringBuilder text;				// text of current token
+		
+		protected bool saveConsumedInput = true;	// does consume() save characters?
+
+		/// <summary>Used for creating Token instances.</summary>
+		protected TokenCreator	tokenCreator;
+
+		/// <summary>Used for caching lookahead characters.</summary>
+		protected char			cached_LA1;
+		protected char			cached_LA2;
+
+		protected bool caseSensitive = true;
+		protected bool caseSensitiveLiterals = true;
+		protected Hashtable literals; // set by subclass
+		
+		/*Tab chars are handled by tab() according to this value; override
+		*  method to do anything weird with tabs.
+		*/
+		protected internal int tabsize = 8;
+		
+		protected internal IToken returnToken_ = null; // used to return tokens w/o using return val.
+		
+		protected internal LexerSharedInputState inputState;
+		
+		/*Used during filter mode to indicate that path is desired.
+		*  A subsequent scan error will report an error as usual if
+		*  acceptPath=true;
+		*/
+		protected internal bool commitToPath = false;
+		
+		/*Used to keep track of indentdepth for traceIn/Out */
+		protected internal int traceDepth = 0;
+		
+		public CharScanner()
+		{
+			text = new StringBuilder();
+			setTokenCreator(new CommonToken.CommonTokenCreator());
+		}
+		
+		public CharScanner(InputBuffer cb) : this()
+		{
+			inputState = new LexerSharedInputState(cb);
+			cached_LA2 = inputState.input.LA(2);
+			cached_LA1 = inputState.input.LA(1);
+		}
+		
+		public CharScanner(LexerSharedInputState sharedState) : this()
+		{
+			inputState = sharedState;
+			if (inputState != null)
+			{
+				cached_LA2 = inputState.input.LA(2);
+				cached_LA1 = inputState.input.LA(1);
+		}
+	}
+		
+
+		public event TraceEventHandler EnterRule
+		{
+			add		{	Events.AddHandler(EnterRuleEventKey, value);	}
+			remove	{	Events.RemoveHandler(EnterRuleEventKey, value);	}
+		}
+
+		public event TraceEventHandler ExitRule
+		{
+			add		{	Events.AddHandler(ExitRuleEventKey, value);		}
+			remove	{	Events.RemoveHandler(ExitRuleEventKey, value);	}
+		}
+
+		public event TraceEventHandler Done
+		{
+			add		{	Events.AddHandler(DoneEventKey, value);		}
+			remove	{	Events.RemoveHandler(DoneEventKey, value);	}
+		}
+
+		public event MessageEventHandler ErrorReported
+		{
+			add		{	Events.AddHandler(ReportErrorEventKey, value);		}
+			remove	{	Events.RemoveHandler(ReportErrorEventKey, value);	}
+		}
+
+		public event MessageEventHandler WarningReported
+		{
+			add		{	Events.AddHandler(ReportWarningEventKey, value);	}
+			remove	{	Events.RemoveHandler(ReportWarningEventKey, value);	}
+		}
+
+		public event NewLineEventHandler HitNewLine
+		{
+			add		{	Events.AddHandler(NewLineEventKey, value);		}
+			remove	{	Events.RemoveHandler(NewLineEventKey, value);	}
+		}
+
+		public event MatchEventHandler MatchedChar
+		{
+			add		{	Events.AddHandler(MatchEventKey, value);	}
+			remove	{	Events.RemoveHandler(MatchEventKey, value);	}
+		}
+
+		public event MatchEventHandler MatchedNotChar
+		{
+			add		{	Events.AddHandler(MatchNotEventKey, value);		}
+			remove	{	Events.RemoveHandler(MatchNotEventKey, value);	}
+		}
+
+		public event MatchEventHandler MisMatchedChar
+		{
+			add		{	Events.AddHandler(MisMatchEventKey, value);		}
+			remove	{	Events.RemoveHandler(MisMatchEventKey, value);	}
+		}
+
+		public event MatchEventHandler MisMatchedNotChar
+		{
+			add		{	Events.AddHandler(MisMatchNotEventKey, value);		}
+			remove	{	Events.RemoveHandler(MisMatchNotEventKey, value);	}
+		}
+
+		public event TokenEventHandler ConsumedChar
+		{
+			add		{	Events.AddHandler(ConsumeEventKey, value);		}
+			remove	{	Events.RemoveHandler(ConsumeEventKey, value);	}
+		}
+
+		public event TokenEventHandler CharLA
+		{
+			add		{	Events.AddHandler(LAEventKey, value);		}
+			remove	{	Events.RemoveHandler(LAEventKey, value);	}
+		}
+
+		public event SemanticPredicateEventHandler SemPredEvaluated
+		{
+			add		{	Events.AddHandler(SemPredEvaluatedEventKey, value);		}
+			remove	{	Events.RemoveHandler(SemPredEvaluatedEventKey, value);	}
+		}
+
+		public event SyntacticPredicateEventHandler SynPredStarted
+		{
+			add		{	Events.AddHandler(SynPredStartedEventKey, value);		}
+			remove	{	Events.RemoveHandler(SynPredStartedEventKey, value);	}
+		}
+
+		public event SyntacticPredicateEventHandler SynPredFailed
+		{
+			add		{	Events.AddHandler(SynPredFailedEventKey, value);	}
+			remove	{	Events.RemoveHandler(SynPredFailedEventKey, value);	}
+		}
+
+		public event SyntacticPredicateEventHandler SynPredSucceeded
+		{
+			add		{	Events.AddHandler(SynPredSucceededEventKey, value);		}
+			remove	{	Events.RemoveHandler(SynPredSucceededEventKey, value);	}
+		}
+
+		// From interface TokenStream
+		public virtual IToken nextToken() { return null; }
+
+		public virtual void  append(char c)
+		{
+			if (saveConsumedInput)
+			{
+				text.Append(c);
+			}
+		}
+		
+		public virtual void  append(string s)
+		{
+			if (saveConsumedInput)
+			{
+				text.Append(s);
+			}
+		}
+		
+		public virtual void  commit()
+		{
+			inputState.input.commit();
+		}
+		
+		public virtual void  consume()
+		{
+			if (inputState.guessing == 0)
+			{
+				if (caseSensitive)
+				{
+					append(cached_LA1);
+				}
+				else
+				{
+					// use input.LA(), not LA(), to get original case
+					// CharScanner.LA() would toLower it.
+					append(inputState.input.LA(1));
+				}
+				if (cached_LA1 == '\t')
+				{
+					tab();
+				}
+				else
+				{
+					inputState.column++;
+				}
+			}
+			if (caseSensitive)
+			{
+				cached_LA1 = inputState.input.consume();
+				cached_LA2 = inputState.input.LA(2);
+			}
+			else
+			{
+				cached_LA1 = toLower(inputState.input.consume());
+				cached_LA2 = toLower(inputState.input.LA(2));
+			}
+		}
+		
+		/*Consume chars until one matches the given char */
+		public virtual void  consumeUntil(int c)
+		{
+			while ((EOF_CHAR != cached_LA1) && (c != cached_LA1))
+			{
+				consume();
+			}
+		}
+		
+		/*Consume chars until one matches the given set */
+		public virtual void  consumeUntil(BitSet bset)
+		{
+			while (cached_LA1 != EOF_CHAR && !bset.member(cached_LA1))
+			{
+				consume();
+			}
+		}
+		
+		public virtual bool getCaseSensitive()
+		{
+			return caseSensitive;
+		}
+		
+		public bool getCaseSensitiveLiterals()
+		{
+			return caseSensitiveLiterals;
+		}
+		
+		public virtual int getColumn()
+		{
+			return inputState.column;
+		}
+		
+		public virtual void  setColumn(int c)
+		{
+			inputState.column = c;
+		}
+		
+		public virtual bool getCommitToPath()
+		{
+			return commitToPath;
+		}
+		
+		public virtual string getFilename()
+		{
+			return inputState.filename;
+		}
+		
+		public virtual InputBuffer getInputBuffer()
+		{
+			return inputState.input;
+		}
+		
+		public virtual LexerSharedInputState getInputState()
+		{
+			return inputState;
+		}
+		
+		public virtual void  setInputState(LexerSharedInputState state)
+		{
+			inputState = state;
+		}
+		
+		public virtual int getLine()
+		{
+			return inputState.line;
+		}
+		
+		/*return a copy of the current text buffer */
+		public virtual string getText()
+		{
+			return text.ToString();
+		}
+		
+		public virtual IToken getTokenObject()
+		{
+			return returnToken_;
+		}
+		
+		public virtual char LA(int i)
+		{
+			if (i == 1)
+			{
+				return cached_LA1;
+			}
+			if (i == 2)
+			{
+				return cached_LA2;
+			}
+			if (caseSensitive)
+			{
+				return inputState.input.LA(i);
+			}
+			else
+			{
+				return toLower(inputState.input.LA(i));
+			}
+		}
+		
+		protected internal virtual IToken makeToken(int t)
+		{
+			IToken	newToken	= null;
+			bool	typeCreated;
+
+			try
+			{
+				newToken = tokenCreator.Create();
+				if (newToken != null)
+				{
+					newToken.Type = t;
+					newToken.setColumn(inputState.tokenStartColumn);
+					newToken.setLine(inputState.tokenStartLine);
+					// tracking real start line now: newToken.setLine(inputState.line);
+					newToken.setFilename(inputState.filename);
+				}
+				typeCreated	= true;
+			}
+			catch
+			{
+				typeCreated = false;
+			}
+
+			if (!typeCreated)
+			{
+				panic("Can't create Token object '" + tokenCreator.TokenTypeName + "'");
+				newToken = Token.badToken;
+			}
+			return newToken;
+		}
+		
+		public virtual int mark()
+		{
+			return inputState.input.mark();
+		}
+		
+		public virtual void  match(char c)
+		{
+			match((int) c);
+		}
+
+		public virtual void  match(int c)
+		{
+			if (cached_LA1 != c)
+			{
+				throw new MismatchedCharException(cached_LA1, Convert.ToChar(c), false, this);
+			}
+			consume();
+		}
+		
+		public virtual void  match(BitSet b)
+		{
+			if (!b.member(cached_LA1))
+			{
+				throw new MismatchedCharException(cached_LA1, b, false, this);
+			}
+			consume();
+		}
+		
+		public virtual void  match(string s)
+		{
+			int len = s.Length;
+			 for (int i = 0; i < len; i++)
+			{
+				if (cached_LA1 != s[i])
+				{
+					throw new MismatchedCharException(cached_LA1, s[i], false, this);
+				}
+				consume();
+			}
+		}
+		
+		public virtual void  matchNot(char c)
+		{
+			matchNot((int) c);
+		}
+		
+		public virtual void  matchNot(int c)
+		{
+			if (cached_LA1 == c)
+			{
+				throw new MismatchedCharException(cached_LA1, Convert.ToChar(c), true, this);
+			}
+			consume();
+		}
+		
+		public virtual void  matchRange(int c1, int c2)
+		{
+			if (cached_LA1 < c1 || cached_LA1 > c2)
+			{
+				throw new MismatchedCharException(cached_LA1, Convert.ToChar(c1), Convert.ToChar(c2), false, this);
+			}
+			consume();
+		}
+		
+		public virtual void  matchRange(char c1, char c2)
+		{
+			matchRange((int) c1, (int) c2);
+		}
+		
+		public virtual void  newline()
+		{
+			inputState.line++;
+			inputState.column = 1;
+		}
+		
+		/*advance the current column number by an appropriate amount
+		*  according to tab size. This method is called from consume().
+		*/
+		public virtual void  tab()
+		{
+			int c = getColumn();
+			int nc = (((c - 1) / tabsize) + 1) * tabsize + 1; // calculate tab stop
+			setColumn(nc);
+		}
+		
+		public virtual void  setTabSize(int size)
+		{
+			tabsize = size;
+		}
+		
+		public virtual int getTabSize()
+		{
+			return tabsize;
+		}
+		
+		public virtual void panic()
+		{
+			//Console.Error.WriteLine("CharScanner: panic");
+			//Environment.Exit(1);
+			panic("");
+
+		}
+		
+		/// <summary>
+		/// This method is executed by ANTLR internally when it detected an illegal
+		/// state that cannot be recovered from.
+		/// The previous implementation of this method called <see cref="Environment.Exit"/>
+		/// and writes directly to <see cref="Console.Error"/>, which is usually not 
+		/// appropriate when a translator is embedded into a larger application.
+		/// </summary>
+		/// <param name="s">Error message.</param>
+		public virtual void panic(string s)
+		{
+			//Console.Error.WriteLine("CharScanner; panic: " + s);
+			//Environment.Exit(1);
+			throw new ANTLRPanicException("CharScanner::panic: " + s);
+		}
+		
+		/*Parser error-reporting function can be overridden in subclass */
+		public virtual void  reportError(RecognitionException ex)
+		{
+			Console.Error.WriteLine(ex);
+		}
+		
+		/*Parser error-reporting function can be overridden in subclass */
+		public virtual void  reportError(string s)
+		{
+			if (getFilename() == null)
+			{
+				Console.Error.WriteLine("error: " + s);
+			}
+			else
+			{
+				Console.Error.WriteLine(getFilename() + ": error: " + s);
+			}
+		}
+		
+		/*Parser warning-reporting function can be overridden in subclass */
+		public virtual void  reportWarning(string s)
+		{
+			if (getFilename() == null)
+			{
+				Console.Error.WriteLine("warning: " + s);
+			}
+			else
+			{
+				Console.Error.WriteLine(getFilename() + ": warning: " + s);
+			}
+		}
+		
+		public virtual void refresh()
+		{
+			if (caseSensitive)
+			{
+				cached_LA2 = inputState.input.LA(2);
+				cached_LA1 = inputState.input.LA(1);
+			}
+			else
+			{
+				cached_LA2 = toLower(inputState.input.LA(2));
+				cached_LA1 = toLower(inputState.input.LA(1));
+			}
+		}
+
+		public virtual void resetState(InputBuffer ib)
+		{
+			text.Length = 0;
+			traceDepth = 0;
+			inputState.resetInput(ib);
+			refresh();
+		}
+
+		public void resetState(Stream s)
+		{
+			resetState(new ByteBuffer(s));
+		}
+
+		public void resetState(TextReader tr)
+		{
+			resetState(new CharBuffer(tr));
+		}
+
+		public virtual void  resetText()
+		{
+			text.Length = 0;
+			inputState.tokenStartColumn = inputState.column;
+			inputState.tokenStartLine = inputState.line;
+		}
+		
+		public virtual void  rewind(int pos)
+		{
+			inputState.input.rewind(pos);
+			//setColumn(inputState.tokenStartColumn);
+			cached_LA2 = inputState.input.LA(2);
+			cached_LA1 = inputState.input.LA(1);
+		}
+		
+		public virtual void  setCaseSensitive(bool t)
+		{
+			caseSensitive = t;
+			if (caseSensitive)
+			{
+				cached_LA2 = inputState.input.LA(2);
+				cached_LA1 = inputState.input.LA(1);
+			}
+			else
+			{
+				cached_LA2 = toLower(inputState.input.LA(2));
+				cached_LA1 = toLower(inputState.input.LA(1));
+			}
+		}
+		
+		public virtual void  setCommitToPath(bool commit)
+		{
+			commitToPath = commit;
+		}
+		
+		public virtual void  setFilename(string f)
+		{
+			inputState.filename = f;
+		}
+		
+		public virtual void  setLine(int line)
+		{
+			inputState.line = line;
+		}
+		
+		public virtual void  setText(string s)
+		{
+			resetText();
+			text.Append(s);
+		}
+		
+		public virtual void  setTokenObjectClass(string cl)
+		{
+			this.tokenCreator = new ReflectionBasedTokenCreator(this, cl);
+		}
+		
+		public virtual void  setTokenCreator(TokenCreator tokenCreator)
+		{
+			this.tokenCreator = tokenCreator;
+		}
+		
+		// Test the token text against the literals table
+		// Override this method to perform a different literals test
+		public virtual int testLiteralsTable(int ttype)
+		{
+			string tokenText = text.ToString();
+
+			if ( (tokenText == null) || (tokenText == string.Empty) )
+				return ttype;
+			else
+			{
+				object typeAsObject = literals[tokenText];
+				return (typeAsObject == null) ? ttype : ((int) typeAsObject);
+			}
+		}
+		
+		/*Test the text passed in against the literals table
+		* Override this method to perform a different literals test
+		* This is used primarily when you want to test a portion of
+		* a token.
+		*/
+		public virtual int testLiteralsTable(string someText, int ttype)
+		{
+			if ( (someText == null) || (someText == string.Empty) )
+				return ttype;
+			else
+			{
+				object typeAsObject = literals[someText];
+				return (typeAsObject == null) ? ttype : ((int) typeAsObject);
+			}
+		}
+		
+		// Override this method to get more specific case handling
+		public virtual char toLower(int c)
+		{
+			return Char.ToLower(Convert.ToChar(c), System.Globalization.CultureInfo.InvariantCulture);
+		}
+		
+		public virtual void  traceIndent()
+		{
+			 for (int i = 0; i < traceDepth; i++)
+				Console.Out.Write(" ");
+		}
+		
+		public virtual void  traceIn(string rname)
+		{
+			traceDepth += 1;
+			traceIndent();
+			Console.Out.WriteLine("> lexer " + rname + "; c==" + LA(1));
+		}
+		
+		public virtual void  traceOut(string rname)
+		{
+			traceIndent();
+			Console.Out.WriteLine("< lexer " + rname + "; c==" + LA(1));
+			traceDepth -= 1;
+		}
+		
+		/*This method is called by YourLexer.nextToken() when the lexer has
+		*  hit EOF condition.  EOF is NOT a character.
+		*  This method is not called if EOF is reached during
+		*  syntactic predicate evaluation or during evaluation
+		*  of normal lexical rules, which presumably would be
+		*  an IOException.  This traps the "normal" EOF condition.
+		*
+		*  uponEOF() is called after the complete evaluation of
+		*  the previous token and only if your parser asks
+		*  for another token beyond that last non-EOF token.
+		*
+		*  You might want to throw token or char stream exceptions
+		*  like: "Heh, premature eof" or a retry stream exception
+		*  ("I found the end of this file, go back to referencing file").
+		*/
+		public virtual void  uponEOF()
+		{
+		}
+
+		private class ReflectionBasedTokenCreator : TokenCreator
+		{
+			protected ReflectionBasedTokenCreator() {}
+
+			public ReflectionBasedTokenCreator(CharScanner owner, string tokenTypeName)
+			{
+				this.owner = owner;
+				SetTokenType(tokenTypeName);
+			}
+
+			private CharScanner owner;
+
+			/// <summary>
+			/// The fully qualified name of the Token type to create.
+			/// </summary>
+			private string tokenTypeName;
+
+			/// <summary>
+			/// Type object used as a template for creating tokens by reflection.
+			/// </summary>
+			private Type tokenTypeObject;
+
+			/// <summary>
+			/// Returns the fully qualified name of the Token type that this
+			/// class creates.
+			/// </summary>
+			private void SetTokenType(string tokenTypeName)
+			{
+				this.tokenTypeName = tokenTypeName;
+				foreach (Assembly assem in AppDomain.CurrentDomain.GetAssemblies())
+				{
+					try
+					{
+						tokenTypeObject = assem.GetType(tokenTypeName);
+						if (tokenTypeObject != null)
+						{
+							break;
+						}
+					}
+					catch
+					{
+						throw new TypeLoadException("Unable to load Type for Token class '" + tokenTypeName + "'");
+					}
+				}
+				if (tokenTypeObject==null)
+					throw new TypeLoadException("Unable to load Type for Token class '" + tokenTypeName + "'");
+			}
+
+			/// <summary>
+			/// Returns the fully qualified name of the Token type that this
+			/// class creates.
+			/// </summary>
+			public override string TokenTypeName
+			{
+				get
+				{ 
+					return tokenTypeName; 
+				}
+			}
+
+			/// <summary>
+			/// Constructs a <see cref="Token"/> instance.
+			/// </summary>
+			public override IToken Create()
+			{
+				IToken newToken = null;
+
+				try
+				{
+					newToken = (Token) Activator.CreateInstance(tokenTypeObject);
+				}
+				catch
+				{
+					// supress exception
+				}
+				return newToken;
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/CharScanner.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/CharStreamException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/CharStreamException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/CharStreamException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,34 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*
+	* Anything that goes wrong while generating a stream of characters
+	*/
+
+	[Serializable]
+	public class CharStreamException : ANTLRException
+	{
+		/*
+		* CharStreamException constructor comment.
+		*/
+		public CharStreamException(string s) : base(s)
+		{
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/CharStreamException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/CharStreamIOException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/CharStreamIOException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/CharStreamIOException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,34 @@
+using System;
+using IOException = System.IO.IOException;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	/*
+	* Wrap an IOException in a CharStreamException
+	*/
+	[Serializable]
+	public class CharStreamIOException : CharStreamException
+	{
+		public IOException io;
+		
+		public CharStreamIOException(IOException io) : base(io.Message)
+		{
+			this.io = io;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/CharStreamIOException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/CommonAST.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/CommonAST.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/CommonAST.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,123 @@
+using System;
+using AST = antlr.collections.AST;
+	
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*Common AST node implementation */
+	public class CommonAST : BaseAST
+	{
+		public static readonly CommonAST.CommonASTCreator Creator = new CommonASTCreator();
+
+		internal int ttype = Token.INVALID_TYPE;
+		internal string text;
+		
+		
+		[Obsolete("Deprecated since version 2.7.2. Use ASTFactory.dup() instead.", false)]
+		protected CommonAST(CommonAST another)
+		{
+			// don't include child/sibling pointers in Clone()/dup()
+			//down	= another.down;
+			//right	= another.right;
+			ttype	= another.ttype;
+			text	= (another.text==null) ? null : String.Copy(another.text);
+		}
+
+		/*Get the token text for this node */
+		override public string getText()
+		{
+			return text;
+		}
+		
+		/*Get the token type for this node */
+		override public int Type
+		{
+			get { return ttype;   }
+			set { ttype = value; }
+		}
+		
+		override public void  initialize(int t, string txt)
+		{
+			Type = t;
+			setText(txt);
+		}
+		
+		override public void  initialize(AST t)
+		{
+			setText(t.getText());
+			Type = t.Type;
+		}
+		
+		public CommonAST()
+		{
+		}
+		
+		public CommonAST(IToken tok)
+		{
+			initialize(tok);
+		}
+		
+		override public void  initialize(IToken tok)
+		{
+			setText(tok.getText());
+			Type = tok.Type;
+		}
+		/*Set the token text for this node */
+		override public void  setText(string text_)
+		{
+			text = text_;
+		}
+		/*Set the token type for this node */
+		override public void  setType(int ttype_)
+		{
+			this.Type = ttype_;
+		}
+
+		#region Implementation of ICloneable
+		[Obsolete("Deprecated since version 2.7.2. Use ASTFactory.dup() instead.", false)]
+		override public object Clone()
+		{
+			return new CommonAST(this);
+		}
+		#endregion
+
+		public class CommonASTCreator : ASTNodeCreator
+		{
+			public CommonASTCreator() {}
+
+			/// <summary>
+			/// Returns the fully qualified name of the AST type that this
+			/// class creates.
+			/// </summary>
+			public override string ASTNodeTypeName
+			{
+				get 
+				{ 
+					return typeof(antlr.CommonAST).FullName;; 
+				}
+			}
+
+			/// <summary>
+			/// Constructs a <see cref="AST"/> instance.
+			/// </summary>
+			public override AST Create()
+			{
+				return new CommonAST();
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/CommonAST.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/CommonASTWithHiddenTokens.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/CommonASTWithHiddenTokens.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/CommonASTWithHiddenTokens.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,104 @@
+using System;
+using AST		= antlr.collections.AST;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*A CommonAST whose initialization copies hidden token
+	*  information from the Token used to create a node.
+	*/
+
+	public class CommonASTWithHiddenTokens : CommonAST
+	{
+		new public static readonly CommonASTWithHiddenTokens.CommonASTWithHiddenTokensCreator Creator = new CommonASTWithHiddenTokensCreator();
+
+		protected internal IHiddenStreamToken hiddenBefore, hiddenAfter; // references to hidden tokens
+		
+		public CommonASTWithHiddenTokens() : base()
+		{
+		}
+		
+		public CommonASTWithHiddenTokens(IToken tok) : base(tok)
+		{
+		}
+		
+		[Obsolete("Deprecated since version 2.7.2. Use ASTFactory.dup() instead.", false)]
+		protected CommonASTWithHiddenTokens(CommonASTWithHiddenTokens another) : base(another)
+		{
+			hiddenBefore	= another.hiddenBefore;
+			hiddenAfter	= another.hiddenAfter;
+		}
+
+		public virtual IHiddenStreamToken getHiddenAfter()
+		{
+			return hiddenAfter;
+		}
+		
+		public virtual IHiddenStreamToken getHiddenBefore()
+		{
+			return hiddenBefore;
+		}
+		
+		override public void initialize(AST t)
+		{
+			hiddenBefore = ((CommonASTWithHiddenTokens) t).getHiddenBefore();
+			hiddenAfter  = ((CommonASTWithHiddenTokens) t).getHiddenAfter();
+			base.initialize(t);
+		}
+
+		override public void initialize(IToken tok)
+		{
+			IHiddenStreamToken t = (IHiddenStreamToken) tok;
+			base.initialize(t);
+			hiddenBefore = t.getHiddenBefore();
+			hiddenAfter  = t.getHiddenAfter();
+		}
+
+		#region Implementation of ICloneable
+		[Obsolete("Deprecated since version 2.7.2. Use ASTFactory.dup() instead.", false)]
+		override public object Clone()
+		{
+			return new CommonASTWithHiddenTokens(this);
+		}
+		#endregion
+
+		public class CommonASTWithHiddenTokensCreator : ASTNodeCreator
+		{
+			public CommonASTWithHiddenTokensCreator() {}
+
+			/// <summary>
+			/// Returns the fully qualified name of the AST type that this
+			/// class creates.
+			/// </summary>
+			public override string ASTNodeTypeName
+			{
+				get 
+				{ 
+					return typeof(antlr.CommonASTWithHiddenTokens).FullName;; 
+				}
+			}
+
+			/// <summary>
+			/// Constructs a <see cref="AST"/> instance.
+			/// </summary>
+			public override AST Create()
+			{
+				return new CommonASTWithHiddenTokens();
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/CommonASTWithHiddenTokens.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/CommonHiddenStreamToken.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/CommonHiddenStreamToken.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/CommonHiddenStreamToken.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,84 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	public class CommonHiddenStreamToken : CommonToken, IHiddenStreamToken
+	{
+		new public static readonly CommonHiddenStreamToken.CommonHiddenStreamTokenCreator Creator = new CommonHiddenStreamTokenCreator();
+
+		protected internal IHiddenStreamToken hiddenBefore;
+		protected internal IHiddenStreamToken hiddenAfter;
+		
+		public CommonHiddenStreamToken() : base()
+		{
+		}
+		
+		public CommonHiddenStreamToken(int t, string txt) : base(t, txt)
+		{
+		}
+		
+		public CommonHiddenStreamToken(string s) : base(s)
+		{
+		}
+		
+		public virtual IHiddenStreamToken getHiddenAfter()
+		{
+			return hiddenAfter;
+		}
+		
+		public virtual IHiddenStreamToken getHiddenBefore()
+		{
+			return hiddenBefore;
+		}
+		
+		public virtual void  setHiddenAfter(IHiddenStreamToken t)
+		{
+			hiddenAfter = t;
+		}
+		
+		public virtual void  setHiddenBefore(IHiddenStreamToken t)
+		{
+			hiddenBefore = t;
+		}
+
+		public class CommonHiddenStreamTokenCreator : TokenCreator
+		{
+			public CommonHiddenStreamTokenCreator() {}
+
+			/// <summary>
+			/// Returns the fully qualified name of the Token type that this
+			/// class creates.
+			/// </summary>
+			public override string TokenTypeName
+			{
+				get 
+				{ 
+					return typeof(antlr.CommonHiddenStreamToken).FullName;; 
+				}
+			}
+
+			/// <summary>
+			/// Constructs a <see cref="Token"/> instance.
+			/// </summary>
+			public override IToken Create()
+			{
+				return new CommonHiddenStreamToken();
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/CommonHiddenStreamToken.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/CommonToken.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/CommonToken.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/CommonToken.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,105 @@
+using System;
+	
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	public class CommonToken : Token
+	{
+		public static readonly CommonToken.CommonTokenCreator Creator = new CommonTokenCreator();
+
+		// most tokens will want line and text information
+		protected internal int line;
+		protected internal string text = null;
+		protected internal int col;
+		
+		public CommonToken()
+		{
+		}
+		
+		public CommonToken(int t, string txt)
+		{
+			type_ = t;
+			setText(txt);
+		}
+		
+		public CommonToken(string s)
+		{
+			text = s;
+		}
+		
+		override public int getLine()
+		{
+			return line;
+		}
+		
+		override public string getText()
+		{
+			return text;
+		}
+		
+		override public void  setLine(int l)
+		{
+			line = l;
+		}
+		
+		override public void  setText(string s)
+		{
+			text = s;
+		}
+		
+		override public string ToString()
+		{
+			return "[\"" + getText() + "\",<" + type_ + ">,line=" + line + ",col=" + col + "]";
+		}
+		
+		/*Return token's start column */
+		override public int getColumn()
+		{
+			return col;
+		}
+		
+		override public void  setColumn(int c)
+		{
+			col = c;
+		}
+
+		public class CommonTokenCreator : TokenCreator
+		{
+			public CommonTokenCreator() {}
+
+			/// <summary>
+			/// Returns the fully qualified name of the Token type that this
+			/// class creates.
+			/// </summary>
+			public override string TokenTypeName
+			{
+				get 
+				{ 
+					return typeof(antlr.CommonToken).FullName;; 
+				}
+			}
+
+			/// <summary>
+			/// Constructs a <see cref="Token"/> instance.
+			/// </summary>
+			public override IToken Create()
+			{
+				return new CommonToken();
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/CommonToken.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/DefaultFileLineFormatter.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/DefaultFileLineFormatter.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/DefaultFileLineFormatter.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,48 @@
+using System;
+using StringBuilder			= System.Text.StringBuilder;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+	
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	public class DefaultFileLineFormatter : FileLineFormatter
+	{
+		public override string getFormatString(string fileName, int line, int column)
+		{
+			StringBuilder buf = new StringBuilder();
+			
+			if (fileName != null)
+				buf.Append(fileName + ":");
+			
+			if (line != - 1)
+			{
+				if (fileName == null)
+					buf.Append("line ");
+				
+				buf.Append(line);
+				
+				if (column != - 1)
+					buf.Append(":" + column);
+				
+				buf.Append(":");
+			}
+			
+			buf.Append(" ");
+			
+			return buf.ToString();
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/DefaultFileLineFormatter.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/DumpASTVisitor.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/DumpASTVisitor.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/DumpASTVisitor.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,95 @@
+using System;
+
+using AST			= antlr.collections.AST;
+
+namespace antlr
+{
+	/* ANTLR Translator Generator
+	 * Project led by Terence Parr at http://www.jGuru.com
+	 * Software rights: http://www.antlr.org/license.html
+	 *
+	 * $Id:$
+	 */
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	/// <summary>
+	/// Summary description for DumpASTVisitor.
+	/// </summary>
+	/** Simple class to dump the contents of an AST to the output */
+	public class DumpASTVisitor : ASTVisitor 
+	{
+		protected int level = 0;
+
+
+		private void tabs() 
+		{
+			for (int i = 0; i < level; i++) 
+			{
+				Console.Out.Write("   ");
+			}
+		}
+
+		public void visit(AST node) 
+		{
+			// Flatten this level of the tree if it has no children
+			bool flatten = /*true*/ false;
+			AST node2;
+			for (node2 = node; node2 != null; node2 = node2.getNextSibling()) 
+			{
+				if (node2.getFirstChild() != null) 
+				{
+					flatten = false;
+					break;
+				}
+			}
+
+			for (node2 = node; node2 != null; node2 = node2.getNextSibling()) 
+			{
+				if (!flatten || node2 == node) 
+				{
+					tabs();
+				}
+				if (node2.getText() == null) 
+				{
+					Console.Out.Write("nil");
+				}
+				else 
+				{
+					Console.Out.Write(node2.getText());
+				}
+
+				Console.Out.Write(" [" + node2.Type + "] ");
+
+				if (flatten) 
+				{
+					Console.Out.Write(" ");
+				}
+				else 
+				{
+					Console.Out.WriteLine("");
+				}
+
+				if (node2.getFirstChild() != null) 
+				{
+					level++;
+					visit(node2.getFirstChild());
+					level--;
+				}
+			}
+
+			if (flatten) 
+			{
+				Console.Out.WriteLine("");
+			}
+		}
+	}  
+}
+
+


Property changes on: trunk/src/antlr-runtime/antlr/DumpASTVisitor.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/FileLineFormatter.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/FileLineFormatter.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/FileLineFormatter.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,41 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+	
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	public abstract class FileLineFormatter
+	{
+		
+		private static FileLineFormatter formatter = new DefaultFileLineFormatter();
+		
+		public static FileLineFormatter getFormatter()
+		{
+			return formatter;
+		}
+		
+		public static void  setFormatter(FileLineFormatter f)
+		{
+			formatter = f;
+		}
+		
+		/*@param fileName the file that should appear in the prefix. (or null)
+		* @param line the line (or -1)
+		* @param column the column (or -1)
+		*/
+		public abstract string getFormatString(string fileName, int line, int column);
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/FileLineFormatter.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/IHiddenStreamToken.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/IHiddenStreamToken.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/IHiddenStreamToken.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,28 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	public interface IHiddenStreamToken : IToken
+	{
+		IHiddenStreamToken	getHiddenAfter();
+		void				setHiddenAfter(IHiddenStreamToken t);
+
+		IHiddenStreamToken	getHiddenBefore();
+		void				setHiddenBefore(IHiddenStreamToken t);
+	}
+}
\ No newline at end of file

Added: trunk/src/antlr-runtime/antlr/IToken.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/IToken.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/IToken.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,40 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/// <summary>
+	/// A token is minimally a token type.  Subclasses can add the text matched
+	/// for the token and line info. 
+	/// </summary>
+	public interface IToken
+	{
+		int		getColumn();
+		void	setColumn(int c);
+
+		int		getLine();
+		void	setLine(int l);
+
+		string	getFilename();
+		void	setFilename(string name);
+
+		string	getText();
+		void	setText(string t);
+
+		int		Type { get; set; }
+	}
+}
\ No newline at end of file

Added: trunk/src/antlr-runtime/antlr/InputBuffer.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/InputBuffer.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/InputBuffer.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,165 @@
+namespace antlr
+{
+	using System;
+	using ArrayList		= System.Collections.ArrayList;
+	using StringBuilder	= System.Text.StringBuilder;
+
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	// SAS: Added this class to genericise the input buffers for scanners
+	//      This allows a scanner to use a binary (FileInputStream) or
+	//      text (FileReader) stream of data; the generated scanner
+	//      subclass will define the input stream
+	//      There are two subclasses to this: CharBuffer and ByteBuffer
+	
+	/// <summary>
+	/// Represents a stream of characters fed to the lexer from that can be rewound 
+	/// via mark()/rewind() methods.
+	/// </summary>
+	/// <remarks>
+	/// <para>
+	/// A dynamic array is used to buffer up all the input characters.  Normally,
+	/// "k" characters are stored in the buffer.  More characters may be stored 
+	/// during guess mode (testing syntactic predicate), or when LT(i>k) is referenced.
+	/// Consumption of characters is deferred.  In other words, reading the next
+	/// character is not done by conume(), but deferred until needed by LA or LT.
+	/// </para>
+	/// </remarks>
+	public abstract class InputBuffer
+	{
+		// Number of active markers
+		protected internal int nMarkers = 0;
+		
+		// Additional offset used when markers are active
+		protected internal int markerOffset = 0;
+		
+		// Number of calls to consume() since last LA() or LT() call
+		protected internal int numToConsume = 0;
+		
+		// Circular queue
+		protected ArrayList	queue;
+		
+		/*Create an input buffer */
+		public InputBuffer()
+		{
+			queue = new ArrayList();
+		}
+		
+		/*This method updates the state of the input buffer so that
+		*  the text matched since the most recent mark() is no longer
+		*  held by the buffer.  So, you either do a mark/rewind for
+		*  failed predicate or mark/commit to keep on parsing without
+		*  rewinding the input.
+		*/
+		public virtual void  commit()
+		{
+			nMarkers--;
+		}
+		
+		/*Mark another character for deferred consumption */
+		public virtual char consume()
+		{
+			numToConsume++;
+			return LA(1);
+		}
+		
+		/*Ensure that the input buffer is sufficiently full */
+		public abstract void  fill(int amount);
+		
+		public virtual string getLAChars()
+		{
+			StringBuilder la = new StringBuilder();
+
+			// copy buffer contents to array before looping thru contents (it's usually faster)
+			char[] fastBuf = new char[queue.Count-markerOffset];
+			queue.CopyTo(fastBuf, markerOffset);
+
+			la.Append(fastBuf);
+			return la.ToString();
+		}
+		
+		public virtual string getMarkedChars()
+		{
+			StringBuilder marked = new StringBuilder();
+
+			// copy buffer contents to array before looping thru contents (it's usually faster)
+			char[] fastBuf = new char[queue.Count-markerOffset];
+			queue.CopyTo(fastBuf, markerOffset);
+
+			marked.Append(fastBuf);
+			return marked.ToString();
+		}
+		
+		public virtual bool isMarked()
+		{
+			return (nMarkers != 0);
+		}
+		
+		/*Get a lookahead character */
+		public virtual char LA(int i)
+		{
+			fill(i);
+			return (char) queue[markerOffset + i - 1];
+		}
+		
+		/*Return an integer marker that can be used to rewind the buffer to
+		* its current state.
+		*/
+		public virtual int mark()
+		{
+			syncConsume();
+			nMarkers++;
+			return markerOffset;
+		}
+		
+		/*Rewind the character buffer to a marker.
+		* @param mark Marker returned previously from mark()
+		*/
+		public virtual void  rewind(int mark)
+		{
+			syncConsume();
+			markerOffset = mark;
+			nMarkers--;
+		}
+		
+		/*Reset the input buffer
+		*/
+		public virtual void  reset()
+		{
+			nMarkers = 0;
+			markerOffset = 0;
+			numToConsume = 0;
+			queue.Clear();
+		}
+		
+		/*Sync up deferred consumption */
+		protected internal virtual void  syncConsume()
+		{
+			if (numToConsume > 0)
+			{
+				if (nMarkers > 0)
+				{
+					// guess mode -- leave leading characters and bump offset.
+					markerOffset += numToConsume;
+				}
+				else
+				{
+					// normal mode -- remove "consumed" characters from buffer
+					queue.RemoveRange(0, numToConsume);
+				}
+				numToConsume = 0;
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/InputBuffer.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/LLkParser.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/LLkParser.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/LLkParser.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,100 @@
+using System;
+	
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*An LL(k) parser.
+	*
+	* @see antlr.Token
+	* @see antlr.TokenBuffer
+	* @see antlr.LL1Parser
+	*/
+	public class LLkParser : Parser
+	{
+		internal int k;
+		
+		public LLkParser(int k_)
+		{
+			k = k_;
+		}
+		public LLkParser(ParserSharedInputState state, int k_)
+		{
+			k = k_;
+			inputState = state;
+		}
+		public LLkParser(TokenBuffer tokenBuf, int k_)
+		{
+			k = k_;
+			setTokenBuffer(tokenBuf);
+		}
+		public LLkParser(TokenStream lexer, int k_)
+		{
+			k = k_;
+			TokenBuffer tokenBuf = new TokenBuffer(lexer);
+			setTokenBuffer(tokenBuf);
+		}
+		/*Consume another token from the input stream.  Can only write sequentially!
+		* If you need 3 tokens ahead, you must consume() 3 times.
+		* <p>
+		* Note that it is possible to overwrite tokens that have not been matched.
+		* For example, calling consume() 3 times when k=2, means that the first token
+		* consumed will be overwritten with the 3rd.
+		*/
+		override public void  consume()
+		{
+			inputState.input.consume();
+		}
+		override public int LA(int i)
+		{
+			return inputState.input.LA(i);
+		}
+		override public IToken LT(int i)
+		{
+			return inputState.input.LT(i);
+		}
+		private void  trace(string ee, string rname)
+		{
+			traceIndent();
+			Console.Out.Write(ee + rname + ((inputState.guessing > 0)?"; [guessing]":"; "));
+			 for (int i = 1; i <= k; i++)
+			{
+				if (i != 1)
+				{
+					Console.Out.Write(", ");
+				}
+				if ( LT(i)!=null ) {
+					Console.Out.Write("LA(" + i + ")==" + LT(i).getText());
+				}
+				else 
+				{
+					Console.Out.Write("LA(" + i + ")==ull");
+				}
+			}
+			Console.Out.WriteLine("");
+		}
+		override public void  traceIn(string rname)
+		{
+			traceDepth += 1;
+			trace("> ", rname);
+		}
+		override public void  traceOut(string rname)
+		{
+			trace("< ", rname);
+			traceDepth -= 1;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/LLkParser.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/LexerSharedInputState.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/LexerSharedInputState.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/LexerSharedInputState.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,88 @@
+using System;
+using Stream			= System.IO.Stream;
+using TextReader		= System.IO.TextReader;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+	
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*This object contains the data associated with an
+	*  input stream of characters.  Multiple lexers
+	*  share a single LexerSharedInputState to lex
+	*  the same input stream.
+	*/
+	public class LexerSharedInputState
+	{
+		protected internal int column;
+		protected internal int line;
+		protected internal int tokenStartColumn;
+		protected internal int tokenStartLine;
+		protected internal InputBuffer input;
+		
+		/*What file (if known) caused the problem? */
+		protected internal string filename;
+		
+		public int guessing;
+		
+		public LexerSharedInputState(InputBuffer inbuf)
+		{
+			initialize();
+			input = inbuf;
+		}
+		
+		public LexerSharedInputState(Stream inStream) : this(new ByteBuffer(inStream))
+		{
+		}
+		
+		public LexerSharedInputState(TextReader inReader) : this(new CharBuffer(inReader))
+		{
+		}
+		
+		private void initialize()
+		{
+			column = 1;
+			line = 1;
+			tokenStartColumn = 1;
+			tokenStartLine = 1;
+			guessing = 0;
+			filename = null;
+		}
+		
+		public virtual void reset()
+		{
+			initialize();
+			input.reset();
+		}
+
+		public virtual void resetInput(InputBuffer ib)
+		{
+			reset();
+			input = ib;
+		}
+
+		public virtual void resetInput(Stream s)
+		{
+			reset();
+			input = new ByteBuffer(s);
+		}
+
+		public virtual void resetInput(TextReader tr)
+		{
+			reset();
+			input = new CharBuffer(tr);
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/LexerSharedInputState.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/MismatchedCharException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/MismatchedCharException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/MismatchedCharException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,179 @@
+using System;
+using StringBuilder			= System.Text.StringBuilder;
+
+using BitSet				= antlr.collections.impl.BitSet;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	[Serializable]
+	public class MismatchedCharException : RecognitionException
+	{
+		/*
+		* Returns a clean error message (no line number/column information)
+		*/
+		override public string Message
+		{
+			get 
+			{
+				StringBuilder sb = new StringBuilder();
+			
+				switch (mismatchType)
+				{
+					case CharTypeEnum.CharType: 
+						sb.Append("expecting ");   appendCharName(sb, expecting);
+						sb.Append(", found ");     appendCharName(sb, foundChar);
+						break;
+				
+					case CharTypeEnum.NotCharType: 
+						sb.Append("expecting anything but '");
+						appendCharName(sb, expecting);
+						sb.Append("'; got it anyway");
+						break;
+				
+					case CharTypeEnum.RangeType: 				
+					case CharTypeEnum.NotRangeType: 
+						sb.Append("expecting token ");
+						if (mismatchType == CharTypeEnum.NotRangeType)
+							sb.Append("NOT ");
+						sb.Append("in range: ");
+						appendCharName(sb, expecting);
+						sb.Append("..");
+						appendCharName(sb, upper);
+						sb.Append(", found ");
+						appendCharName(sb, foundChar);
+						break;
+				
+					case CharTypeEnum.SetType: 
+					case CharTypeEnum.NotSetType: 
+						sb.Append("expecting " + (mismatchType == CharTypeEnum.NotSetType ? "NOT " : "") + "one of (");
+						int[] elems = bset.toArray();
+						for (int i = 0; i < elems.Length; i++) 
+						{
+							appendCharName(sb, elems[i]);
+						}
+						sb.Append("), found ");
+						appendCharName(sb, foundChar);
+						break;
+				
+					default: 
+						sb.Append(base.Message);
+						break;				
+				}			
+				return sb.ToString();
+			}
+		}
+
+		// Types of chars
+
+		public enum CharTypeEnum
+		{
+			CharType = 1,
+			NotCharType = 2,
+			RangeType = 3,
+			NotRangeType = 4,
+			SetType = 5,
+			NotSetType = 6
+		}
+		
+		// One of the above
+		public CharTypeEnum mismatchType;
+		
+		// what was found on the input stream
+		public int foundChar;
+		
+		// For CHAR/NOT_CHAR and RANGE/NOT_RANGE
+		public int expecting;
+		
+		// For RANGE/NOT_RANGE (expecting is lower bound of range)
+		public int upper;
+		
+		// For SET/NOT_SET
+		public BitSet bset;
+		
+		// who knows...they may want to ask scanner questions
+		public CharScanner scanner;
+		
+		/*
+		* MismatchedCharException constructor comment.
+		*/
+		public MismatchedCharException() : base("Mismatched char")
+		{
+		}
+		
+		// Expected range / not range
+		public MismatchedCharException(char c, char lower, char upper_, bool matchNot, CharScanner scanner_) : 
+					base("Mismatched char", scanner_.getFilename(), scanner_.getLine(), scanner_.getColumn())
+		{
+			mismatchType = matchNot ? CharTypeEnum.NotRangeType : CharTypeEnum.RangeType;
+			foundChar = c;
+			expecting = lower;
+			upper = upper_;
+			scanner = scanner_;
+		}
+		
+		// Expected token / not token
+		public MismatchedCharException(char c, char expecting_, bool matchNot, CharScanner scanner_) : 
+					base("Mismatched char", scanner_.getFilename(), scanner_.getLine(), scanner_.getColumn())
+		{
+			mismatchType = matchNot ? CharTypeEnum.NotCharType : CharTypeEnum.CharType;
+			foundChar = c;
+			expecting = expecting_;
+			scanner = scanner_;
+		}
+		
+		// Expected BitSet / not BitSet
+		public MismatchedCharException(char c, BitSet set_, bool matchNot, CharScanner scanner_) :
+					base("Mismatched char", scanner_.getFilename(), scanner_.getLine(), scanner_.getColumn())
+		{
+			mismatchType = matchNot ? CharTypeEnum.NotSetType : CharTypeEnum.SetType;
+			foundChar = c;
+			bset = set_;
+			scanner = scanner_;
+		}		
+
+		/// <summary>
+		/// Append a char to the msg buffer.  If special, then show escaped version
+		/// </summary>
+		/// <param name="sb">Message buffer</param>
+		/// <param name="c">Char to append</param>
+		private void appendCharName(StringBuilder sb, int c) 
+		{
+			switch (c) 
+			{
+				case 65535 :
+					// 65535 = (char) -1 = EOF
+					sb.Append("'<EOF>'");
+					break;
+				case '\n' :
+					sb.Append(@"'\n'");
+					break;
+				case '\r' :
+					sb.Append(@"'\r'");
+					break;
+				case '\t' :
+					sb.Append(@"'\t'");
+					break;
+				default :
+					sb.Append('\'');
+					sb.Append((char) c);
+					sb.Append('\'');
+					break;
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/MismatchedCharException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/MismatchedTokenException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/MismatchedTokenException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/MismatchedTokenException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,214 @@
+using System;
+using StringBuilder			= System.Text.StringBuilder;
+
+using BitSet				= antlr.collections.impl.BitSet;
+using AST					= antlr.collections.AST;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	[Serializable]
+	public class MismatchedTokenException : RecognitionException
+	{
+		// Token names array for formatting
+		internal string[] tokenNames;
+		// The token that was encountered
+		public IToken token;
+		// The offending AST node if tree walking
+		public AST node;
+		
+		internal string tokenText = null; // taken from node or token object
+		
+		// Types of tokens
+		public enum TokenTypeEnum
+		{
+			TokenType = 1,
+			NotTokenType = 2,
+			RangeType = 3,
+			NotRangeType = 4,
+			SetType = 5,
+			NotSetType = 6
+		}
+		// One of the above
+		public TokenTypeEnum mismatchType;
+		
+		// For TOKEN/NOT_TOKEN and RANGE/NOT_RANGE
+		public int expecting;
+		
+		// For RANGE/NOT_RANGE (expecting is lower bound of range)
+		public int upper;
+		
+		// For SET/NOT_SET
+		public BitSet bset;
+		
+		/*Looking for AST wildcard, didn't find it */
+		public MismatchedTokenException() : base("Mismatched Token: expecting any AST node", "<AST>", - 1, - 1)
+		{
+		}
+		
+		// Expected range / not range
+		public MismatchedTokenException(string[] tokenNames_, AST node_, int lower, int upper_, bool matchNot) : 
+					base("Mismatched Token", "<AST>", - 1, - 1)
+		{
+			tokenNames = tokenNames_;
+			node = node_;
+			if (node_ == null)
+			{
+				tokenText = "<empty tree>";
+			}
+			else
+			{
+				tokenText = node_.ToString();
+			}
+			mismatchType = matchNot ? TokenTypeEnum.NotRangeType : TokenTypeEnum.RangeType;
+			expecting = lower;
+			upper = upper_;
+		}
+		
+		// Expected token / not token
+		public MismatchedTokenException(string[] tokenNames_, AST node_, int expecting_, bool matchNot) :
+					base("Mismatched Token", "<AST>", - 1, - 1)
+		{
+			tokenNames = tokenNames_;
+			node = node_;
+			if (node_ == null)
+			{
+				tokenText = "<empty tree>";
+			}
+			else
+			{
+				tokenText = node_.ToString();
+			}
+			mismatchType = matchNot ? TokenTypeEnum.NotTokenType : TokenTypeEnum.TokenType;
+			expecting = expecting_;
+		}
+		
+		// Expected BitSet / not BitSet
+		public MismatchedTokenException(string[] tokenNames_, AST node_, BitSet set_, bool matchNot) :
+					base("Mismatched Token", "<AST>", - 1, - 1)
+		{
+			tokenNames = tokenNames_;
+			node = node_;
+			if (node_ == null)
+			{
+				tokenText = "<empty tree>";
+			}
+			else
+			{
+				tokenText = node_.ToString();
+			}
+			mismatchType = matchNot ? TokenTypeEnum.NotSetType : TokenTypeEnum.SetType;
+			bset = set_;
+		}
+		
+		// Expected range / not range
+		public MismatchedTokenException(string[] tokenNames_, IToken token_, int lower, int upper_, bool matchNot, string fileName_) : 
+					base("Mismatched Token", fileName_, token_.getLine(), token_.getColumn())
+		{
+			tokenNames = tokenNames_;
+			token = token_;
+			tokenText = token_.getText();
+			mismatchType = matchNot ? TokenTypeEnum.NotRangeType : TokenTypeEnum.RangeType;
+			expecting = lower;
+			upper = upper_;
+		}
+		
+		// Expected token / not token
+		public MismatchedTokenException(string[] tokenNames_, IToken token_, int expecting_, bool matchNot, string fileName_) :
+					base("Mismatched Token", fileName_, token_.getLine(), token_.getColumn())
+		{
+			tokenNames = tokenNames_;
+			token = token_;
+			tokenText = token_.getText();
+			mismatchType = matchNot ? TokenTypeEnum.NotTokenType : TokenTypeEnum.TokenType;
+			expecting = expecting_;
+		}
+		
+		// Expected BitSet / not BitSet
+		public MismatchedTokenException(string[] tokenNames_, IToken token_, BitSet set_, bool matchNot, string fileName_) :
+					base("Mismatched Token", fileName_, token_.getLine(), token_.getColumn())
+		{
+			tokenNames = tokenNames_;
+			token = token_;
+			tokenText = token_.getText();
+			mismatchType = matchNot ? TokenTypeEnum.NotSetType : TokenTypeEnum.SetType;
+			bset = set_;
+		}
+		
+		/*
+		* Returns a clean error message (no line number/column information)
+		*/
+		override public string Message
+		{
+			get 
+			{
+				StringBuilder sb = new StringBuilder();
+			
+				switch (mismatchType)
+				{
+					case TokenTypeEnum.TokenType: 
+						sb.Append("expecting " + tokenName(expecting) + ", found '" + tokenText + "'");
+						break;
+				
+					case TokenTypeEnum.NotTokenType: 
+						sb.Append("expecting anything but " + tokenName(expecting) + "; got it anyway");
+						break;
+				
+					case TokenTypeEnum.RangeType: 
+						sb.Append("expecting token in range: " + tokenName(expecting) + ".." + tokenName(upper) + ", found '" + tokenText + "'");
+						break;
+				
+					case TokenTypeEnum.NotRangeType: 
+						sb.Append("expecting token NOT in range: " + tokenName(expecting) + ".." + tokenName(upper) + ", found '" + tokenText + "'");
+						break;
+				
+					case TokenTypeEnum.SetType: case TokenTypeEnum.NotSetType: 
+						sb.Append("expecting " + (mismatchType == TokenTypeEnum.NotSetType ? "NOT " : "") + "one of (");
+						int[] elems = bset.toArray();
+						for (int i = 0; i < elems.Length; i++)
+						{
+							sb.Append(" ");
+							sb.Append(tokenName(elems[i]));
+						}
+						sb.Append("), found '" + tokenText + "'");
+						break;
+				
+					default: 
+						sb.Append(base.Message);
+						break;				
+				}			
+				return sb.ToString();
+			}
+		}
+		
+		private string tokenName(int tokenType)
+		{
+			if (tokenType == Token.INVALID_TYPE)
+			{
+				return "<Set of tokens>";
+			}
+			else if (tokenType < 0 || tokenType >= tokenNames.Length)
+			{
+				return "<" + tokenType.ToString() + ">";
+			}
+			else
+			{
+				return tokenNames[tokenType];
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/MismatchedTokenException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/NoViableAltException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/NoViableAltException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/NoViableAltException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,61 @@
+using System;
+
+using AST					= antlr.collections.AST;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	[Serializable]
+	public class NoViableAltException : RecognitionException
+	{
+		public IToken token;
+		public AST node; // handles parsing and treeparsing
+		
+		public NoViableAltException(AST t) : base("NoViableAlt", "<AST>", - 1, - 1)
+		{
+			node = t;
+		}
+		
+		public NoViableAltException(IToken t, string fileName_) : 
+					base("NoViableAlt", fileName_, t.getLine(), t.getColumn())
+		{
+			token = t;
+		}
+		
+		/*
+		* Returns a clean error message (no line number/column information)
+		*/
+		override public string Message
+		{
+			get 
+			{
+				if (token != null)
+				{
+					//return "unexpected token: " + token.getText();
+					return "unexpected token: " + token.ToString();
+				}
+			
+				// must a tree parser error if token==null
+				if ( (node==null) || (node==TreeParser.ASTNULL) )
+				{
+					return "unexpected end of subtree";
+				}
+				return "unexpected AST node: " + node.ToString();
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/NoViableAltException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/NoViableAltForCharException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/NoViableAltForCharException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/NoViableAltForCharException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,66 @@
+using System;
+using StringBuilder				= System.Text.StringBuilder;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	[Serializable]
+	public class NoViableAltForCharException : RecognitionException
+	{
+		public char foundChar;
+		
+		public NoViableAltForCharException(char c, CharScanner scanner) :
+					base("NoViableAlt", scanner.getFilename(), scanner.getLine(), scanner.getColumn())
+		{
+			foundChar = c;
+		}
+		
+		public NoViableAltForCharException(char c, string fileName, int line, int column) : 
+					base("NoViableAlt", fileName, line, column)
+		{
+			foundChar = c;
+		}
+		
+		/*
+		* Returns a clean error message (no line number/column information)
+		*/
+		override public string Message
+		{
+			get
+			{
+				StringBuilder mesg = new StringBuilder("unexpected char: ");
+			
+				// I'm trying to mirror a change in the C++ stuff.
+				// But java seems to lack something isprint-ish..
+				// so we do it manually. This is probably too restrictive.
+			
+				if ((foundChar >= ' ') && (foundChar <= '~'))
+				{
+					mesg.Append('\'');
+					mesg.Append(foundChar);
+					mesg.Append('\'');
+				}
+				else
+				{
+					mesg.Append("0x");
+					mesg.Append(((int)foundChar).ToString("X"));
+				}
+				return mesg.ToString();
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/NoViableAltForCharException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/ParseTree.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/ParseTree.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/ParseTree.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,75 @@
+namespace antlr
+{
+	/* ANTLR Translator Generator
+	 * Project led by Terence Parr at http://www.jGuru.com
+	 * Software rights: http://www.antlr.org/license.html
+	 */
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+
+	using System;
+	using StringBuilder 	= System.Text.StringBuilder;
+	using AST 				= antlr.collections.AST;
+
+	public abstract class ParseTree : BaseAST
+	{
+		/// <summary>
+		/// Walk parse tree and return requested number of derivation steps.
+		/// If steps less-than 0, return node text.  If steps equals 1, return derivation
+		/// string at step.
+		/// </summary>
+		/// <param name="step">derivation steps</param>
+		/// <returns></returns>
+		public string getLeftmostDerivationStep(int step) 
+		{
+			if ( step <= 0 ) 
+			{
+				return ToString();
+			}
+			StringBuilder buf = new StringBuilder (2000);
+			getLeftmostDerivation(buf, step);
+			return buf.ToString();
+		}
+
+		public string getLeftmostDerivation(int maxSteps)
+		{
+			StringBuilder buf = new StringBuilder(2000);
+			buf.Append("    " + this.ToString());
+			buf.Append("\n");
+			for (int d=1; d < maxSteps; d++) 
+			{
+				buf.Append(" =>");
+				buf.Append(getLeftmostDerivationStep(d));
+				buf.Append("\n");
+			}
+			return buf.ToString();
+		}
+
+		/// <summary>
+		/// Get derivation and return how many you did (less than requested for
+		/// subtree roots.
+		/// </summary>
+		/// <param name="buf">string buffer</param>
+		/// <param name="step">derivation steps</param>
+		/// <returns></returns>
+		protected internal abstract int getLeftmostDerivation(StringBuilder buf, int step);
+
+		// just satisfy BaseAST interface; unused as we manually create nodes
+
+		public override void initialize(int i, string s) 
+		{
+		}
+		
+		public override void initialize(AST ast) 
+		{
+		}
+		
+		public override void initialize(IToken token) 
+		{
+		}
+	}
+}

Added: trunk/src/antlr-runtime/antlr/ParseTreeRule.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/ParseTreeRule.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/ParseTreeRule.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,92 @@
+namespace antlr
+{
+
+	/* ANTLR Translator Generator
+	 * Project led by Terence Parr at http://www.jGuru.com
+	 * Software rights: http://www.antlr.org/license.html
+	 */
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+
+	using System;
+	using StringBuilder 	= System.Text.StringBuilder;
+	using AST 				= antlr.collections.AST;
+
+	public class ParseTreeRule : ParseTree 
+	{
+		public const int INVALID_ALT = -1;
+
+		protected string ruleName;
+		protected int altNumber;  // unused until I modify antlr to record this
+
+		public ParseTreeRule(string ruleName) : this(ruleName, INVALID_ALT)
+		{
+		}
+
+		public ParseTreeRule(string ruleName, int altNumber) 
+		{
+			this.ruleName  = ruleName;
+			this.altNumber = altNumber;
+		}
+
+		public string getRuleName() 
+		{
+			return ruleName;
+		}
+
+		/// <summary>
+		/// Do a step-first walk, building up a buffer of tokens until
+		/// you've reached a particular step and print out any rule subroots
+		/// insteads of descending.
+		/// </summary>
+		/// <param name="buf">derivation buffer</param>
+		/// <param name="step">derivation steps</param>
+		/// <returns></returns>
+		protected internal override int getLeftmostDerivation(StringBuilder buf, int step) 
+		{
+			int numReplacements = 0;
+			if ( step <= 0 ) 
+			{
+				buf.Append(' ');
+				buf.Append(ToString());
+				return numReplacements;
+			}
+			AST child = getFirstChild();
+			numReplacements = 1;
+			// walk child printing them out, descending into at most one
+			while ( child != null ) 
+			{
+				if ( (numReplacements >= step) || (child is ParseTreeToken) )
+				{
+					buf.Append(' ');
+					buf.Append(child.ToString());
+				}
+				else 
+				{
+					// descend for at least one more derivation; update count
+					int remainingReplacements = step - numReplacements;
+					int n = ((ParseTree) child).getLeftmostDerivation(buf, remainingReplacements);
+					numReplacements += n;
+				}
+				child = child.getNextSibling();
+			}
+			return numReplacements;
+		}
+
+		public override string ToString()
+		{
+			if ( altNumber == INVALID_ALT ) 
+			{
+				return '<'+ruleName+'>';
+			}
+			else 
+			{
+				return '<'+ruleName+"["+altNumber+"]>";
+			}
+		}
+	}
+}

Added: trunk/src/antlr-runtime/antlr/ParseTreeToken.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/ParseTreeToken.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/ParseTreeToken.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,44 @@
+namespace antlr
+{
+
+	/* ANTLR Translator Generator
+	 * Project led by Terence Parr at http://www.jGuru.com
+	 * Software rights: http://www.antlr.org/license.html
+	 */
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+
+	using System;
+	using StringBuilder 	= System.Text.StringBuilder;
+	using AST 				= antlr.collections.AST;
+
+	public class ParseTreeToken : ParseTree
+	{
+		protected IToken token;
+
+		public ParseTreeToken(IToken token) 
+		{
+			this.token = token;
+		}
+
+		protected override internal int getLeftmostDerivation(StringBuilder buf, int step) 
+		{
+			buf.Append(' ');
+			buf.Append(ToString());
+			return step; // did on replacements
+		}
+
+		public override string ToString()
+		{
+			if ( token != null ) 
+			{
+				return token.getText();
+			}
+			return "<missing token>";
+		}
+	}
+}

Added: trunk/src/antlr-runtime/antlr/Parser.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/Parser.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/Parser.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,507 @@
+using System;
+using EventHandlerList			= System.ComponentModel.EventHandlerList;
+
+using BitSet					= antlr.collections.impl.BitSet;
+using AST						= antlr.collections.AST;
+using ASTArray					= antlr.collections.impl.ASTArray;
+using antlr.debug;
+
+using MessageListener				= antlr.debug.MessageListener;
+using ParserListener				= antlr.debug.ParserListener;
+using ParserMatchListener			= antlr.debug.ParserMatchListener;
+using ParserTokenListener			= antlr.debug.ParserTokenListener;
+using SemanticPredicateListener		= antlr.debug.SemanticPredicateListener;
+using SyntacticPredicateListener	= antlr.debug.SyntacticPredicateListener;
+using TraceListener					= antlr.debug.TraceListener;
+
+/*
+	private Vector messageListeners;
+	private Vector newLineListeners;
+	private Vector matchListeners;
+	private Vector tokenListeners;
+	private Vector semPredListeners;
+	private Vector synPredListeners;
+	private Vector traceListeners;
+*/
+	
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	public abstract class Parser : IParserDebugSubject
+	{
+		// Used to store event delegates
+		private EventHandlerList events_ = new EventHandlerList();
+
+		protected internal EventHandlerList Events 
+		{
+			get	{ return events_;	}
+		}
+
+		// The unique keys for each event that Parser [objects] can generate
+		internal static readonly object EnterRuleEventKey		= new object();
+		internal static readonly object ExitRuleEventKey			= new object();
+		internal static readonly object DoneEventKey				= new object();
+		internal static readonly object ReportErrorEventKey		= new object();
+		internal static readonly object ReportWarningEventKey	= new object();
+		internal static readonly object NewLineEventKey			= new object();
+		internal static readonly object MatchEventKey			= new object();
+		internal static readonly object MatchNotEventKey			= new object();
+		internal static readonly object MisMatchEventKey			= new object();
+		internal static readonly object MisMatchNotEventKey		= new object();
+		internal static readonly object ConsumeEventKey			= new object();
+		internal static readonly object LAEventKey				= new object();
+		internal static readonly object SemPredEvaluatedEventKey	= new object();
+		internal static readonly object SynPredStartedEventKey	= new object();
+		internal static readonly object SynPredFailedEventKey	= new object();
+		internal static readonly object SynPredSucceededEventKey	= new object();
+
+		protected internal ParserSharedInputState inputState;
+		
+		/*Nesting level of registered handlers */
+		// protected int exceptionLevel = 0;
+		
+		/*Table of token type to token names */
+		protected internal string[] tokenNames;
+		
+		/*AST return value for a rule is squirreled away here */
+		protected internal AST returnAST;
+		
+		/*AST support code; parser and treeparser delegate to this object */
+		protected internal ASTFactory astFactory = new ASTFactory();
+		
+		private bool ignoreInvalidDebugCalls = false;
+		
+		/*Used to keep track of indentdepth for traceIn/Out */
+		protected internal int traceDepth = 0;
+		
+		public Parser()
+		{
+			inputState = new ParserSharedInputState();
+		}
+		
+		public Parser(ParserSharedInputState state)
+		{
+			inputState = state;
+		}
+		
+		/// <summary>
+		/// 
+		/// </summary>
+
+		public event TraceEventHandler EnterRule
+		{
+			add		{	Events.AddHandler(EnterRuleEventKey, value);	}
+			remove	{	Events.RemoveHandler(EnterRuleEventKey, value);	}
+		}
+
+		public event TraceEventHandler ExitRule
+		{
+			add		{	Events.AddHandler(ExitRuleEventKey, value);		}
+			remove	{	Events.RemoveHandler(ExitRuleEventKey, value);	}
+		}
+
+		public event TraceEventHandler Done
+		{
+			add		{	Events.AddHandler(DoneEventKey, value);		}
+			remove	{	Events.RemoveHandler(DoneEventKey, value);	}
+		}
+
+		public event MessageEventHandler ErrorReported
+		{
+			add		{	Events.AddHandler(ReportErrorEventKey, value);		}
+			remove	{	Events.RemoveHandler(ReportErrorEventKey, value);	}
+		}
+
+		public event MessageEventHandler WarningReported
+		{
+			add		{	Events.AddHandler(ReportWarningEventKey, value);	}
+			remove	{	Events.RemoveHandler(ReportWarningEventKey, value);	}
+		}
+
+		public event MatchEventHandler MatchedToken
+		{
+			add		{	Events.AddHandler(MatchEventKey, value);	}
+			remove	{	Events.RemoveHandler(MatchEventKey, value);	}
+		}
+
+		public event MatchEventHandler MatchedNotToken
+		{
+			add		{	Events.AddHandler(MatchNotEventKey, value);		}
+			remove	{	Events.RemoveHandler(MatchNotEventKey, value);	}
+		}
+
+		public event MatchEventHandler MisMatchedToken
+		{
+			add		{	Events.AddHandler(MisMatchEventKey, value);		}
+			remove	{	Events.RemoveHandler(MisMatchEventKey, value);	}
+		}
+
+		public event MatchEventHandler MisMatchedNotToken
+		{
+			add		{	Events.AddHandler(MisMatchNotEventKey, value);		}
+			remove	{	Events.RemoveHandler(MisMatchNotEventKey, value);	}
+		}
+
+		public event TokenEventHandler ConsumedToken
+		{
+			add		{	Events.AddHandler(ConsumeEventKey, value);		}
+			remove	{	Events.RemoveHandler(ConsumeEventKey, value);	}
+		}
+
+		public event TokenEventHandler TokenLA
+		{
+			add		{	Events.AddHandler(LAEventKey, value);		}
+			remove	{	Events.RemoveHandler(LAEventKey, value);	}
+		}
+
+		public event SemanticPredicateEventHandler SemPredEvaluated
+		{
+			add		{	Events.AddHandler(SemPredEvaluatedEventKey, value);		}
+			remove	{	Events.RemoveHandler(SemPredEvaluatedEventKey, value);	}
+		}
+
+		public event SyntacticPredicateEventHandler SynPredStarted
+		{
+			add		{	Events.AddHandler(SynPredStartedEventKey, value);		}
+			remove	{	Events.RemoveHandler(SynPredStartedEventKey, value);	}
+		}
+
+		public event SyntacticPredicateEventHandler SynPredFailed
+		{
+			add		{	Events.AddHandler(SynPredFailedEventKey, value);	}
+			remove	{	Events.RemoveHandler(SynPredFailedEventKey, value);	}
+		}
+
+		public event SyntacticPredicateEventHandler SynPredSucceeded
+		{
+			add		{	Events.AddHandler(SynPredSucceededEventKey, value);		}
+			remove	{	Events.RemoveHandler(SynPredSucceededEventKey, value);	}
+		}
+
+		
+		public virtual void  addMessageListener(MessageListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.ArgumentException("addMessageListener() is only valid if parser built for debugging");
+		}
+		
+		public virtual void  addParserListener(ParserListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.ArgumentException("addParserListener() is only valid if parser built for debugging");
+		}
+		
+		public virtual void  addParserMatchListener(ParserMatchListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.ArgumentException("addParserMatchListener() is only valid if parser built for debugging");
+		}
+		
+		public virtual void  addParserTokenListener(ParserTokenListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.ArgumentException("addParserTokenListener() is only valid if parser built for debugging");
+		}
+		
+		public virtual void  addSemanticPredicateListener(SemanticPredicateListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.ArgumentException("addSemanticPredicateListener() is only valid if parser built for debugging");
+		}
+		
+		public virtual void  addSyntacticPredicateListener(SyntacticPredicateListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.ArgumentException("addSyntacticPredicateListener() is only valid if parser built for debugging");
+		}
+		
+		public virtual void  addTraceListener(TraceListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.ArgumentException("addTraceListener() is only valid if parser built for debugging");
+		}
+		
+		/*Get another token object from the token stream */
+		public abstract void  consume();
+		/*Consume tokens until one matches the given token */
+		public virtual void  consumeUntil(int tokenType)
+		{
+			while (LA(1) != Token.EOF_TYPE && LA(1) != tokenType)
+			{
+				consume();
+			}
+		}
+		/*Consume tokens until one matches the given token set */
+		public virtual void  consumeUntil(BitSet bset)
+		{
+			while (LA(1) != Token.EOF_TYPE && !bset.member(LA(1)))
+			{
+				consume();
+			}
+		}
+		protected internal virtual void  defaultDebuggingSetup(TokenStream lexer, TokenBuffer tokBuf)
+		{
+			// by default, do nothing -- we're not debugging
+		}
+		/*Get the AST return value squirreled away in the parser */
+		public virtual AST getAST()
+		{
+			return returnAST;
+		}
+		public virtual ASTFactory getASTFactory()
+		{
+			return astFactory;
+		}
+		public virtual string getFilename()
+		{
+			return inputState.filename;
+		}
+		
+		public virtual ParserSharedInputState getInputState()
+		{
+			return inputState;
+		}
+		
+		public virtual void  setInputState(ParserSharedInputState state)
+		{
+			inputState = state;
+		}
+		
+		public virtual void resetState()
+		{
+			traceDepth = 0;
+			inputState.reset();
+		}
+
+		public virtual string getTokenName(int num)
+		{
+			return tokenNames[num];
+		}
+		public virtual string[] getTokenNames()
+		{
+			return tokenNames;
+		}
+		public virtual bool isDebugMode()
+		{
+			return false;
+		}
+		/*Return the token type of the ith token of lookahead where i=1
+		* is the current token being examined by the parser (i.e., it
+		* has not been matched yet).
+		*/
+		public abstract int LA(int i);
+		/*Return the ith token of lookahead */
+		public abstract IToken LT(int i);
+		// Forwarded to TokenBuffer
+		public virtual int mark()
+		{
+			return inputState.input.mark();
+		}
+		/*Make sure current lookahead symbol matches token type <tt>t</tt>.
+		* Throw an exception upon mismatch, which is catch by either the
+		* error handler or by the syntactic predicate.
+		*/
+		public virtual void  match(int t)
+		{
+			if (LA(1) != t)
+				throw new MismatchedTokenException(tokenNames, LT(1), t, false, getFilename());
+			else
+				consume();
+		}
+		/*Make sure current lookahead symbol matches the given set
+		* Throw an exception upon mismatch, which is catch by either the
+		* error handler or by the syntactic predicate.
+		*/
+		public virtual void  match(BitSet b)
+		{
+			if (!b.member(LA(1)))
+				throw new MismatchedTokenException(tokenNames, LT(1), b, false, getFilename());
+			else
+				consume();
+		}
+		public virtual void  matchNot(int t)
+		{
+			if (LA(1) == t)
+				throw new MismatchedTokenException(tokenNames, LT(1), t, true, getFilename());
+			else
+				consume();
+		}
+
+		/// <summary>
+		/// @deprecated as of 2.7.2. This method calls System.exit() and writes
+		/// directly to stderr, which is usually not appropriate when
+		/// a parser is embedded into a larger application. Since the method is
+		/// <code>static</code>, it cannot be overridden to avoid these problems.
+		/// ANTLR no longer uses this method internally or in generated code.
+		/// </summary>
+		/// 
+		[Obsolete("De-activated since version 2.7.2.6 as it cannot be overidden.", true)]
+		public static void  panic()
+		{
+			System.Console.Error.WriteLine("Parser: panic");
+			System.Environment.Exit(1);
+		}
+
+		public virtual void  removeMessageListener(MessageListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.SystemException("removeMessageListener() is only valid if parser built for debugging");
+		}
+		public virtual void  removeParserListener(ParserListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.SystemException("removeParserListener() is only valid if parser built for debugging");
+		}
+		public virtual void  removeParserMatchListener(ParserMatchListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.SystemException("removeParserMatchListener() is only valid if parser built for debugging");
+		}
+		public virtual void  removeParserTokenListener(ParserTokenListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.SystemException("removeParserTokenListener() is only valid if parser built for debugging");
+		}
+		public virtual void  removeSemanticPredicateListener(SemanticPredicateListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.ArgumentException("removeSemanticPredicateListener() is only valid if parser built for debugging");
+		}
+		public virtual void  removeSyntacticPredicateListener(SyntacticPredicateListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.ArgumentException("removeSyntacticPredicateListener() is only valid if parser built for debugging");
+		}
+		public virtual void  removeTraceListener(TraceListener l)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.SystemException("removeTraceListener() is only valid if parser built for debugging");
+		}
+		
+		/*Parser error-reporting function can be overridden in subclass */
+		public virtual void reportError(RecognitionException ex)
+		{
+			Console.Error.WriteLine(ex);
+		}
+		
+		/*Parser error-reporting function can be overridden in subclass */
+		public virtual void reportError(string s)
+		{
+			if (getFilename() == null)
+			{
+				Console.Error.WriteLine("error: " + s);
+			}
+			else
+			{
+				Console.Error.WriteLine(getFilename() + ": error: " + s);
+			}
+		}
+		
+		/*Parser warning-reporting function can be overridden in subclass */
+		public virtual void  reportWarning(string s)
+		{
+			if (getFilename() == null)
+			{
+				Console.Error.WriteLine("warning: " + s);
+			}
+			else
+			{
+				Console.Error.WriteLine(getFilename() + ": warning: " + s);
+			}
+		}
+		
+		public virtual void recover(RecognitionException ex, BitSet tokenSet)
+		{
+			consume();
+			consumeUntil(tokenSet);
+		}
+		
+		public virtual void  rewind(int pos)
+		{
+			inputState.input.rewind(pos);
+		}
+
+		/// <summary>
+		/// Specify an object with support code (shared by Parser and TreeParser.
+		/// Normally, the programmer does not play with this, using 
+		/// <see cref="setASTNodeClass"/> instead.
+		/// </summary>
+		/// <param name="f"></param>
+		public virtual void  setASTFactory(ASTFactory f)
+		{
+			astFactory = f;
+		}
+
+		/// <summary>
+		/// Specify the type of node to create during tree building. 
+		/// </summary>
+		/// <param name="cl">Fully qualified AST Node type name.</param>
+		public virtual void  setASTNodeClass(string cl)
+		{
+			astFactory.setASTNodeType(cl);
+		}
+
+		/// <summary>
+		/// Specify the type of node to create during tree building. 
+		/// use <see cref="setASTNodeClass"/> now to be consistent with 
+		/// Token Object Type accessor.
+		/// </summary>
+		/// <param name="nodeType">Fully qualified AST Node type name.</param>
+		[Obsolete("Replaced by setASTNodeClass(string) since version 2.7.1", true)]
+		public virtual void  setASTNodeType(string nodeType)
+		{
+			setASTNodeClass(nodeType);
+		}
+
+		public virtual void  setDebugMode(bool debugMode)
+		{
+			if (!ignoreInvalidDebugCalls)
+				throw new System.SystemException("setDebugMode() only valid if parser built for debugging");
+		}
+		public virtual void  setFilename(string f)
+		{
+			inputState.filename = f;
+		}
+		public virtual void  setIgnoreInvalidDebugCalls(bool Value)
+		{
+			ignoreInvalidDebugCalls = Value;
+		}
+		/*Set or change the input token buffer */
+		public virtual void  setTokenBuffer(TokenBuffer t)
+		{
+			inputState.input = t;
+		}
+		
+		public virtual void  traceIndent()
+		{
+			 for (int i = 0; i < traceDepth; i++)
+				Console.Out.Write(" ");
+		}
+		public virtual void  traceIn(string rname)
+		{
+			traceDepth += 1;
+			traceIndent();
+			Console.Out.WriteLine("> " + rname + "; LA(1)==" + LT(1).getText() + ((inputState.guessing > 0)?" [guessing]":""));
+		}
+		public virtual void  traceOut(string rname)
+		{
+			traceIndent();
+			Console.Out.WriteLine("< " + rname + "; LA(1)==" + LT(1).getText() + ((inputState.guessing > 0)?" [guessing]":""));
+			traceDepth -= 1;
+		}
+	}
+}


Property changes on: trunk/src/antlr-runtime/antlr/Parser.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/ParserSharedInputState.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/ParserSharedInputState.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/ParserSharedInputState.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,44 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	/*This object contains the data associated with an
+	*  input stream of tokens.  Multiple parsers
+	*  share a single ParserSharedInputState to parse
+	*  the same stream of tokens.
+	*/
+
+	public class ParserSharedInputState
+	{
+		/*Where to get token objects */
+		protected internal TokenBuffer input;
+		
+		/*Are we guessing (guessing>0)? */
+		public int guessing = 0;
+		
+		/*What file (if known) caused the problem? */
+		protected internal string filename;
+		
+		public virtual void  reset()
+		{
+			guessing = 0;
+			filename = null;
+			input.reset();
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/ParserSharedInputState.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/RecognitionException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/RecognitionException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/RecognitionException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,82 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	[Serializable]
+	public class RecognitionException : ANTLRException
+	{
+		public string fileName; // not used by treeparsers
+		public int line; // not used by treeparsers
+		public int column; // not used by treeparsers
+		
+		public RecognitionException() : base("parsing error")
+		{
+			fileName = null;
+			line = - 1;
+			column = - 1;
+		}
+		
+		/*
+		* RecognitionException constructor comment.
+		* @param s java.lang.String
+		*/
+		public RecognitionException(string s) : base(s)
+		{
+			fileName = null;
+			line = - 1;
+			column = - 1;
+		}
+		
+		/*
+		* RecognitionException constructor comment.
+		* @param s java.lang.String
+		*/
+		public RecognitionException(string s, string fileName_, int line_, int column_) : base(s)
+		{
+			fileName = fileName_;
+			line = line_;
+			column = column_;
+		}
+		
+		public virtual string getFilename()
+		{
+			return fileName;
+		}
+		
+		public virtual int getLine()
+		{
+			return line;
+		}
+		
+		public virtual int getColumn()
+		{
+			return column;
+		}
+		
+		[Obsolete("Replaced by Message property since version 2.7.0", true)]
+		public virtual string getErrorMessage()
+		{
+			return Message;
+		}
+		
+		override public string ToString()
+		{
+			return FileLineFormatter.getFormatter().getFormatString(fileName, line, column) + Message;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/RecognitionException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/SemanticException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/SemanticException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/SemanticException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,39 @@
+using System;
+	
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	[Serializable]
+	public class SemanticException : RecognitionException
+	{
+		public SemanticException(string s) : base(s)
+		{
+		}
+		
+		[Obsolete("Replaced by SemanticException(string, string, int, int) since version 2.7.2.6", false)]
+		public SemanticException(String s, String fileName, int line) :
+					this(s, fileName, line, -1)
+		{
+			
+		}
+
+		public SemanticException(string s, string fileName, int line, int column) :
+					base(s, fileName, line, column)
+		{
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/SemanticException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/StringUtils.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/StringUtils.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/StringUtils.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,119 @@
+using System;
+
+namespace antlr
+{
+	/* ANTLR Translator Generator
+	 * Project led by Terence Parr at http://www.jGuru.com
+	 * Software rights: http://www.antlr.org/license.html
+	 *
+	 * $Id:$
+	 */
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	public class StringUtils
+	{
+		/*General-purpose utility function for removing
+		* characters from back of string
+		* @param s The string to process
+		* @param c The character to remove
+		* @return The resulting string
+		*/
+		static public string stripBack(string s, char c)
+		{
+			while (s.Length > 0 && s[s.Length - 1] == c)
+			{
+				s = s.Substring(0, (s.Length - 1) - (0));
+			}
+			return s;
+		}
+		
+		/*General-purpose utility function for removing
+		* characters from back of string
+		* @param s The string to process
+		* @param remove A string containing the set of characters to remove
+		* @return The resulting string
+		*/
+		static public string stripBack(string s, string remove)
+		{
+			bool changed;
+			do 
+			{
+				changed = false;
+				 for (int i = 0; i < remove.Length; i++)
+				{
+					char c = remove[i];
+					while (s.Length > 0 && s[s.Length - 1] == c)
+					{
+						changed = true;
+						s = s.Substring(0, (s.Length - 1) - (0));
+					}
+				}
+			}
+			while (changed);
+			return s;
+		}
+		
+		/*General-purpose utility function for removing
+		* characters from front of string
+		* @param s The string to process
+		* @param c The character to remove
+		* @return The resulting string
+		*/
+		static public string stripFront(string s, char c)
+		{
+			while (s.Length > 0 && s[0] == c)
+			{
+				s = s.Substring(1);
+			}
+			return s;
+		}
+		
+		/*General-purpose utility function for removing
+		* characters from front of string
+		* @param s The string to process
+		* @param remove A string containing the set of characters to remove
+		* @return The resulting string
+		*/
+		static public string stripFront(string s, string remove)
+		{
+			bool changed;
+			do 
+			{
+				changed = false;
+				 for (int i = 0; i < remove.Length; i++)
+				{
+					char c = remove[i];
+					while (s.Length > 0 && s[0] == c)
+					{
+						changed = true;
+						s = s.Substring(1);
+					}
+				}
+			}
+			while (changed);
+			return s;
+		}
+		
+		/*General-purpose utility function for removing
+		* characters from the front and back of string
+		* @param s The string to process
+		* @param head exact string to strip from head
+		* @param tail exact string to strip from tail
+		* @return The resulting string
+		*/
+		public static string stripFrontBack(string src, string head, string tail)
+		{
+			int h = src.IndexOf(head);
+			int t = src.LastIndexOf(tail);
+			if (h == - 1 || t == - 1)
+				return src;
+			return src.Substring(h + 1, (t) - (h + 1));
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/StringUtils.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/Token.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/Token.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/Token.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,99 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*A token is minimally a token type.  Subclasses can add the text matched
+	*  for the token and line info. 
+	*/
+
+	public class Token : IToken //, ICloneable
+	{
+		// constants
+		public const int MIN_USER_TYPE = 4;
+		public const int NULL_TREE_LOOKAHEAD = 3;
+		public const int INVALID_TYPE = 0;
+		public const int EOF_TYPE = 1;
+		public static readonly int SKIP = - 1;
+		
+		// each Token has at least a token type
+		protected int type_;
+		
+		// the illegal token object
+		public static Token badToken = new Token(INVALID_TYPE, "<no text>");
+		
+		public Token()
+		{
+			type_ = INVALID_TYPE;
+		}
+		public Token(int t)
+		{
+			type_ = t;
+		}
+		public Token(int t, string txt)
+		{
+			type_ = t;
+			setText(txt);
+		}
+		public virtual int getColumn()
+		{
+			return 0;
+		}
+		public virtual int getLine()
+		{
+			return 0;
+		}
+		public virtual string getFilename() 
+		{
+			return null;
+		}
+
+		public virtual void setFilename(string name) 
+		{
+		}
+
+		public virtual string getText()
+		{
+			return "<no text>";
+		}
+
+		public int Type
+		{
+			get { return type_;  }
+			set { type_ = value; }
+		}
+
+		public virtual void setType(int newType)	{ this.Type = newType; }
+
+		public virtual void  setColumn(int c)
+		{
+			;
+		}
+		public virtual void  setLine(int l)
+		{
+			;
+		}
+		public virtual void  setText(string t)
+		{
+			;
+		}
+		override public string ToString()
+		{
+			return "[\"" + getText() + "\",<" + type_ + ">]";
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/Token.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/TokenBuffer.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenBuffer.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenBuffer.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,146 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+	
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	/*A Stream of Token objects fed to the parser from a Tokenizer that can
+	* be rewound via mark()/rewind() methods.
+	* <p>
+	* A dynamic array is used to buffer up all the input tokens.  Normally,
+	* "k" tokens are stored in the buffer.  More tokens may be stored during
+	* guess mode (testing syntactic predicate), or when LT(i>k) is referenced.
+	* Consumption of tokens is deferred.  In other words, reading the next
+	* token is not done by conume(), but deferred until needed by LA or LT.
+	* <p>
+	*
+	* @see antlr.Token
+	* @see antlr.Tokenizer
+	* @see antlr.TokenQueue
+	*/
+	
+	public class TokenBuffer
+	{
+		
+		// Token source
+		protected internal TokenStream input;
+		
+		// Number of active markers
+		protected internal int nMarkers = 0;
+		
+		// Additional offset used when markers are active
+		protected internal int markerOffset = 0;
+		
+		// Number of calls to consume() since last LA() or LT() call
+		protected internal int numToConsume = 0;
+		
+		// Circular queue
+		internal TokenQueue queue;
+		
+		/*Create a token buffer */
+		public TokenBuffer(TokenStream input_)
+		{
+			input = input_;
+			queue = new TokenQueue(1);
+		}
+		
+		/*Reset the input buffer to empty state */
+		public virtual void  reset()
+		{
+			nMarkers = 0;
+			markerOffset = 0;
+			numToConsume = 0;
+			queue.reset();
+		}
+		
+		/*Mark another token for deferred consumption */
+		public virtual void  consume()
+		{
+			numToConsume++;
+		}
+		
+		/*Ensure that the token buffer is sufficiently full */
+		protected virtual void  fill(int amount)
+		{
+			syncConsume();
+			// Fill the buffer sufficiently to hold needed tokens
+			while (queue.nbrEntries < (amount + markerOffset))
+			{
+				// Append the next token
+				queue.append(input.nextToken());
+			}
+		}
+		
+		/*return the Tokenizer (needed by ParseView) */
+		public virtual TokenStream getInput()
+		{
+			return input;
+		}
+		
+		/*Get a lookahead token value */
+		public virtual int LA(int i)
+		{
+			fill(i);
+			return queue.elementAt(markerOffset + i - 1).Type;
+		}
+		
+		/*Get a lookahead token */
+		public virtual IToken LT(int i)
+		{
+			fill(i);
+			return queue.elementAt(markerOffset + i - 1);
+		}
+		
+		/*Return an integer marker that can be used to rewind the buffer to
+		* its current state.
+		*/
+		public virtual int mark()
+		{
+			syncConsume();
+			nMarkers++;
+			return markerOffset;
+		}
+		
+		/*Rewind the token buffer to a marker.
+		* @param mark Marker returned previously from mark()
+		*/
+		public virtual void  rewind(int mark)
+		{
+			syncConsume();
+			markerOffset = mark;
+			nMarkers--;
+		}
+		
+		/*Sync up deferred consumption */
+		protected virtual void  syncConsume()
+		{
+			while (numToConsume > 0)
+			{
+				if (nMarkers > 0)
+				{
+					// guess mode -- leave leading tokens and bump offset.
+					markerOffset++;
+				}
+				else
+				{
+					// normal mode -- remove first token
+					queue.removeFirst();
+				}
+				numToConsume--;
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/TokenBuffer.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/TokenCreator.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenCreator.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenCreator.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,48 @@
+namespace antlr
+{
+	using System;
+
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+	
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+
+	/// <summary>
+	/// A creator of Token object instances.
+	/// </summary>
+	/// <remarks>
+	/// <para>
+	/// This class and it's sub-classes exists primarily as an optimization
+	/// of the reflection-based mechanism(s) previously used exclusively to 
+	/// create instances of Token objects.
+	/// </para>
+	/// <para>
+	/// Since Lexers in ANTLR use a single Token type, each TokenCreator can 
+	/// create one class of Token objects (that's why it's not called TokenFactory).
+	/// </para>
+	/// </remarks>
+	public abstract class TokenCreator
+	{
+		/// <summary>
+		/// Returns the fully qualified name of the Token type that this
+		/// class creates.
+		/// </summary>
+		public abstract string TokenTypeName
+		{
+			get;
+		}
+
+		/// <summary>
+		/// Constructs a <see cref="Token"/> instance.
+		/// </summary>
+		public abstract IToken Create();
+	}
+}
\ No newline at end of file

Added: trunk/src/antlr-runtime/antlr/TokenQueue.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenQueue.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenQueue.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,121 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	/*A private circular buffer object used by the token buffer */
+
+	class TokenQueue
+	{
+		/*Physical circular buffer of tokens */
+		private IToken[] buffer;
+		/*buffer.length-1 for quick modulos */
+		private int sizeLessOne;
+		/*physical index of front token */
+		private int offset;
+		/*number of tokens in the queue */
+		protected internal int nbrEntries;
+		
+		public TokenQueue(int minSize)
+		{
+			// Find first power of 2 >= to requested size
+			int size;
+			if (minSize < 0)
+			{
+				init(16); // pick some value for them
+				return ;
+			}
+			// check for overflow
+			if (minSize >= (int.MaxValue / 2))
+			{
+				init(int.MaxValue); // wow that's big.
+				return ;
+			}
+			 for (size = 2; size < minSize; size *= 2)
+			{
+				;
+			}
+			init(size);
+		}
+		
+		/*Add token to end of the queue
+		* @param tok The token to add
+		*/
+		public void  append(IToken tok)
+		{
+			if (nbrEntries == buffer.Length)
+			{
+				expand();
+			}
+			buffer[(offset + nbrEntries) & sizeLessOne] = tok;
+			nbrEntries++;
+		}
+		
+		/*Fetch a token from the queue by index
+		* @param idx The index of the token to fetch, where zero is the token at the front of the queue
+		*/
+		public IToken elementAt(int idx)
+		{
+			return buffer[(offset + idx) & sizeLessOne];
+		}
+		
+		/*Expand the token buffer by doubling its capacity */
+		private void  expand()
+		{
+			IToken[] newBuffer = new IToken[buffer.Length * 2];
+			// Copy the contents to the new buffer
+			// Note that this will store the first logical item in the
+			// first physical array element.
+			 for (int i = 0; i < buffer.Length; i++)
+			{
+				newBuffer[i] = elementAt(i);
+			}
+			// Re-initialize with new contents, keep old nbrEntries
+			buffer = newBuffer;
+			sizeLessOne = buffer.Length - 1;
+			offset = 0;
+		}
+		
+		/*Initialize the queue.
+		* @param size The initial size of the queue
+		*/
+		private void  init(int size)
+		{
+			// Allocate buffer
+			buffer = new IToken[size];
+			// Other initialization
+			sizeLessOne = size - 1;
+			offset = 0;
+			nbrEntries = 0;
+		}
+		
+		/*Clear the queue. Leaving the previous buffer alone.
+		*/
+		public void  reset()
+		{
+			offset = 0;
+			nbrEntries = 0;
+		}
+		
+		/*Remove token from front of queue */
+		public void  removeFirst()
+		{
+			offset = (offset + 1) & sizeLessOne;
+			nbrEntries--;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/TokenQueue.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/TokenStream.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenStream.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenStream.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,26 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	public interface TokenStream
+	{
+		IToken nextToken();
+	}
+	
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/TokenStream.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/TokenStreamBasicFilter.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenStreamBasicFilter.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenStreamBasicFilter.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,56 @@
+using System;
+using BitSet = antlr.collections.impl.BitSet;
+	
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*This object is a TokenStream that passes through all
+	*  tokens except for those that you tell it to discard.
+	*  There is no buffering of the tokens.
+	*/
+	public class TokenStreamBasicFilter : TokenStream
+	{
+		/*The set of token types to discard */
+		protected internal BitSet discardMask;
+		
+		/*The input stream */
+		protected internal TokenStream input;
+		
+		public TokenStreamBasicFilter(TokenStream input)
+		{
+			this.input = input;
+			discardMask = new BitSet();
+		}
+		public virtual void  discard(int ttype)
+		{
+			discardMask.add(ttype);
+		}
+		public virtual void  discard(BitSet mask)
+		{
+			discardMask = mask;
+		}
+		public virtual IToken nextToken()
+		{
+			IToken tok = input.nextToken();
+			while (tok != null && discardMask.member(tok.Type))
+			{
+				tok = input.nextToken();
+			}
+			return tok;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/TokenStreamBasicFilter.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/TokenStreamException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenStreamException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenStreamException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,34 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*
+	* Anything that goes wrong while generating a stream of tokens.
+	*/
+
+	[Serializable]
+	public class TokenStreamException : ANTLRException
+	{
+		public TokenStreamException()
+		{
+		}
+		public TokenStreamException(string s) : base(s)
+		{
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/TokenStreamException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/TokenStreamHiddenTokenFilter.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenStreamHiddenTokenFilter.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenStreamHiddenTokenFilter.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,179 @@
+using System;
+using BitSet = antlr.collections.impl.BitSet;
+	
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*This object filters a token stream coming from a lexer
+	* or another TokenStream so that only certain token channels
+	* get transmitted to the parser.
+	*
+	* Any of the channels can be filtered off as "hidden" channels whose
+	* tokens can be accessed from the parser.
+	*/
+	public class TokenStreamHiddenTokenFilter : TokenStreamBasicFilter, TokenStream
+	{
+		// protected BitSet discardMask;
+		protected internal BitSet hideMask;
+		
+		private IHiddenStreamToken nextMonitoredToken;
+		
+		/*track tail of hidden list emanating from previous
+		*  monitored token
+		*/
+		protected internal IHiddenStreamToken lastHiddenToken;
+		
+		protected internal IHiddenStreamToken firstHidden = null;
+		
+		public TokenStreamHiddenTokenFilter(TokenStream input) : base(input)
+		{
+			hideMask = new BitSet();
+		}
+		protected internal virtual void  consume()
+		{
+			nextMonitoredToken = (IHiddenStreamToken) input.nextToken();
+		}
+		private void  consumeFirst()
+		{
+			consume(); // get first token of input stream
+			
+			// Handle situation where hidden or discarded tokens
+			// appear first in input stream
+			IHiddenStreamToken p = null;
+			// while hidden or discarded scarf tokens
+			while (hideMask.member(LA(1).Type) || discardMask.member(LA(1).Type))
+			{
+				if (hideMask.member(LA(1).Type))
+				{
+					if (p == null)
+					{
+						p = LA(1);
+					}
+					else
+					{
+						p.setHiddenAfter(LA(1));
+						LA(1).setHiddenBefore(p); // double-link
+						p = LA(1);
+					}
+					lastHiddenToken = p;
+					if (firstHidden == null)
+					{
+						firstHidden = p; // record hidden token if first
+					}
+				}
+				consume();
+			}
+		}
+		public virtual BitSet getDiscardMask()
+		{
+			return discardMask;
+		}
+		/*Return a ptr to the hidden token appearing immediately after
+		*  token t in the input stream.
+		*/
+		public virtual IHiddenStreamToken getHiddenAfter(IHiddenStreamToken t)
+		{
+			return t.getHiddenAfter();
+		}
+		/*Return a ptr to the hidden token appearing immediately before
+		*  token t in the input stream.
+		*/
+		public virtual IHiddenStreamToken getHiddenBefore(IHiddenStreamToken t)
+		{
+			return t.getHiddenBefore();
+		}
+		public virtual BitSet getHideMask()
+		{
+			return hideMask;
+		}
+		/*Return the first hidden token if one appears
+		*  before any monitored token.
+		*/
+		public virtual IHiddenStreamToken getInitialHiddenToken()
+		{
+			return firstHidden;
+		}
+		public virtual void  hide(int m)
+		{
+			hideMask.add(m);
+		}
+		public virtual void  hide(BitSet mask)
+		{
+			hideMask = mask;
+		}
+		protected internal virtual IHiddenStreamToken LA(int i)
+		{
+			return nextMonitoredToken;
+		}
+		/*Return the next monitored token.
+		*  Test the token following the monitored token.
+		*  If following is another monitored token, save it
+		*  for the next invocation of nextToken (like a single
+		*  lookahead token) and return it then.
+		*  If following is unmonitored, nondiscarded (hidden)
+		*  channel token, add it to the monitored token.
+		*
+		*  Note: EOF must be a monitored Token.
+		*/
+		override public IToken nextToken()
+		{
+			// handle an initial condition; don't want to get lookahead
+			// token of this splitter until first call to nextToken
+			if (LA(1) == null)
+			{
+				consumeFirst();
+			}
+			
+			// we always consume hidden tokens after monitored, thus,
+			// upon entry LA(1) is a monitored token.
+			IHiddenStreamToken monitored = LA(1);
+			// point to hidden tokens found during last invocation
+			monitored.setHiddenBefore(lastHiddenToken);
+			lastHiddenToken = null;
+			
+			// Look for hidden tokens, hook them into list emanating
+			// from the monitored tokens.
+			consume();
+			IHiddenStreamToken p = monitored;
+			// while hidden or discarded scarf tokens
+			while (hideMask.member(LA(1).Type) || discardMask.member(LA(1).Type))
+			{
+				if (hideMask.member(LA(1).Type))
+				{
+					// attach the hidden token to the monitored in a chain
+					// link forwards
+					p.setHiddenAfter(LA(1));
+					// link backwards
+					if (p != monitored)
+					{
+						//hidden cannot point to monitored tokens
+						LA(1).setHiddenBefore(p);
+					}
+					p = (lastHiddenToken = LA(1));
+				}
+				consume();
+			}
+			return monitored;
+		}
+		public virtual void resetState()
+		{
+			firstHidden			= null;
+			lastHiddenToken		= null;
+			nextMonitoredToken	= null;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/TokenStreamHiddenTokenFilter.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/TokenStreamIOException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenStreamIOException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenStreamIOException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,37 @@
+using System;
+using IOException = System.IO.IOException;
+	
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*
+	* Wraps an IOException in a TokenStreamException
+	*/
+	[Serializable]
+	public class TokenStreamIOException : TokenStreamException
+	{
+		public IOException io;
+		/*
+		* TokenStreamIOException constructor comment.
+		* @param s java.lang.String
+		*/
+		public TokenStreamIOException(IOException io) : base(io.Message)
+		{
+			this.io = io;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/TokenStreamIOException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/TokenStreamRecognitionException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenStreamRecognitionException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenStreamRecognitionException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,41 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+	
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*
+	* Wraps a RecognitionException in a TokenStreamException so you
+	* can pass it along.
+	*/
+
+	[Serializable]
+	public class TokenStreamRecognitionException : TokenStreamException
+	{
+		public RecognitionException recog;
+		
+		public TokenStreamRecognitionException(RecognitionException re) :
+				base(re.Message)
+		{
+			this.recog = re;
+		}
+		
+		override public string ToString()
+		{
+			return recog.ToString();
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/TokenStreamRecognitionException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/TokenStreamRetryException.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenStreamRetryException.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenStreamRetryException.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,31 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*
+	* Aborted recognition of current token. Try to get one again.
+	* Used by TokenStreamSelector.retry() to force nextToken()
+	* of stream to re-enter and retry.
+	*/
+
+	[Serializable]
+	public class TokenStreamRetryException : TokenStreamException
+	{
+		public TokenStreamRetryException() {}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/TokenStreamRetryException.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/TokenStreamRewriteEngine.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenStreamRewriteEngine.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenStreamRewriteEngine.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,552 @@
+namespace antlr
+{
+	/* ANTLR Translator Generator
+	 * Project led by Terence Parr at http://www.jGuru.com
+	 * Software rights: http://www.antlr.org/license.html
+	 */
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+
+	using System;
+	using IList 		= System.Collections.IList;
+	using IDictionary 	= System.Collections.IDictionary;
+	using ArrayList 	= System.Collections.ArrayList;
+	using Hashtable		= System.Collections.Hashtable;
+	using IComparer		= System.Collections.IComparer;
+	using StringBuilder = System.Text.StringBuilder;
+	using BitSet 		= antlr.collections.impl.BitSet;
+
+	/// <summary>
+	/// This token stream tracks the *entire* token stream coming from
+	/// a lexer, but does not pass on the whitespace (or whatever else
+	/// you want to discard) to the parser.
+	/// </summary>
+	/// <remarks>
+	/// <para>
+	/// This class can then be asked for the ith token in the input stream.
+	/// Useful for dumping out the input stream exactly after doing some
+	/// augmentation or other manipulations.  Tokens are index from 0..n-1
+	/// </para>
+	/// <para>
+	/// You can insert stuff, replace, and delete chunks.  Note that the
+	/// operations are done lazily--only if you convert the buffer to a
+	/// string.  This is very efficient because you are not moving data around
+	/// all the time.  As the buffer of tokens is converted to strings, the
+	/// toString() method(s) check to see if there is an operation at the
+	/// current index.  If so, the operation is done and then normal string
+	/// rendering continues on the buffer.  This is like having multiple Turing
+	/// machine instruction streams (programs) operating on a single input tape. :)
+	/// </para>
+	/// <para>
+	/// Since the operations are done lazily at toString-time, operations do not
+	/// screw up the token index values.  That is, an insert operation at token
+	/// index i does not change the index values for tokens i+1..n-1.
+	/// </para>
+	/// <para>
+	/// Because operations never actually alter the buffer, you may always get
+	/// the original token stream back without undoing anything.  Since
+	/// the instructions are queued up, you can easily simulate transactions and
+	/// roll back any changes if there is an error just by removing instructions.
+	/// For example,
+	/// </para>
+	/// <example>For example:
+	/// <code>
+	/// TokenStreamRewriteEngine rewriteEngine = new TokenStreamRewriteEngine(lexer);
+	/// JavaRecognizer           parser        = new JavaRecognizer(rewriteEngine);
+	/// ...
+	/// rewriteEngine.insertAfter("pass1", t, "foobar");}
+	/// rewriteEngine.insertAfter("pass2", u, "start");}
+	/// System.Console.Out.WriteLine(rewriteEngine.ToString("pass1"));
+	/// System.Console.Out.WriteLine(rewriteEngine.ToString("pass2"));
+	/// </code>
+	/// </example>
+	/// <para>
+	/// You can also have multiple "instruction streams" and get multiple
+	/// rewrites from a single pass over the input.  Just name the instruction
+	/// streams and use that name again when printing the buffer.  This could be
+	/// useful for generating a C file and also its header file--all from the
+	/// same buffer.
+	/// </para>
+	/// <para>
+	/// If you don't use named rewrite streams, a "default" stream is used.
+	/// </para>
+	/// <para>
+	/// Terence Parr, parrt at cs.usfca.edu
+	/// University of San Francisco
+	/// February 2004
+	/// </para>
+	/// </remarks>
+	public class TokenStreamRewriteEngine : TokenStream
+	{
+		public const int MIN_TOKEN_INDEX = 0;
+
+		protected class RewriteOperation 
+		{
+			protected internal int 		index;
+			protected internal string 	text;
+			
+			protected RewriteOperation(int index, string text) 
+			{
+				this.index = index;
+				this.text  = text;
+			}
+			
+			/// <summary>
+			/// Execute the rewrite operation by possibly adding to the buffer.
+			/// </summary>
+			/// <param name="buf">rewrite buffer</param>
+			/// <returns>The index of the next token to operate on.</returns>
+			public virtual int execute(StringBuilder buf) 
+			{
+				return index;
+			}
+		}
+
+		protected class InsertBeforeOp : RewriteOperation 
+		{
+			public InsertBeforeOp(int index, string text) : base(index, text)
+			{
+			}
+			
+			public override int execute(StringBuilder buf) 
+			{
+				buf.Append(text);
+				return index;
+			}
+		}
+
+		protected class ReplaceOp : RewriteOperation 
+		{
+			protected int lastIndex;
+			
+			public ReplaceOp(int from, int to, string text) : base(from, text)
+			{
+				lastIndex = to;
+			}
+			
+			public override int execute(StringBuilder buf) 
+			{
+				if ( text != null ) 
+				{
+					buf.Append(text);
+				}
+				return lastIndex+1;
+			}
+		}
+
+		protected class DeleteOp : ReplaceOp 
+		{
+			public DeleteOp(int from, int to) : base(from, to, null)
+			{
+			}
+		}
+
+		public const string 	DEFAULT_PROGRAM_NAME = "default";
+		public const int 		PROGRAM_INIT_SIZE 	= 100;
+
+		/// <summary>
+		/// Track the incoming list of tokens
+		/// </summary>
+		protected IList tokens;
+
+		/// <summary>
+		/// You may have multiple, named streams of rewrite operations.
+		/// I'm calling these things "programs."
+		/// Maps string (name) -> rewrite (List)
+		/// </summary>
+		protected IDictionary programs = null;
+
+		/// <summary>
+		/// Map string (program name) -> Integer index
+		/// </summary>
+		protected IDictionary lastRewriteTokenIndexes = null;
+
+		/// <summary>
+		/// track index of tokens
+		/// </summary>
+		protected int index = MIN_TOKEN_INDEX;
+
+		/// <summary>
+		/// Who do we suck tokens from?
+		/// </summary>
+		protected TokenStream stream;
+
+		/// <summary>
+		/// Which (whitespace) token(s) to throw out
+		/// </summary>
+		protected BitSet discardMask = new BitSet();
+
+		public TokenStreamRewriteEngine(TokenStream upstream) : this(upstream, 1000)
+		{
+		}
+
+		public TokenStreamRewriteEngine(TokenStream upstream, int initialSize) 
+		{
+			stream   = upstream;
+			tokens   = new ArrayList(initialSize);
+			programs = new Hashtable();
+			programs[DEFAULT_PROGRAM_NAME]	= new ArrayList(PROGRAM_INIT_SIZE);
+			lastRewriteTokenIndexes			= new Hashtable();
+		}
+
+		public IToken nextToken() 				// throws TokenStreamException 
+		{
+			TokenWithIndex t;
+
+			// suck tokens until end of stream or we find a non-discarded token
+			do 
+			{
+				t = (TokenWithIndex) stream.nextToken();
+				if ( t != null ) 
+				{
+					t.setIndex(index);  // what is t's index in list?
+					if ( t.Type != Token.EOF_TYPE ) 
+					{
+						tokens.Add(t);  // track all tokens except EOF
+					}
+					index++;			// move to next position
+				}
+			} while ( (t != null) && (discardMask.member(t.Type)) );
+
+			return t;
+		}
+
+		public void rollback(int instructionIndex) 
+		{
+			rollback(DEFAULT_PROGRAM_NAME, instructionIndex);
+		}
+
+		/// <summary>
+		/// Rollback the instruction stream for a program so that
+		/// the indicated instruction (via instructionIndex) is no
+		/// longer in the stream.
+		/// </summary>
+		/// <remarks>
+		/// UNTESTED!
+		/// </remarks>
+		/// <param name="programName"></param>
+		/// <param name="instructionIndex"></param>
+		public void rollback(string programName, int instructionIndex) 
+		{
+			ArrayList il = (ArrayList) programs[programName];
+			if ( il != null ) 
+			{
+				programs[programName] = il.GetRange(MIN_TOKEN_INDEX, (instructionIndex - MIN_TOKEN_INDEX));
+			}
+		}
+
+		public void deleteProgram() 
+		{
+			deleteProgram(DEFAULT_PROGRAM_NAME);
+		}
+
+		/// <summary>
+		/// Reset the program so that no instructions exist
+		/// </summary>
+		/// <param name="programName"></param>
+		public void deleteProgram(string programName) 
+		{
+			rollback(programName, MIN_TOKEN_INDEX);
+		}
+
+		/// <summary>
+		/// If op.index > lastRewriteTokenIndexes, just add to the end.
+		/// Otherwise, do linear
+		/// </summary>
+		/// <param name="op"></param>
+		protected void addToSortedRewriteList(RewriteOperation op) 
+		{
+			addToSortedRewriteList(DEFAULT_PROGRAM_NAME, op);
+		}
+
+		protected void addToSortedRewriteList(string programName, RewriteOperation op) 
+		{
+			ArrayList rewrites = (ArrayList) getProgram(programName);
+			// if at or beyond last op's index, just append
+			if ( op.index >= getLastRewriteTokenIndex(programName) ) 
+			{
+				rewrites.Add(op); // append to list of operations
+				// record the index of this operation for next time through
+				setLastRewriteTokenIndex(programName, op.index);
+				return;
+			}
+			// not after the last one, so must insert to ordered list
+			int pos = rewrites.BinarySearch(op, RewriteOperationComparer.Default);
+			if (pos < 0) 
+			{
+				rewrites.Insert(-pos-1, op);
+			}
+		}
+
+		public void insertAfter(IToken t, string text) 
+		{
+			insertAfter(DEFAULT_PROGRAM_NAME, t, text);
+		}
+
+		public void insertAfter(int index, string text) 
+		{
+			insertAfter(DEFAULT_PROGRAM_NAME, index, text);
+		}
+
+		public void insertAfter(string programName, IToken t, string text) 
+		{
+			insertAfter(programName,((TokenWithIndex) t).getIndex(), text); 
+		}
+
+		public void insertAfter(string programName, int index, string text) 
+		{
+			// to insert after, just insert before next index (even if past end)
+			insertBefore(programName, index+1, text); 
+		}
+
+		public void insertBefore(IToken t, string text) 
+		{
+			insertBefore(DEFAULT_PROGRAM_NAME, t, text);
+		}
+
+		public void insertBefore(int index, string text) 
+		{
+			insertBefore(DEFAULT_PROGRAM_NAME, index, text);
+		}
+
+		public void insertBefore(string programName, IToken t, string text) 
+		{
+			insertBefore(programName, ((TokenWithIndex) t).getIndex(), text);
+		}
+
+		public void insertBefore(string programName, int index, string text) 
+		{
+			addToSortedRewriteList(programName, new InsertBeforeOp(index, text));
+		}
+
+		public void replace(int index, string text) 
+		{
+			replace(DEFAULT_PROGRAM_NAME, index, index, text);
+		}
+
+		public void replace(int from, int to, string text) 
+		{
+			replace(DEFAULT_PROGRAM_NAME, from, to, text);
+		}
+
+		public void replace(IToken indexT, string text) 
+		{
+			replace(DEFAULT_PROGRAM_NAME, indexT, indexT, text);
+		}
+
+		public void replace(IToken from, IToken to, string text) 
+		{
+			replace(DEFAULT_PROGRAM_NAME, from, to, text);
+		}
+
+		public void replace(string programName, int from, int to, string text) 
+		{
+			addToSortedRewriteList(new ReplaceOp(from, to, text));
+		}
+
+		public void replace(string programName, IToken from, IToken to, string text) 
+		{
+			replace(programName,
+				((TokenWithIndex) from).getIndex(),
+				((TokenWithIndex) to).getIndex(),
+				text);
+		}
+
+		public void delete(int index) 
+		{
+			delete(DEFAULT_PROGRAM_NAME, index, index);
+		}
+
+		public void delete(int from, int to) 
+		{
+			delete(DEFAULT_PROGRAM_NAME, from, to);
+		}
+
+		public void delete(IToken indexT) 
+		{
+			delete(DEFAULT_PROGRAM_NAME, indexT, indexT);
+		}
+
+		public void delete(IToken from, IToken to) 
+		{
+			delete(DEFAULT_PROGRAM_NAME, from, to);
+		}
+
+		public void delete(string programName, int from, int to) 
+		{
+			replace(programName, from, to, null);
+		}
+
+		public void delete(string programName, IToken from, IToken to) 
+		{
+			replace(programName, from, to, null);
+		}
+
+		public void discard(int ttype) 
+		{
+			discardMask.add(ttype);
+		}
+
+		public TokenWithIndex getToken(int i) 
+		{
+			return (TokenWithIndex) tokens[i];
+		}
+
+		public int getTokenStreamSize() 
+		{
+			return tokens.Count;
+		}
+
+		public string ToOriginalString() 
+		{
+			return ToOriginalString(MIN_TOKEN_INDEX, getTokenStreamSize()-1);
+		}
+
+		public string ToOriginalString(int start, int end) 
+		{
+			StringBuilder buf = new StringBuilder();
+			for (int i = start; (i >= MIN_TOKEN_INDEX) && (i <= end) && (i < tokens.Count); i++) 
+			{
+				buf.Append(getToken(i).getText());
+			}
+			return buf.ToString();
+		}
+
+		public override string ToString() 
+		{
+			return ToString(MIN_TOKEN_INDEX, getTokenStreamSize());
+		}
+
+		public string ToString(string programName) 
+		{
+			return ToString(programName, MIN_TOKEN_INDEX, getTokenStreamSize());
+		}
+
+		public string ToString(int start, int end) 
+		{
+			return ToString(DEFAULT_PROGRAM_NAME, start, end);
+		}
+
+		public string ToString(string programName, int start, int end) 
+		{
+			IList rewrites = (IList) programs[programName];
+			if (rewrites == null) 
+			{
+				return null; // invalid program
+			}
+			StringBuilder buf = new StringBuilder();
+
+			// Index of first rewrite we have not done
+			int rewriteOpIndex = 0;
+
+			int tokenCursor = start;
+			while ( (tokenCursor >= MIN_TOKEN_INDEX) &&
+				(tokenCursor <= end) &&
+				(tokenCursor < tokens.Count) )
+			{
+				if (rewriteOpIndex < rewrites.Count) 
+				{
+					RewriteOperation op = (RewriteOperation) rewrites[rewriteOpIndex];
+					while ( (tokenCursor == op.index) && (rewriteOpIndex < rewrites.Count) ) 
+					{
+						/*
+						Console.Out.WriteLine("execute op "+rewriteOpIndex+
+											" (type "+op.GetType().FullName+")"
+											+" at index "+op.index);
+						*/
+						tokenCursor = op.execute(buf);
+						rewriteOpIndex++;
+						if (rewriteOpIndex < rewrites.Count) 
+						{
+							op = (RewriteOperation) rewrites[rewriteOpIndex];
+						}
+					}
+				}
+				if ( tokenCursor < end ) 
+				{
+					buf.Append(getToken(tokenCursor).getText());
+					tokenCursor++;
+				}
+			}
+			// now see if there are operations (append) beyond last token index
+			for (int opi = rewriteOpIndex; opi < rewrites.Count; opi++) 
+			{
+				RewriteOperation op = (RewriteOperation) rewrites[opi];
+				op.execute(buf); // must be insertions if after last token
+			}
+
+			return buf.ToString();
+		}
+
+		public string ToDebugString() 
+		{
+			return ToDebugString(MIN_TOKEN_INDEX, getTokenStreamSize());
+		}
+
+		public string ToDebugString(int start, int end) 
+		{
+			StringBuilder buf = new StringBuilder();
+			for (int i = start; (i >= MIN_TOKEN_INDEX) && (i <= end) && (i < tokens.Count); i++) 
+			{
+				buf.Append(getToken(i));
+			}
+			return buf.ToString();
+		}
+
+		public int getLastRewriteTokenIndex() 
+		{
+			return getLastRewriteTokenIndex(DEFAULT_PROGRAM_NAME);
+		}
+
+		protected int getLastRewriteTokenIndex(string programName) 
+		{
+			object i = lastRewriteTokenIndexes[programName];
+			if (i == null)
+			{
+				return -1;
+			}
+			return (int) i;
+		}
+
+		protected void setLastRewriteTokenIndex(string programName, int i) 
+		{
+			lastRewriteTokenIndexes[programName] = (object) i;
+		}
+
+		protected IList getProgram(string name) 
+		{
+			IList il = (IList) programs[name];
+			if ( il == null ) 
+			{
+				il = initializeProgram(name);
+			}
+			return il;
+		}
+
+		private IList initializeProgram(string name) 
+		{
+			IList il = new ArrayList(PROGRAM_INIT_SIZE);
+			programs[name] = il;
+			return il;
+		}
+
+		public class RewriteOperationComparer : IComparer
+		{
+			public static readonly RewriteOperationComparer Default = new RewriteOperationComparer();
+		
+			public virtual int Compare(object o1, object o2)
+			{
+				RewriteOperation rop1 = (RewriteOperation) o1;
+				RewriteOperation rop2 = (RewriteOperation) o2;
+
+				if (rop1.index < rop2.index) return -1;
+				if (rop1.index > rop2.index) return 1;
+				return 0;
+			}
+		}
+	}
+}

Added: trunk/src/antlr-runtime/antlr/TokenStreamSelector.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenStreamSelector.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenStreamSelector.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,118 @@
+using System;
+using Hashtable		= System.Collections.Hashtable;
+using Stack    		= System.Collections.Stack;
+	
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*A token stream MUX (multiplexor) knows about n token streams
+	*  and can multiplex them onto the same channel for use by token
+	*  stream consumer like a parser.  This is a way to have multiple
+	*  lexers break up the same input stream for a single parser.
+	*	Or, you can have multiple instances of the same lexer handle
+	*  multiple input streams; this works great for includes.
+	*/
+	public class TokenStreamSelector : TokenStream
+	{
+		/*The set of inputs to the MUX */
+		protected internal Hashtable inputStreamNames;
+		
+		/*The currently-selected token stream input */
+		protected internal TokenStream input;
+		
+		/*Used to track stack of input streams */
+		protected internal Stack streamStack = new Stack();
+		
+		public TokenStreamSelector() : base()
+		{
+			inputStreamNames = new Hashtable();
+		}
+		public virtual void  addInputStream(TokenStream stream, string key)
+		{
+			inputStreamNames[key] = stream;
+		}
+		/*Return the stream from tokens are being pulled at
+		*  the moment.
+		*/
+		public virtual TokenStream getCurrentStream()
+		{
+			return input;
+		}
+		public virtual TokenStream getStream(string sname)
+		{
+			TokenStream stream = (TokenStream) inputStreamNames[sname];
+			if (stream == null)
+			{
+				throw new System.ArgumentException("TokenStream " + sname + " not found");
+			}
+			return stream;
+		}
+		public virtual IToken nextToken()
+		{
+			// return input.nextToken();
+			// keep looking for a token until you don't
+			// get a retry exception.
+			 for (; ; )
+			{
+				try
+				{
+					return input.nextToken();
+				}
+				catch (TokenStreamRetryException)
+				{
+					// just retry "forever"
+				}
+			}
+		}
+		public virtual TokenStream pop()
+		{
+			TokenStream stream = (TokenStream) streamStack.Pop();
+			select(stream);
+			return stream;
+		}
+		public virtual void  push(TokenStream stream)
+		{
+			streamStack.Push(input); // save current stream
+			select(stream);
+		}
+		public virtual void  push(string sname)
+		{
+			streamStack.Push(input);
+			select(sname);
+		}
+		/*Abort recognition of current Token and try again.
+		*  A stream can push a new stream (for include files
+		*  for example, and then retry(), which will cause
+		*  the current stream to abort back to this.nextToken().
+		*  this.nextToken() then asks for a token from the
+		*  current stream, which is the new "substream."
+		*/
+		public virtual void  retry()
+		{
+			throw new TokenStreamRetryException();
+		}
+		/*Set the stream without pushing old stream */
+		public virtual void  select(TokenStream stream)
+		{
+			input = stream;
+		}
+		public virtual void  select(string sname)
+		{
+			input = getStream(sname);
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/TokenStreamSelector.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/TokenWithIndex.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TokenWithIndex.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TokenWithIndex.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,51 @@
+namespace antlr
+{
+	/* ANTLR Translator Generator
+	 * Project led by Terence Parr at http://www.jGuru.com
+	 * Software rights: http://www.antlr.org/license.html
+	 */
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+
+	using System;
+
+	 /// <summary>
+	 /// This token tracks it's own index 0..n-1 relative to the beginning 
+	 /// of the stream. It is designed to work with 
+	 /// <see cref="TokenStreamRewriteEngine"/> in TokenStreamRewriteEngine.cs
+	 /// </summary> 
+	public class TokenWithIndex : CommonToken 
+	{
+		/// <summary>
+		/// Index into token array indicating position in input stream
+		/// </summary>
+	    int index;
+
+	    public TokenWithIndex() : base()
+	    {
+	    }
+
+	    public TokenWithIndex(int i, string t) : base(i, t)
+	    {
+	    }
+
+		public void setIndex(int i)
+		{
+			index = i;
+		}
+
+		public int getIndex() 
+		{
+			return index;
+		}
+
+		public override string ToString()
+		{
+			return "["+index+":\"" + getText() + "\",<" + Type + ">,line=" + line + ",col=" + col + "]\n";
+		}
+	}
+}
\ No newline at end of file

Added: trunk/src/antlr-runtime/antlr/TreeParser.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TreeParser.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TreeParser.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,178 @@
+using System;
+using AST = antlr.collections.AST;
+using BitSet = antlr.collections.impl.BitSet;
+	
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	public class TreeParser
+	{
+		/*The AST Null object; the parsing cursor is set to this when
+		*  it is found to be null.  This way, we can test the
+		*  token type of a node without having to have tests for null
+		*  everywhere.
+		*/
+		public static ASTNULLType ASTNULL = new ASTNULLType();
+		
+		/*Where did this rule leave off parsing; avoids a return parameter */
+		protected internal AST retTree_;
+		
+		/*guessing nesting level; guessing==0 implies not guessing */
+		// protected int guessing = 0;
+		
+		/*Nesting level of registered handlers */
+		// protected int exceptionLevel = 0;
+		
+		protected internal TreeParserSharedInputState inputState;
+		
+		/*Table of token type to token names */
+		protected internal string[] tokenNames;
+		
+		/*AST return value for a rule is squirreled away here */
+		protected internal AST returnAST;
+		
+		/*AST support code; parser and treeparser delegate to this object */
+		protected internal ASTFactory astFactory = new ASTFactory();
+		
+		/*Used to keep track of indentdepth for traceIn/Out */
+		protected internal int traceDepth = 0;
+		
+		public TreeParser()
+		{
+			inputState = new TreeParserSharedInputState();
+		}
+		/*Get the AST return value squirreled away in the parser */
+		public virtual AST getAST()
+		{
+			return returnAST;
+		}
+		public virtual ASTFactory getASTFactory()
+		{
+			return astFactory;
+		}
+		public virtual void resetState()
+		{
+			traceDepth  = 0;
+			returnAST	= null;
+			retTree_	= null;
+			inputState.reset();
+		}
+		public virtual string getTokenName(int num)
+		{
+			return tokenNames[num];
+		}
+		public virtual string[] getTokenNames()
+		{
+			return tokenNames;
+		}
+		protected internal virtual void  match(AST t, int ttype)
+		{
+			//System.out.println("match("+ttype+"); cursor is "+t);
+			if (t == null || t == ASTNULL || t.Type != ttype)
+			{
+				throw new MismatchedTokenException(getTokenNames(), t, ttype, false);
+			}
+		}
+		/*Make sure current lookahead symbol matches the given set
+		* Throw an exception upon mismatch, which is catch by either the
+		* error handler or by the syntactic predicate.
+		*/
+		public virtual void  match(AST t, BitSet b)
+		{
+			if (t == null || t == ASTNULL || !b.member(t.Type))
+			{
+				throw new MismatchedTokenException(getTokenNames(), t, b, false);
+			}
+		}
+		protected internal virtual void  matchNot(AST t, int ttype)
+		{
+			//System.out.println("match("+ttype+"); cursor is "+t);
+			if (t == null || t == ASTNULL || t.Type == ttype)
+			{
+				throw new MismatchedTokenException(getTokenNames(), t, ttype, true);
+			}
+		}
+
+		/// <summary>
+		/// @deprecated as of 2.7.2. This method calls System.exit() and writes
+		/// directly to stderr, which is usually not appropriate when
+		/// a parser is embedded into a larger application. Since the method is
+		/// <code>static</code>, it cannot be overridden to avoid these problems.
+		/// ANTLR no longer uses this method internally or in generated code.
+		/// </summary>
+		/// 
+		[Obsolete("De-activated since version 2.7.2.6 as it cannot be overidden.", true)]
+		public static void panic()
+		{
+			Console.Error.WriteLine("TreeWalker: panic");
+			System.Environment.Exit(1);
+		}
+		/*Parser error-reporting function can be overridden in subclass */
+		public virtual void  reportError(RecognitionException ex)
+		{
+			Console.Error.WriteLine(ex.ToString());
+		}
+		/*Parser error-reporting function can be overridden in subclass */
+		public virtual void  reportError(string s)
+		{
+			Console.Error.WriteLine("error: " + s);
+		}
+		/*Parser warning-reporting function can be overridden in subclass */
+		public virtual void  reportWarning(string s)
+		{
+			Console.Error.WriteLine("warning: " + s);
+		}
+		/*Specify an object with support code (shared by
+		*  Parser and TreeParser.  Normally, the programmer
+		*  does not play with this, using setASTNodeType instead.
+		*/
+		public virtual void  setASTFactory(ASTFactory f)
+		{
+			astFactory = f;
+		}
+		
+		/*Specify the type of node to create during tree building */
+		public virtual void  setASTNodeType(string nodeType)
+		{
+			setASTNodeClass(nodeType);
+		}
+		
+		/*Specify the type of node to create during tree building */
+		public virtual void  setASTNodeClass(string nodeType)
+		{
+			astFactory.setASTNodeType(nodeType);
+		}
+		
+		public virtual void  traceIndent()
+		{
+			 for (int i = 0; i < traceDepth; i++)
+				Console.Out.Write(" ");
+		}
+		public virtual void  traceIn(string rname, AST t)
+		{
+			traceDepth += 1;
+			traceIndent();
+			Console.Out.WriteLine("> " + rname + "(" + ((t != null) ? t.ToString() : "null") + ")" + ((inputState.guessing > 0) ? " [guessing]" : ""));
+		}
+		public virtual void  traceOut(string rname, AST t)
+		{
+			traceIndent();
+			Console.Out.WriteLine("< " + rname + "(" + ((t != null) ? t.ToString() : "null") + ")" + ((inputState.guessing > 0) ? " [guessing]" : ""));
+			traceDepth--;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/TreeParser.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr/TreeParserSharedInputState.cs
===================================================================
--- trunk/src/antlr-runtime/antlr/TreeParserSharedInputState.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr/TreeParserSharedInputState.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,37 @@
+using System;
+
+namespace antlr
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*This object contains the data associated with an
+	*  input AST.  Multiple parsers
+	*  share a single TreeParserSharedInputState to parse
+	*  the same tree or to have the parser walk multiple
+	*  trees.
+	*/
+
+	public class TreeParserSharedInputState
+	{
+		/*Are we guessing (guessing>0)? */
+		public int guessing = 0;
+
+		public virtual void reset()
+		{
+			guessing = 0;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr/TreeParserSharedInputState.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.collections/AST.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.collections/AST.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.collections/AST.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,89 @@
+using System;
+using IEnumerator = System.Collections.IEnumerator;
+
+using IToken = antlr.IToken;
+	
+namespace antlr.collections
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/// <summary>
+	/// Minimal AST node interface used by ANTLR AST generation and tree-walker.
+	/// </summary>
+	public interface AST : ICloneable
+	{
+		/// <summary>
+		/// Add a (rightmost) child to this node
+		/// </summary>
+		/// <param name="c"></param>
+		void  addChild(AST c);
+		bool Equals(AST t);
+		bool EqualsList(AST t);
+		bool EqualsListPartial(AST t);
+		bool EqualsTree(AST t);
+		bool EqualsTreePartial(AST t);
+		IEnumerator findAll(AST tree);
+		IEnumerator findAllPartial(AST subtree);
+		/// <summary>
+		/// Get the first child of this node; null if no children
+		/// </summary>
+		AST getFirstChild();
+		/// <summary>
+		/// Get	the next sibling in line after this one
+		/// </summary>
+		AST getNextSibling();
+		/// <summary>
+		/// Get the token text for this node
+		/// </summary>
+		/// <returns></returns>
+		string getText();
+		/// <summary>
+		/// Get the token type for this node
+		/// </summary>
+		int Type	{ get; set;}
+		/// <summary>
+		/// Get number of children of this node; if leaf, returns 0
+		/// </summary>
+		/// <returns>Number of children</returns>
+		int getNumberOfChildren();
+		void  initialize(int t, string txt);
+		void  initialize(AST t);
+		void  initialize(IToken t);
+		/// <summary>
+		/// Set the first child of a node.
+		/// </summary>
+		/// <param name="c"></param>
+		void  setFirstChild(AST c);
+		/// <summary>
+		/// Set the next sibling after this one.
+		/// </summary>
+		/// <param name="n"></param>
+		void  setNextSibling(AST n);
+		/// <summary>
+		/// Set the token text for this node
+		/// </summary>
+		/// <param name="text"></param>
+		void  setText(string text);
+		/// <summary>
+		/// Set the token type for this node
+		/// </summary>
+		/// <param name="ttype"></param>
+		void  setType(int ttype);
+		string ToString();
+		string ToStringList();
+		string ToStringTree();
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.collections/AST.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.collections.impl/ASTArray.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.collections.impl/ASTArray.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.collections.impl/ASTArray.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,42 @@
+using System;
+using AST = antlr.collections.AST;
+	
+namespace antlr.collections.impl
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+
+	/*ASTArray is a class that allows ANTLR to
+	* generate code that can create and initialize an array
+	* in one expression, like:
+	*    (new ASTArray(3)).add(x).add(y).add(z)
+	*/
+	public class ASTArray
+	{
+		public int size = 0;
+		public AST[] array;
+		
+		
+		public ASTArray(int capacity)
+		{
+			array = new AST[capacity];
+		}
+		public virtual ASTArray add(AST node)
+		{
+			array[size++] = node;
+			return this;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.collections.impl/ASTArray.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.collections.impl/BitSet.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.collections.impl/BitSet.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.collections.impl/BitSet.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,539 @@
+using System;
+using ArrayList					= System.Collections.ArrayList;
+
+//using CharFormatter				= antlr.CharFormatter;
+
+namespace antlr.collections.impl
+{
+	/*ANTLR Translator Generator
+	* Project led by Terence Parr at http://www.jGuru.com
+	* Software rights: http://www.antlr.org/license.html
+	*
+	* $Id:$
+	*/
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+	// With many thanks to Eric V. Smith from the ANTLR list.
+	//
+	
+	/*A BitSet to replace java.util.BitSet.
+	* Primary differences are that most set operators return new sets
+	* as opposed to oring and anding "in place".  Further, a number of
+	* operations were added.  I cannot contain a BitSet because there
+	* is no way to access the internal bits (which I need for speed)
+	* and, because it is final, I cannot subclass to add functionality.
+	* Consider defining set degree.  Without access to the bits, I must
+	* call a method n times to test the ith bit...ack!
+	*
+	* Also seems like or() from util is wrong when size of incoming set is bigger
+	* than this.bits.length.
+	*
+	* @author Terence Parr
+	* @author <br><a href="mailto:pete at yamuna.demon.co.uk">Pete Wells</a>
+	*/
+
+	public class BitSet : ICloneable
+	{
+		protected internal const int BITS = 64; // number of bits / long
+		protected internal const int NIBBLE = 4;
+		protected internal const int LOG_BITS = 6; // 2^6 == 64
+		
+		/*We will often need to do a mod operator (i mod nbits).  Its
+		* turns out that, for powers of two, this mod operation is
+		* same as (i & (nbits-1)).  Since mod is slow, we use a
+		* precomputed mod mask to do the mod instead.
+		*/
+		protected internal static readonly int MOD_MASK = BITS - 1;
+		
+		/*The actual data bits */
+		protected internal long[] dataBits;
+		
+		/*Construct a bitset of size one word (64 bits) */
+		public BitSet() : this(BITS)
+		{
+		}
+		
+		/*Construction from a static array of longs */
+		public BitSet(long[] bits_)
+		{
+			dataBits = bits_;
+		}
+		
+		/*Construct a bitset given the size
+		* @param nbits The size of the bitset in bits
+		*/
+		public BitSet(int nbits)
+		{
+			dataBits = new long[((nbits - 1) >> LOG_BITS) + 1];
+		}
+		
+		/*or this element into this set (grow as necessary to accommodate) */
+		public virtual void  add(int el)
+		{
+			int n = wordNumber(el);
+			if (n >= dataBits.Length)
+			{
+				growToInclude(el);
+			}
+			dataBits[n] |= bitMask(el);
+		}
+		
+		public virtual BitSet and(BitSet a)
+		{
+			BitSet s = (BitSet) this.Clone();
+			s.andInPlace(a);
+			return s;
+		}
+		
+		public virtual void  andInPlace(BitSet a)
+		{
+			int min = (int) (Math.Min(dataBits.Length, a.dataBits.Length));
+			 for (int i = min - 1; i >= 0; i--)
+			{
+				dataBits[i] &= a.dataBits[i];
+			}
+			// clear all bits in this not present in a (if this bigger than a).
+			 for (int i = min; i < dataBits.Length; i++)
+			{
+				dataBits[i] = 0;
+			}
+		}
+		
+		private static long bitMask(int bitNumber)
+		{
+			int bitPosition = bitNumber & MOD_MASK; // bitNumber mod BITS
+			return 1L << bitPosition;
+		}
+		
+		public virtual void  clear()
+		{
+			 for (int i = dataBits.Length - 1; i >= 0; i--)
+			{
+				dataBits[i] = 0;
+			}
+		}
+		
+		public virtual void  clear(int el)
+		{
+			int n = wordNumber(el);
+			if (n >= dataBits.Length)
+			{
+				// grow as necessary to accommodate
+				growToInclude(el);
+			}
+			dataBits[n] &= ~ bitMask(el);
+		}
+		
+		public virtual object Clone()
+		{
+			BitSet s;
+			try
+			{
+				s = new BitSet();
+				s.dataBits = new long[dataBits.Length];
+				Array.Copy(dataBits, 0, s.dataBits, 0, dataBits.Length);
+			}
+			catch //(System.Exception e)
+			{
+				throw new System.ApplicationException();
+			}
+			return s;
+		}
+		
+		public virtual int degree()
+		{
+			int deg = 0;
+			 for (int i = dataBits.Length - 1; i >= 0; i--)
+			{
+				long word = dataBits[i];
+				if (word != 0L)
+				{
+					 for (int bit = BITS - 1; bit >= 0; bit--)
+					{
+						if ((word & (1L << bit)) != 0)
+						{
+							deg++;
+						}
+					}
+				}
+			}
+			return deg;
+		}
+		
+		override public int GetHashCode()
+		{
+			return dataBits.GetHashCode();
+		}
+
+		/*code "inherited" from java.util.BitSet */
+		override public bool Equals(object obj)
+		{
+			if ((obj != null) && (obj is BitSet))
+			{
+				BitSet bset = (BitSet) obj;
+				
+				int n = (int) (System.Math.Min(dataBits.Length, bset.dataBits.Length));
+				 for (int i = n; i-- > 0; )
+				{
+					if (dataBits[i] != bset.dataBits[i])
+					{
+						return false;
+					}
+				}
+				if (dataBits.Length > n)
+				{
+					 for (int i = (int) (dataBits.Length); i-- > n; )
+					{
+						if (dataBits[i] != 0)
+						{
+							return false;
+						}
+					}
+				}
+				else if (bset.dataBits.Length > n)
+				{
+					 for (int i = (int) (bset.dataBits.Length); i-- > n; )
+					{
+						if (bset.dataBits[i] != 0)
+						{
+							return false;
+						}
+					}
+				}
+				return true;
+			}
+			return false;
+		}
+		
+		/*
+		* Grows the set to a larger number of bits.
+		* @param bit element that must fit in set
+		*/
+		public virtual void  growToInclude(int bit)
+		{
+			int newSize = (int) (System.Math.Max(dataBits.Length << 1, numWordsToHold(bit)));
+			long[] newbits = new long[newSize];
+			Array.Copy(dataBits, 0, newbits, 0, dataBits.Length);
+			dataBits = newbits;
+		}
+		
+		public virtual bool member(int el)
+		{
+			int n = wordNumber(el);
+			if (n >= dataBits.Length)
+				return false;
+			return (dataBits[n] & bitMask(el)) != 0;
+		}
+		
+		public virtual bool nil()
+		{
+			 for (int i = dataBits.Length - 1; i >= 0; i--)
+			{
+				if (dataBits[i] != 0)
+					return false;
+			}
+			return true;
+		}
+		
+		public virtual BitSet not()
+		{
+			BitSet s = (BitSet) this.Clone();
+			s.notInPlace();
+			return s;
+		}
+		
+		public virtual void  notInPlace()
+		{
+			 for (int i = dataBits.Length - 1; i >= 0; i--)
+			{
+				dataBits[i] = ~ dataBits[i];
+			}
+		}
+		
+		/*complement bits in the range 0..maxBit. */
+		public virtual void  notInPlace(int maxBit)
+		{
+			notInPlace(0, maxBit);
+		}
+		
+		/*complement bits in the range minBit..maxBit.*/
+		public virtual void  notInPlace(int minBit, int maxBit)
+		{
+			// make sure that we have room for maxBit
+			growToInclude(maxBit);
+			 for (int i = minBit; i <= maxBit; i++)
+			{
+				int n = wordNumber(i);
+				dataBits[n] ^= bitMask(i);
+			}
+		}
+		
+		private int numWordsToHold(int el)
+		{
+			return (el >> LOG_BITS) + 1;
+		}
+		
+		public static BitSet of(int el)
+		{
+			BitSet s = new BitSet(el + 1);
+			s.add(el);
+			return s;
+		}
+		
+		/*return this | a in a new set */
+		public virtual BitSet or(BitSet a)
+		{
+			BitSet s = (BitSet) this.Clone();
+			s.orInPlace(a);
+			return s;
+		}
+		
+		public virtual void  orInPlace(BitSet a)
+		{
+			// If this is smaller than a, grow this first
+			if (a.dataBits.Length > dataBits.Length)
+			{
+				setSize((int) (a.dataBits.Length));
+			}
+			int min = (int) (System.Math.Min(dataBits.Length, a.dataBits.Length));
+			 for (int i = min - 1; i >= 0; i--)
+			{
+				dataBits[i] |= a.dataBits[i];
+			}
+		}
+		
+		// remove this element from this set
+		public virtual void  remove(int el)
+		{
+			int n = wordNumber(el);
+			if (n >= dataBits.Length)
+			{
+				growToInclude(el);
+			}
+			dataBits[n] &= ~ bitMask(el);
+		}
+		
+		/*
+		* Sets the size of a set.
+		* @param nwords how many words the new set should be
+		*/
+		private void  setSize(int nwords)
+		{
+			long[] newbits = new long[nwords];
+			int n = (int) (System.Math.Min(nwords, dataBits.Length));
+			Array.Copy(dataBits, 0, newbits, 0, n);
+			dataBits = newbits;
+		}
+		
+		public virtual int size()
+		{
+			return dataBits.Length << LOG_BITS; // num words * bits per word
+		}
+		
+		/*return how much space is being used by the dataBits array not
+		*  how many actually have member bits on.
+		*/
+		public virtual int lengthInLongWords()
+		{
+			return dataBits.Length;
+		}
+		
+		/*Is this contained within a? */
+		public virtual bool subset(BitSet a)
+		{
+			if (a == null) //(a == null || !(a is BitSet))
+				return false;
+			return this.and(a).Equals(this);
+		}
+		
+		/*Subtract the elements of 'a' from 'this' in-place.
+		* Basically, just turn off all bits of 'this' that are in 'a'.
+		*/
+		public virtual void  subtractInPlace(BitSet a)
+		{
+			if (a == null)
+				return ;
+			// for all words of 'a', turn off corresponding bits of 'this'
+			 for (int i = 0; i < dataBits.Length && i < a.dataBits.Length; i++)
+			{
+				dataBits[i] &= ~ a.dataBits[i];
+			}
+		}
+		
+		public virtual int[] toArray()
+		{
+			int[] elems = new int[degree()];
+			int en = 0;
+			 for (int i = 0; i < (dataBits.Length << LOG_BITS); i++)
+			{
+				if (member(i))
+				{
+					elems[en++] = i;
+				}
+			}
+			return elems;
+		}
+		
+		public virtual long[] toPackedArray()
+		{
+			return dataBits;
+		}
+		
+		override public string ToString()
+		{
+			return ToString(",");
+		}
+		
+		/*Transform a bit set into a string by formatting each element as an integer
+		* @separator The string to put in between elements
+		* @return A commma-separated list of values
+		*/
+		public virtual string ToString(string separator)
+		{
+			string str = "";
+			 for (int i = 0; i < (dataBits.Length << LOG_BITS); i++)
+			{
+				if (member(i))
+				{
+					if (str.Length > 0)
+					{
+						str += separator;
+					}
+					str = str + i;
+				}
+			}
+			return str;
+		}
+		
+		/*Create a string representation where instead of integer elements, the
+		* ith element of vocabulary is displayed instead.  Vocabulary is a Vector
+		* of Strings.
+		* @separator The string to put in between elements
+		* @return A commma-separated list of character constants.
+		*/
+		public virtual string ToString(string separator, ArrayList vocabulary)
+		{
+			if (vocabulary == null)
+			{
+				return ToString(separator);
+			}
+			string str = "";
+			 for (int i = 0; i < (dataBits.Length << LOG_BITS); i++)
+			{
+				if (member(i))
+				{
+					if (str.Length > 0)
+					{
+						str += separator;
+					}
+					if (i >= vocabulary.Count)
+					{
+						str += "<bad element " + i + ">";
+					}
+					else if (vocabulary[i] == null)
+					{
+						str += "<" + i + ">";
+					}
+					else
+					{
+						str += (string) vocabulary[i];
+					}
+				}
+			}
+			return str;
+		}
+		
+		/*
+		* Dump a comma-separated list of the words making up the bit set.
+		* Split each 64 bit number into two more manageable 32 bit numbers.
+		* This generates a comma-separated list of C++-like unsigned long constants.
+		*/
+		public virtual string toStringOfHalfWords()
+		{
+			string s = new string("".ToCharArray());
+			 for (int i = 0; i < dataBits.Length; i++)
+			{
+				if (i != 0)
+					s += ", ";
+				long tmp = dataBits[i];
+				tmp &= 0xFFFFFFFFL;
+				s += (tmp + "UL");
+				s += ", ";
+				tmp = SupportClass.URShift(dataBits[i], 32);
+				tmp &= 0xFFFFFFFFL;
+				s += (tmp + "UL");
+			}
+			return s;
+		}
+		
+		/*
+		* Dump a comma-separated list of the words making up the bit set.
+		* This generates a comma-separated list of Java-like long int constants.
+		*/
+		public virtual string toStringOfWords()
+		{
+			string s = new string("".ToCharArray());
+			 for (int i = 0; i < dataBits.Length; i++)
+			{
+				if (i != 0)
+					s += ", ";
+				s += (dataBits[i] + "L");
+			}
+			return s;
+		}
+		
+		/*Print out the bit set but collapse char ranges. */
+/*		public virtual string toStringWithRanges(string separator, CharFormatter formatter)
+		{
+			string str = "";
+			int[] elems = this.toArray();
+			if (elems.Length == 0)
+			{
+				return "";
+			}
+			// look for ranges
+			int i = 0;
+			while (i < elems.Length)
+			{
+				int lastInRange;
+				lastInRange = 0;
+				 for (int j = i + 1; j < elems.Length; j++)
+				{
+					if (elems[j] != elems[j - 1] + 1)
+					{
+						break;
+					}
+					lastInRange = j;
+				}
+				// found a range
+				if (str.Length > 0)
+				{
+					str += separator;
+				}
+				if (lastInRange - i >= 2)
+				{
+					str += formatter.literalChar(elems[i]);
+					str += "..";
+					str += formatter.literalChar(elems[lastInRange]);
+					i = lastInRange; // skip past end of range for next range
+				}
+				else
+				{
+					// no range, just print current char and move on
+					str += formatter.literalChar(elems[i]);
+				}
+				i++;
+			}
+			return str;
+		}
+*/		
+		private static int wordNumber(int bit)
+		{
+			return bit >> LOG_BITS; // bit / BITS
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.collections.impl/BitSet.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ANTLREventArgs.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ANTLREventArgs.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ANTLREventArgs.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,37 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public abstract class ANTLREventArgs : EventArgs
+	{
+		public ANTLREventArgs()
+		{
+		}
+		public ANTLREventArgs(int type)
+		{
+			this.Type = type;
+		}
+	
+		public virtual int Type
+		{
+			get
+			{
+				return this.type_;
+			}
+			set
+			{
+				this.type_ = value;
+			}
+		}
+
+		internal void setValues(int type)
+		{
+			this.Type = type;
+		}
+
+		/// <summary>
+		/// Event type.
+		/// </summary>
+		private int type_;
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ANTLREventArgs.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/DebuggingCharScanner.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/DebuggingCharScanner.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/DebuggingCharScanner.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,322 @@
+namespace antlr.debug
+{
+	using System;
+	using System.Threading;
+	using antlr;
+
+	using BitSet	= antlr.collections.impl.BitSet;
+	
+	public abstract class DebuggingCharScanner : CharScanner, DebuggingParser
+	{
+		private void  InitBlock()
+		{
+			eventSupport = new ScannerEventSupport(this);
+		}
+		public virtual void setDebugMode(bool mode)
+		{
+			_notDebugMode = !mode;
+		}
+
+		private ScannerEventSupport eventSupport;
+		private bool _notDebugMode = false;
+		protected internal string[] ruleNames;
+		protected internal string[] semPredNames;
+		
+		
+		public DebuggingCharScanner(InputBuffer cb) : base(cb)
+		{
+			InitBlock();
+		}
+		public DebuggingCharScanner(LexerSharedInputState state) : base(state)
+		{
+			InitBlock();
+		}
+		public virtual void  addMessageListener(MessageListener l)
+		{
+			eventSupport.addMessageListener(l);
+		}
+		public virtual void  addNewLineListener(NewLineListener l)
+		{
+			eventSupport.addNewLineListener(l);
+		}
+		public virtual void  addParserListener(ParserListener l)
+		{
+			eventSupport.addParserListener(l);
+		}
+		public virtual void  addParserMatchListener(ParserMatchListener l)
+		{
+			eventSupport.addParserMatchListener(l);
+		}
+		public virtual void  addParserTokenListener(ParserTokenListener l)
+		{
+			eventSupport.addParserTokenListener(l);
+		}
+		public virtual void  addSemanticPredicateListener(SemanticPredicateListener l)
+		{
+			eventSupport.addSemanticPredicateListener(l);
+		}
+		public virtual void  addSyntacticPredicateListener(SyntacticPredicateListener l)
+		{
+			eventSupport.addSyntacticPredicateListener(l);
+		}
+		public virtual void  addTraceListener(TraceListener l)
+		{
+			eventSupport.addTraceListener(l);
+		}
+		public override void  consume()
+		{
+			int la_1 = - 99;
+			try
+			{
+				la_1 = LA(1);
+			}
+			catch (CharStreamException)
+			{
+			}
+			base.consume();
+			eventSupport.fireConsume(la_1);
+		}
+		protected internal virtual void  fireEnterRule(int num, int data)
+		{
+			if (isDebugMode())
+				eventSupport.fireEnterRule(num, inputState.guessing, data);
+		}
+		protected internal virtual void  fireExitRule(int num, int ttype)
+		{
+			if (isDebugMode())
+				eventSupport.fireExitRule(num, inputState.guessing, ttype);
+		}
+		protected internal virtual bool fireSemanticPredicateEvaluated(int type, int num, bool condition)
+		{
+			if (isDebugMode())
+				return eventSupport.fireSemanticPredicateEvaluated(type, num, condition, inputState.guessing);
+			else
+				return condition;
+		}
+		protected internal virtual void  fireSyntacticPredicateFailed()
+		{
+			if (isDebugMode())
+				eventSupport.fireSyntacticPredicateFailed(inputState.guessing);
+		}
+		protected internal virtual void  fireSyntacticPredicateStarted()
+		{
+			if (isDebugMode())
+				eventSupport.fireSyntacticPredicateStarted(inputState.guessing);
+		}
+		protected internal virtual void  fireSyntacticPredicateSucceeded()
+		{
+			if (isDebugMode())
+				eventSupport.fireSyntacticPredicateSucceeded(inputState.guessing);
+		}
+		public virtual string getRuleName(int num)
+		{
+			return ruleNames[num];
+		}
+		public virtual string getSemPredName(int num)
+		{
+			return semPredNames[num];
+		}
+		public virtual void  goToSleep()
+		{
+			lock(this)
+			{
+				try
+				{
+					Monitor.Wait(this);
+				}
+				catch (System.Threading.ThreadInterruptedException)
+				{
+				}
+			}
+		}
+		public virtual bool isDebugMode()
+		{
+			return !_notDebugMode;
+		}
+		public override char LA(int i)
+		{
+			char la = base.LA(i);
+			eventSupport.fireLA(i, la);
+			return la;
+		}
+		protected internal override IToken makeToken(int t)
+		{
+			// do something with char buffer???
+			//		try {
+			//			IToken tok = (Token)tokenObjectClass.newInstance();
+			//			tok.setType(t);
+			//			// tok.setText(getText()); done in generated lexer now
+			//			tok.setLine(line);
+			//			return tok;
+			//		}
+			//		catch (InstantiationException ie) {
+			//			panic("can't instantiate a Token");
+			//		}
+			//		catch (IllegalAccessException iae) {
+			//			panic("Token class is not accessible");
+			//		}
+			return base.makeToken(t);
+		}
+		public override void  match(int c)
+		{
+			char la_1 = LA(1);
+			try
+			{
+				base.match(c);
+				eventSupport.fireMatch(Convert.ToChar(c), inputState.guessing);
+			}
+			catch (MismatchedCharException e)
+			{
+				if (inputState.guessing == 0)
+					eventSupport.fireMismatch(la_1, Convert.ToChar(c), inputState.guessing);
+				throw e;
+			}
+		}
+		public override void  match(BitSet b)
+		{
+			string text = this.text.ToString();
+			char la_1 = LA(1);
+			try
+			{
+				base.match(b);
+				eventSupport.fireMatch(la_1, b, text, inputState.guessing);
+			}
+			catch (MismatchedCharException e)
+			{
+				if (inputState.guessing == 0)
+					eventSupport.fireMismatch(la_1, b, text, inputState.guessing);
+				throw e;
+			}
+		}
+		public override void  match(string s)
+		{
+			System.Text.StringBuilder la_s = new System.Text.StringBuilder("");
+			int len = s.Length;
+			// peek at the next len worth of characters
+			try
+			{
+				 for (int i = 1; i <= len; i++)
+				{
+					la_s.Append(base.LA(i));
+				}
+			}
+			catch (System.Exception)
+			{
+			}
+			
+			try
+			{
+				base.match(s);
+				eventSupport.fireMatch(s, inputState.guessing);
+			}
+			catch (MismatchedCharException e)
+			{
+				if (inputState.guessing == 0)
+					eventSupport.fireMismatch(la_s.ToString(), s, inputState.guessing);
+				throw e;
+			}
+			
+		}
+		public override void  matchNot(int c)
+		{
+			char la_1 = LA(1);
+			try
+			{
+				base.matchNot(c);
+				eventSupport.fireMatchNot(la_1, Convert.ToChar(c), inputState.guessing);
+			}
+			catch (MismatchedCharException e)
+			{
+				if (inputState.guessing == 0)
+					eventSupport.fireMismatchNot(la_1, Convert.ToChar(c), inputState.guessing);
+				throw e;
+			}
+			
+		}
+		public override void  matchRange(int c1, int c2)
+		{
+			char la_1 = LA(1);
+			try
+			{
+				base.matchRange(c1, c2);
+				eventSupport.fireMatch(la_1, "" + c1 + c2, inputState.guessing);
+			}
+			catch (MismatchedCharException e)
+			{
+				if (inputState.guessing == 0)
+					eventSupport.fireMismatch(la_1, "" + c1 + c2, inputState.guessing);
+				throw e;
+			}
+			
+		}
+		public override void  newline()
+		{
+			base.newline();
+			eventSupport.fireNewLine(getLine());
+		}
+		public virtual void  removeMessageListener(MessageListener l)
+		{
+			eventSupport.removeMessageListener(l);
+		}
+		public virtual void  removeNewLineListener(NewLineListener l)
+		{
+			eventSupport.removeNewLineListener(l);
+		}
+		public virtual void  removeParserListener(ParserListener l)
+		{
+			eventSupport.removeParserListener(l);
+		}
+		public virtual void  removeParserMatchListener(ParserMatchListener l)
+		{
+			eventSupport.removeParserMatchListener(l);
+		}
+		public virtual void  removeParserTokenListener(ParserTokenListener l)
+		{
+			eventSupport.removeParserTokenListener(l);
+		}
+		public virtual void  removeSemanticPredicateListener(SemanticPredicateListener l)
+		{
+			eventSupport.removeSemanticPredicateListener(l);
+		}
+		public virtual void  removeSyntacticPredicateListener(SyntacticPredicateListener l)
+		{
+			eventSupport.removeSyntacticPredicateListener(l);
+		}
+		public virtual void  removeTraceListener(TraceListener l)
+		{
+			eventSupport.removeTraceListener(l);
+		}
+		/// <summary>Report exception errors caught in nextToken() 
+		/// </summary>
+		public virtual void  reportError(MismatchedCharException e)
+		{
+			eventSupport.fireReportError(e);
+			base.reportError(e);
+		}
+		/// <summary>Parser error-reporting function can be overridden in subclass 
+		/// </summary>
+		public override void  reportError(string s)
+		{
+			eventSupport.fireReportError(s);
+			base.reportError(s);
+		}
+		/// <summary>Parser warning-reporting function can be overridden in subclass 
+		/// </summary>
+		public override void  reportWarning(string s)
+		{
+			eventSupport.fireReportWarning(s);
+			base.reportWarning(s);
+		}
+		public virtual void  setupDebugging()
+		{
+		}
+
+		public virtual void  wakeUp()
+		{
+			lock(this)
+			{
+				Monitor.Pulse(this);
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/DebuggingCharScanner.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/DebuggingInputBuffer.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/DebuggingInputBuffer.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/DebuggingInputBuffer.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,82 @@
+namespace antlr.debug
+{
+	using System;
+	using ArrayList	= System.Collections.ArrayList;
+	
+	public class DebuggingInputBuffer : InputBuffer
+	{
+		public virtual ArrayList InputBufferListeners
+		{
+			get { return inputBufferEventSupport.InputBufferListeners; }
+		}
+		public virtual bool DebugMode
+		{
+			set	{ debugMode = value;	}
+		}
+
+		private InputBuffer buffer;
+		private InputBufferEventSupport inputBufferEventSupport;
+		private bool debugMode = true;
+		
+		
+		public DebuggingInputBuffer(InputBuffer buffer)
+		{
+			this.buffer = buffer;
+			inputBufferEventSupport = new InputBufferEventSupport(this);
+		}
+		public virtual void  addInputBufferListener(InputBufferListener l)
+		{
+			inputBufferEventSupport.addInputBufferListener(l);
+		}
+		public override char  consume()
+		{
+			char la = ' ';
+			try
+			{
+				la = buffer.LA(1);
+			}
+			catch (CharStreamException)
+			{
+			} // vaporize it...
+			buffer.consume();
+			if (debugMode)
+				inputBufferEventSupport.fireConsume(la);
+			return la;
+		}
+		public override void  fill(int a)
+		{
+			buffer.fill(a);
+		}
+		public virtual bool isDebugMode()
+		{
+			return debugMode;
+		}
+		public override bool isMarked()
+		{
+			return buffer.isMarked();
+		}
+		public override char LA(int i)
+		{
+			char la = buffer.LA(i);
+			if (debugMode)
+				inputBufferEventSupport.fireLA(la, i);
+			return la;
+		}
+		public override int mark()
+		{
+			int m = buffer.mark();
+			inputBufferEventSupport.fireMark(m);
+			return m;
+		}
+		public virtual void  removeInputBufferListener(InputBufferListener l)
+		{
+			if (inputBufferEventSupport != null)
+				inputBufferEventSupport.removeInputBufferListener(l);
+		}
+		public override void  rewind(int mark)
+		{
+			buffer.rewind(mark);
+			inputBufferEventSupport.fireRewind(mark);
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/DebuggingInputBuffer.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/DebuggingParser.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/DebuggingParser.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/DebuggingParser.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,12 @@
+namespace antlr.debug
+{
+	using System;
+	
+	/// <summary> This type was created in VisualAge.
+	/// </summary>
+	public interface DebuggingParser
+	{
+		string getRuleName(int n);
+		string getSemPredName(int n);
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/DebuggingParser.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/GuessingEventArgs.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/GuessingEventArgs.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/GuessingEventArgs.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,31 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public abstract class GuessingEventArgs : ANTLREventArgs
+	{
+		public GuessingEventArgs()
+		{
+		}
+		public GuessingEventArgs(int type) : base(type)
+		{
+		}
+
+		public virtual int Guessing
+		{
+			get	{ return guessing_;			}
+			set	{ this.guessing_ = value;	}
+		}
+
+		private int guessing_;
+		
+		
+		/// <summary>This should NOT be called from anyone other than ParserEventSupport! 
+		/// </summary>
+		public virtual void  setValues(int type, int guessing)
+		{
+			setValues(type);
+			this.Guessing = guessing;
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/GuessingEventArgs.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ICharScannerDebugSubject.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ICharScannerDebugSubject.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ICharScannerDebugSubject.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,15 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public interface ICharScannerDebugSubject : IDebugSubject
+	{
+		event NewLineEventHandler				HitNewLine;
+		event MatchEventHandler					MatchedChar;
+		event MatchEventHandler					MatchedNotChar;
+		event MatchEventHandler					MisMatchedChar;
+		event MatchEventHandler					MisMatchedNotChar;
+		event TokenEventHandler					ConsumedChar;
+		event TokenEventHandler					CharLA;
+	}
+}


Property changes on: trunk/src/antlr-runtime/antlr.debug/ICharScannerDebugSubject.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/IDebugSubject.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/IDebugSubject.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/IDebugSubject.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,23 @@
+namespace antlr.debug
+{
+	using System;
+	//using EventHandlerList	= System.ComponentModel.EventHandlerList;
+	
+	public interface IDebugSubject
+	{
+	/*	EventHandlerList Events 
+		{
+			get;
+		}
+*/
+		event TraceEventHandler					EnterRule;
+		event TraceEventHandler					ExitRule;
+		event TraceEventHandler					Done;
+		event MessageEventHandler				ErrorReported;
+		event MessageEventHandler				WarningReported;
+		event SemanticPredicateEventHandler		SemPredEvaluated;
+		event SyntacticPredicateEventHandler	SynPredStarted;
+		event SyntacticPredicateEventHandler	SynPredFailed;
+		event SyntacticPredicateEventHandler	SynPredSucceeded;
+	}
+}


Property changes on: trunk/src/antlr-runtime/antlr.debug/IDebugSubject.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/IParserDebugSubject.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/IParserDebugSubject.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/IParserDebugSubject.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,14 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public interface IParserDebugSubject : IDebugSubject
+	{
+		event MatchEventHandler					MatchedToken;
+		event MatchEventHandler					MatchedNotToken;
+		event MatchEventHandler					MisMatchedToken;
+		event MatchEventHandler					MisMatchedNotToken;
+		event TokenEventHandler					ConsumedToken;
+		event TokenEventHandler					TokenLA;
+	}
+}


Property changes on: trunk/src/antlr-runtime/antlr.debug/IParserDebugSubject.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/InputBufferEventArgs.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/InputBufferEventArgs.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/InputBufferEventArgs.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,50 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public class InputBufferEventArgs : ANTLREventArgs
+	{
+		public InputBufferEventArgs()
+		{
+		}
+
+		public InputBufferEventArgs(int type, char c, int lookaheadAmount)
+		{
+			setValues(type, c, lookaheadAmount);
+		}
+	
+		public virtual char Char
+		{
+			get	{ return this.c_;	}
+			set	{ this.c_ = value;	}
+		}
+		public virtual int LookaheadAmount
+		{
+			get	{ return this.lookaheadAmount_;		}
+			set	{ this.lookaheadAmount_ = value;	}
+		}
+
+		internal char c_;
+		internal int lookaheadAmount_; // amount of lookahead
+
+		public const int CONSUME = 0;
+		public const int LA = 1;
+		public const int MARK = 2;
+		public const int REWIND = 3;
+		
+		
+		/// <summary>This should NOT be called from anyone other than ParserEventSupport! 
+		/// </summary>
+		internal void  setValues(int type, char c, int la)
+		{
+			setValues(type);
+			this.Char	= c;
+			this.LookaheadAmount = la;
+		}
+
+		public override string ToString()
+		{
+			return "CharBufferEvent [" + (Type == CONSUME?"CONSUME, ":"LA, ") + Char + "," + LookaheadAmount + "]";
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/InputBufferEventArgs.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/InputBufferEventSupport.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/InputBufferEventSupport.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/InputBufferEventSupport.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,124 @@
+namespace antlr.debug
+{
+	using System;
+	using ArrayList	= System.Collections.ArrayList;
+
+	public class InputBufferEventSupport
+	{
+		public virtual ArrayList InputBufferListeners
+		{
+			get
+			{
+				return inputBufferListeners;
+			}
+			
+		}
+		private object source;
+		private ArrayList inputBufferListeners;
+		private InputBufferEventArgs inputBufferEvent;
+		protected internal const int CONSUME = 0;
+		protected internal const int LA = 1;
+		protected internal const int MARK = 2;
+		protected internal const int REWIND = 3;
+		
+		
+		public InputBufferEventSupport(object source)
+		{
+			inputBufferEvent = new InputBufferEventArgs();
+			this.source = source;
+		}
+		public virtual void  addInputBufferListener(InputBufferListener l)
+		{
+			if (inputBufferListeners == null)
+				inputBufferListeners = new ArrayList();
+			inputBufferListeners.Add(l);
+		}
+		public virtual void  fireConsume(char c)
+		{
+			inputBufferEvent.setValues(InputBufferEventArgs.CONSUME, c, 0);
+			fireEvents(CONSUME, inputBufferListeners);
+		}
+		public virtual void  fireEvent(int type, Listener l)
+		{
+			switch (type)
+			{
+				case CONSUME: 
+					((InputBufferListener) l).inputBufferConsume(source, inputBufferEvent); break;
+				
+				case LA: 
+					((InputBufferListener) l).inputBufferLA(source, inputBufferEvent); break;
+				
+				case MARK: 
+					((InputBufferListener) l).inputBufferMark(source, inputBufferEvent); break;
+				
+				case REWIND: 
+					((InputBufferListener) l).inputBufferRewind(source, inputBufferEvent); break;
+				
+				default: 
+					throw new System.ArgumentException("bad type " + type + " for fireEvent()");
+				
+			}
+		}
+		public virtual void  fireEvents(int type, ArrayList listeners)
+		{
+			ArrayList targets = null;
+			Listener l = null;
+			
+			lock(this)
+			{
+				if (listeners == null)
+					return ;
+				targets = (ArrayList) listeners.Clone();
+			}
+			
+			if (targets != null)
+				 for (int i = 0; i < targets.Count; i++)
+				{
+					l = (Listener) targets[i];
+					fireEvent(type, l);
+				}
+		}
+		public virtual void  fireLA(char c, int la)
+		{
+			inputBufferEvent.setValues(InputBufferEventArgs.LA, c, la);
+			fireEvents(LA, inputBufferListeners);
+		}
+		public virtual void  fireMark(int pos)
+		{
+			inputBufferEvent.setValues(InputBufferEventArgs.MARK, ' ', pos);
+			fireEvents(MARK, inputBufferListeners);
+		}
+		public virtual void  fireRewind(int pos)
+		{
+			inputBufferEvent.setValues(InputBufferEventArgs.REWIND, ' ', pos);
+			fireEvents(REWIND, inputBufferListeners);
+		}
+		protected internal virtual void  refresh(ArrayList listeners)
+		{
+			ArrayList v;
+			lock(listeners)
+			{
+				v = (ArrayList) listeners.Clone();
+			}
+			if (v != null)
+				 for (int i = 0; i < v.Count; i++)
+					((Listener) v[i]).refresh();
+		}
+		public virtual void  refreshListeners()
+		{
+			refresh(inputBufferListeners);
+		}
+		public virtual void  removeInputBufferListener(InputBufferListener l)
+		{
+			if (inputBufferListeners != null)
+			{
+				ArrayList temp_arraylist;
+				object temp_object;
+				temp_arraylist = inputBufferListeners;
+				temp_object = l;
+				temp_arraylist.Contains(temp_object);
+				temp_arraylist.Remove(temp_object);
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/InputBufferEventSupport.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/InputBufferListener.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/InputBufferListener.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/InputBufferListener.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,12 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public interface InputBufferListener : Listener
+	{
+		void  inputBufferConsume	(object source, InputBufferEventArgs e);
+		void  inputBufferLA			(object source, InputBufferEventArgs e);
+		void  inputBufferMark		(object source, InputBufferEventArgs e);
+		void  inputBufferRewind		(object source, InputBufferEventArgs e);
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/InputBufferListener.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/InputBufferListenerBase.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/InputBufferListenerBase.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/InputBufferListenerBase.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,65 @@
+namespace antlr.debug
+{
+	using System;
+	
+	/// <summary>
+	/// Provides an abstract base for implementing <see cref="InputBufferListener"/> subclasses.
+	/// </summary>
+	/// <remarks>
+	///		<param>
+	///		This abstract class is provided to make it easier to create <see cref="InputBufferListener"/>s. 
+	///		You should extend this base class rather than creating your own.
+	///		</param>
+	/// </remarks>
+	public abstract class InputBufferListenerBase : InputBufferListener
+	{
+		/// <summary>
+		/// Handle the "Done" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  doneParsing(object source, TraceEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "CharConsumed" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  inputBufferConsume(object source, InputBufferEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "CharLA" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  inputBufferLA(object source, InputBufferEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "Mark" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  inputBufferMark(object source, InputBufferEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "Rewind" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  inputBufferRewind(object source, InputBufferEventArgs e)
+		{
+		}
+
+		public virtual void  refresh()
+		{
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/InputBufferListenerBase.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/InputBufferReporter.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/InputBufferReporter.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/InputBufferReporter.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,36 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public class InputBufferReporter : InputBufferListenerBase, InputBufferListener
+	{
+		public virtual void inputBufferChanged(object source, InputBufferEventArgs e)
+		{
+			System.Console.Out.WriteLine(e);
+		}
+
+		/// <summary> charBufferConsume method comment.
+		/// </summary>
+		public override void  inputBufferConsume(object source, InputBufferEventArgs e)
+		{
+			System.Console.Out.WriteLine(e);
+		}
+
+		/// <summary> charBufferLA method comment.
+		/// </summary>
+		public override void  inputBufferLA(object source, InputBufferEventArgs e)
+		{
+			System.Console.Out.WriteLine(e);
+		}
+
+		public override void  inputBufferMark(object source, InputBufferEventArgs e)
+		{
+			System.Console.Out.WriteLine(e);
+		}
+
+		public override void  inputBufferRewind(object source, InputBufferEventArgs e)
+		{
+			System.Console.Out.WriteLine(e);
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/InputBufferReporter.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/LLkDebuggingParser.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/LLkDebuggingParser.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/LLkDebuggingParser.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,299 @@
+namespace antlr.debug
+{
+	using System;
+	using System.Threading;
+	using antlr.collections.impl;
+	
+	public class LLkDebuggingParser : LLkParser, DebuggingParser
+	{
+		private void  InitBlock()
+		{
+			parserEventSupport = new ParserEventSupport(this);
+		}
+		public override void setDebugMode(bool mode)
+		{
+			_notDebugMode = !mode;
+		}
+		protected internal ParserEventSupport parserEventSupport;
+		
+		private bool _notDebugMode = false;
+		protected internal string[] ruleNames;
+		protected internal string[] semPredNames;
+		
+		
+		public LLkDebuggingParser(int k_):base(k_)
+		{
+			InitBlock();
+		}
+		public LLkDebuggingParser(ParserSharedInputState state, int k_):base(state, k_)
+		{
+			InitBlock();
+		}
+		public LLkDebuggingParser(TokenBuffer tokenBuf, int k_):base(tokenBuf, k_)
+		{
+			InitBlock();
+		}
+		public LLkDebuggingParser(TokenStream lexer, int k_):base(lexer, k_)
+		{
+			InitBlock();
+		}
+		public override void  addMessageListener(MessageListener l)
+		{
+			parserEventSupport.addMessageListener(l);
+		}
+		public override void  addParserListener(ParserListener l)
+		{
+			parserEventSupport.addParserListener(l);
+		}
+		public override void  addParserMatchListener(ParserMatchListener l)
+		{
+			parserEventSupport.addParserMatchListener(l);
+		}
+		public override void  addParserTokenListener(ParserTokenListener l)
+		{
+			parserEventSupport.addParserTokenListener(l);
+		}
+		public override void  addSemanticPredicateListener(SemanticPredicateListener l)
+		{
+			parserEventSupport.addSemanticPredicateListener(l);
+		}
+		public override void  addSyntacticPredicateListener(SyntacticPredicateListener l)
+		{
+			parserEventSupport.addSyntacticPredicateListener(l);
+		}
+		public override void  addTraceListener(TraceListener l)
+		{
+			parserEventSupport.addTraceListener(l);
+		}
+		/// <summary>Get another token object from the token stream 
+		/// </summary>
+		public override void  consume()
+		{
+			int la_1 = - 99;
+			la_1 = LA(1);
+			base.consume();
+			parserEventSupport.fireConsume(la_1);
+		}
+		protected internal virtual void  fireEnterRule(int num, int data)
+		{
+			if (isDebugMode())
+				parserEventSupport.fireEnterRule(num, inputState.guessing, data);
+		}
+		protected internal virtual void  fireExitRule(int num, int data)
+		{
+			if (isDebugMode())
+				parserEventSupport.fireExitRule(num, inputState.guessing, data);
+		}
+		protected internal virtual bool fireSemanticPredicateEvaluated(int type, int num, bool condition)
+		{
+			if (isDebugMode())
+				return parserEventSupport.fireSemanticPredicateEvaluated(type, num, condition, inputState.guessing);
+			else
+				return condition;
+		}
+		protected internal virtual void  fireSyntacticPredicateFailed()
+		{
+			if (isDebugMode())
+				parserEventSupport.fireSyntacticPredicateFailed(inputState.guessing);
+		}
+		protected internal virtual void  fireSyntacticPredicateStarted()
+		{
+			if (isDebugMode())
+				parserEventSupport.fireSyntacticPredicateStarted(inputState.guessing);
+		}
+		protected internal virtual void  fireSyntacticPredicateSucceeded()
+		{
+			if (isDebugMode())
+				parserEventSupport.fireSyntacticPredicateSucceeded(inputState.guessing);
+		}
+		public virtual string getRuleName(int num)
+		{
+			return ruleNames[num];
+		}
+		public virtual string getSemPredName(int num)
+		{
+			return semPredNames[num];
+		}
+
+		public virtual void  goToSleep()
+		{
+			lock(this)
+			{
+				try
+				{
+					Monitor.Wait(this);
+				}
+				catch (System.Threading.ThreadInterruptedException)
+				{
+				}
+			}
+		}
+		public override bool isDebugMode()
+		{
+			return !_notDebugMode;
+		}
+		public virtual bool isGuessing()
+		{
+			return inputState.guessing > 0;
+		}
+		/// <summary>Return the token type of the ith token of lookahead where i=1
+		/// is the current token being examined by the parser (i.e., it
+		/// has not been matched yet).
+		/// </summary>
+		public override int LA(int i)
+		{
+			int la = base.LA(i);
+			parserEventSupport.fireLA(i, la);
+			return la;
+		}
+		/// <summary>Make sure current lookahead symbol matches token type <tt>t</tt>.
+		/// Throw an exception upon mismatch, which is catch by either the
+		/// error handler or by the syntactic predicate.
+		/// </summary>
+		public override void  match(int t)
+		{
+			string text = LT(1).getText();
+			int la_1 = LA(1);
+			try
+			{
+				base.match(t);
+				parserEventSupport.fireMatch(t, text, inputState.guessing);
+			}
+			catch (MismatchedTokenException e)
+			{
+				if (inputState.guessing == 0)
+					parserEventSupport.fireMismatch(la_1, t, text, inputState.guessing);
+				throw e;
+			}
+		}
+		/// <summary>Make sure current lookahead symbol matches the given set
+		/// Throw an exception upon mismatch, which is catch by either the
+		/// error handler or by the syntactic predicate.
+		/// </summary>
+		public override void  match(BitSet b)
+		{
+			string text = LT(1).getText();
+			int la_1 = LA(1);
+			try
+			{
+				base.match(b);
+				parserEventSupport.fireMatch(la_1, b, text, inputState.guessing);
+			}
+			catch (MismatchedTokenException e)
+			{
+				if (inputState.guessing == 0)
+					parserEventSupport.fireMismatch(la_1, b, text, inputState.guessing);
+				throw e;
+			}
+		}
+		public override void  matchNot(int t)
+		{
+			string text = LT(1).getText();
+			int la_1 = LA(1);
+			try
+			{
+				base.matchNot(t);
+				parserEventSupport.fireMatchNot(la_1, t, text, inputState.guessing);
+			}
+			catch (MismatchedTokenException e)
+			{
+				if (inputState.guessing == 0)
+					parserEventSupport.fireMismatchNot(la_1, t, text, inputState.guessing);
+				throw e;
+			}
+		}
+		public override void  removeMessageListener(MessageListener l)
+		{
+			parserEventSupport.removeMessageListener(l);
+		}
+		public override void  removeParserListener(ParserListener l)
+		{
+			parserEventSupport.removeParserListener(l);
+		}
+		public override void  removeParserMatchListener(ParserMatchListener l)
+		{
+			parserEventSupport.removeParserMatchListener(l);
+		}
+		public override void  removeParserTokenListener(ParserTokenListener l)
+		{
+			parserEventSupport.removeParserTokenListener(l);
+		}
+		public override void  removeSemanticPredicateListener(SemanticPredicateListener l)
+		{
+			parserEventSupport.removeSemanticPredicateListener(l);
+		}
+		public override void  removeSyntacticPredicateListener(SyntacticPredicateListener l)
+		{
+			parserEventSupport.removeSyntacticPredicateListener(l);
+		}
+		public override void  removeTraceListener(TraceListener l)
+		{
+			parserEventSupport.removeTraceListener(l);
+		}
+		/// <summary>Parser error-reporting function can be overridden in subclass 
+		/// </summary>
+		public override void  reportError(RecognitionException ex)
+		{
+			parserEventSupport.fireReportError(ex);
+			base.reportError(ex);
+		}
+		/// <summary>Parser error-reporting function can be overridden in subclass 
+		/// </summary>
+		public override void  reportError(string s)
+		{
+			parserEventSupport.fireReportError(s);
+			base.reportError(s);
+		}
+		/// <summary>Parser warning-reporting function can be overridden in subclass 
+		/// </summary>
+		public override void  reportWarning(string s)
+		{
+			parserEventSupport.fireReportWarning(s);
+			base.reportWarning(s);
+		}
+		public virtual void  setupDebugging(TokenBuffer tokenBuf)
+		{
+			setupDebugging(null, tokenBuf);
+		}
+		public virtual void  setupDebugging(TokenStream lexer)
+		{
+			setupDebugging(lexer, null);
+		}
+		/// <summary>User can override to do their own debugging 
+		/// </summary>
+		protected internal virtual void  setupDebugging(TokenStream lexer, TokenBuffer tokenBuf)
+		{
+			setDebugMode(true);
+			// default parser debug setup is ParseView
+			try
+			{
+//				try
+//				{
+//					System.Type.GetType("javax.swing.JButton");
+//				}
+//				catch (System.Exception)
+//				{
+//					System.Console.Error.WriteLine("Swing is required to use ParseView, but is not present in your CLASSPATH");
+//					System.Environment.Exit(1);
+//				}
+				System.Type c = System.Type.GetType("antlr.parseview.ParseView");
+				System.Reflection.ConstructorInfo constructor = c.GetConstructor(new System.Type[]{typeof(LLkDebuggingParser), typeof(TokenStream), typeof(TokenBuffer)});
+				constructor.Invoke(new object[]{this, lexer, tokenBuf});
+			}
+			catch (System.Exception e)
+			{
+				System.Console.Error.WriteLine("Error initializing ParseView: " + e);
+				System.Console.Error.WriteLine("Please report this to Scott Stanchfield, thetick at magelang.com");
+				System.Environment.Exit(1);
+			}
+		}
+
+		public virtual void  wakeUp()
+		{
+			lock(this)
+			{
+				Monitor.Pulse(this);
+			}
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/LLkDebuggingParser.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/Listener.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/Listener.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/Listener.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,11 @@
+namespace antlr.debug
+{
+	using System;
+	
+
+	public interface Listener
+	{
+		void  doneParsing	(object source, TraceEventArgs e);
+		void  refresh		();
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/Listener.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/MessageEventArgs.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/MessageEventArgs.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/MessageEventArgs.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,41 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public class MessageEventArgs : ANTLREventArgs
+	{
+		public MessageEventArgs()
+		{
+		}
+		public MessageEventArgs(int type, string text)
+		{
+			setValues(type, text);
+		}
+
+		public virtual string Text
+		{
+			get	{ return text_;			}
+			set	{ this.text_ = value;	}
+			
+		}
+
+		private string text_;
+
+		public static int WARNING = 0;
+		public static int ERROR = 1;
+		
+		
+		/// <summary>This should NOT be called from anyone other than ParserEventSupport! 
+		/// </summary>
+		internal void  setValues(int type, string text)
+		{
+			setValues(type);
+			this.Text   = text;
+		}
+
+		public override string ToString()
+		{
+			return "ParserMessageEvent [" + (Type == WARNING?"warning,":"error,") + Text + "]";
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/MessageEventArgs.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/MessageListener.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/MessageListener.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/MessageListener.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,10 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public interface MessageListener : Listener
+	{
+		void  reportError	(object source, MessageEventArgs e);
+		void  reportWarning	(object source, MessageEventArgs e);
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/MessageListener.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/MessageListenerBase.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/MessageListenerBase.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/MessageListenerBase.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,47 @@
+namespace antlr.debug
+{
+	using System;
+	
+	/// <summary>
+	/// Provides an abstract base for implementing <see cref="MessageListener"/> subclasses.
+	/// </summary>
+	/// <remarks>
+	///		<param>
+	///		This abstract class is provided to make it easier to create <see cref="MessageListener"/>s. 
+	///		You should extend this base class rather than creating your own.
+	///		</param>
+	/// </remarks>
+	public class MessageListenerBase : MessageListener
+	{
+		/// <summary>
+		/// Handle the "Done" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  doneParsing(object source, TraceEventArgs e)
+		{
+		}
+
+		public virtual void  refresh()
+		{
+		}
+		
+		/// <summary>
+		/// Handle the "ReportError" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  reportError(object source, MessageEventArgs e)
+		{
+		}
+		
+		/// <summary>
+		/// Handle the "ReportWarning" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  reportWarning(object source, MessageEventArgs e)
+		{
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/MessageListenerBase.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/NewLineEventArgs.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/NewLineEventArgs.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/NewLineEventArgs.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,31 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public class NewLineEventArgs : ANTLREventArgs
+	{
+		public NewLineEventArgs()
+		{
+		}
+		public NewLineEventArgs(int line)
+		{
+			Line = line;
+		}
+
+		public virtual int Line
+		{
+			get	{ return this.line_; }
+			set	{ this.line_ = value; }
+		}
+
+		private int line_;
+		
+		
+		/// <summary>This should NOT be called from anyone other than ParserEventSupport! 
+		/// </summary>
+		public override string ToString()
+		{
+			return "NewLineEvent [" + line_ + "]";
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/NewLineEventArgs.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/NewLineListener.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/NewLineListener.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/NewLineListener.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,9 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public interface NewLineListener : Listener
+	{
+		void hitNewLine(object source, NewLineEventArgs e);
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/NewLineListener.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ParseTreeDebugParser.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ParseTreeDebugParser.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ParseTreeDebugParser.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,162 @@
+namespace antlr.debug
+{
+
+	/* ANTLR Translator Generator
+	 * Project led by Terence Parr at http://www.jGuru.com
+	 * Software rights: http://www.antlr.org/license.html
+	 */
+
+	//
+	// ANTLR C# Code Generator by Micheal Jordan
+	//                            Kunle Odutola       : kunle UNDERSCORE odutola AT hotmail DOT com
+	//                            Anthony Oguntimehin
+	//
+
+	using System;
+	using Stack = System.Collections.Stack;
+	using antlr;
+	using BitSet = antlr.collections.impl.BitSet;
+
+	/// <summary>
+	/// Specifies the behaviour required (i.e. parser modifications) 
+	/// specifically to support parse tree debugging and derivation.
+	/// </summary>
+	/// <remarks>
+	/// <para>
+	/// Override the standard matching and rule entry/exit routines
+	/// to build parse trees.  This class is useful for 2.7.3 where
+	/// you can specify a superclass like
+	/// </para>
+	/// <para>
+	/// class TinyCParser extends Parser(ParseTreeDebugParser);
+	/// </para>
+	/// </remarks>
+	public class ParseTreeDebugParser : LLkParser 
+	{
+		/// <summary>
+		/// Each new rule invocation must have it's own subtree. Tokens are
+		/// added to the current root so we must have a stack of subtree roots.
+		/// </summary>
+		protected Stack currentParseTreeRoot = new Stack();
+
+		/// <summary>
+		/// Track most recently created parse subtree so that when parsing
+		/// is finished, we can get to the root.
+		/// </summary>
+		protected ParseTreeRule mostRecentParseTreeRoot = null;
+
+		/// <summary>
+		/// For every rule replacement with a production, we bump up count.
+		/// </summary>
+		protected int numberOfDerivationSteps = 1; // n replacements plus step 0
+
+		public ParseTreeDebugParser(int k_) : base(k_)
+		{
+		}
+
+		public ParseTreeDebugParser(ParserSharedInputState state, int k_) : base(state, k_)
+		{
+		}
+
+		public ParseTreeDebugParser(TokenBuffer tokenBuf, int k_) : base(tokenBuf, k_)
+		{
+		}
+
+		public ParseTreeDebugParser(TokenStream lexer, int k_) : base(lexer,k_)
+		{
+		}
+
+		public ParseTree getParseTree() 
+		{
+			return mostRecentParseTreeRoot;
+		}
+
+		public int getNumberOfDerivationSteps() 
+		{
+			return numberOfDerivationSteps;
+		}
+
+		public override void match(int i) 			// throws MismatchedTokenException, TokenStreamException 
+		{
+			addCurrentTokenToParseTree();
+			base.match(i);
+		}
+
+		public override void match(BitSet bitSet) 	// throws MismatchedTokenException, TokenStreamException 
+		{
+			addCurrentTokenToParseTree();
+			base.match(bitSet);
+		}
+
+		public override void matchNot(int i) 		// throws MismatchedTokenException, TokenStreamException
+		{
+			addCurrentTokenToParseTree();
+			base.matchNot(i);
+		}
+
+		/// <summary>
+		/// Adds LT(1) to the current parse subtree.
+		/// </summary>
+		/// <remarks>
+		/// <para>
+		/// Note that the match() routines add the node before checking for 
+		/// correct match.  This means that, upon mismatched token, there 
+		/// will a token node in the tree corresponding to where that token 
+		/// was expected.  For no viable alternative errors, no node will 
+		/// be in the tree as nothing was matched() (the lookahead failed 
+		/// to predict an alternative).
+		/// </para>
+		/// </remarks>
+		protected void addCurrentTokenToParseTree() 		// throws TokenStreamException 
+		{
+			if (inputState.guessing > 0) 
+			{
+				return;
+			}
+			ParseTreeRule root = (ParseTreeRule) currentParseTreeRoot.Peek();
+			ParseTreeToken tokenNode = null;
+			if ( LA(1) == Token.EOF_TYPE ) 
+			{
+				tokenNode = new ParseTreeToken(new antlr.CommonToken("EOF"));
+			}
+			else 
+			{
+				tokenNode = new ParseTreeToken(LT(1));
+			}
+			root.addChild(tokenNode);
+		}
+
+		/// <summary>
+		/// Create a rule node, add to current tree, and make it current root
+		/// </summary>
+		/// <param name="s"></param>
+		public override void traceIn(string s) 				// throws TokenStreamException 
+		{
+			if (inputState.guessing > 0) 
+			{
+				return;
+			}
+			ParseTreeRule subRoot = new ParseTreeRule(s);
+			if ( currentParseTreeRoot.Count > 0 ) 
+			{
+				ParseTreeRule oldRoot = (ParseTreeRule) currentParseTreeRoot.Peek();
+				oldRoot.addChild(subRoot);
+			}
+			currentParseTreeRoot.Push(subRoot);
+			numberOfDerivationSteps++;
+		}
+
+		/// <summary>
+		/// Pop current root; back to adding to old root
+		/// </summary>
+		/// <param name="s"></param>
+		public override void traceOut(string s) 				// throws TokenStreamException
+		{
+			if (inputState.guessing > 0) 
+			{
+				return;
+			}
+			mostRecentParseTreeRoot = (ParseTreeRule) currentParseTreeRoot.Pop();
+		}
+	}
+}

Added: trunk/src/antlr-runtime/antlr.debug/ParserController.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ParserController.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ParserController.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,14 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public interface ParserController : ParserListener
+		{
+			ParserEventSupport ParserEventSupport
+			{
+				set;
+			}
+
+			void  checkBreak();
+		}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ParserController.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ParserEventSupport.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ParserEventSupport.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ParserEventSupport.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,490 @@
+namespace antlr.debug
+{
+	using System;
+	using System.Reflection;
+	using Hashtable			= System.Collections.Hashtable;
+	using DictionaryEntry	= System.Collections.DictionaryEntry;
+	using ArrayList			= System.Collections.ArrayList;
+
+	using antlr.collections.impl;
+	
+	
+	public delegate void MessageEventHandler(object sender, MessageEventArgs e); 
+	public delegate void NewLineEventHandler(object sender, NewLineEventArgs e); 
+	public delegate void MatchEventHandler(object sender, MatchEventArgs e); 
+	public delegate void TokenEventHandler(object sender, TokenEventArgs e); 
+	public delegate void SemanticPredicateEventHandler(object sender, SemanticPredicateEventArgs e); 
+	public delegate void SyntacticPredicateEventHandler(object sender, SyntacticPredicateEventArgs e); 
+	public delegate void TraceEventHandler(object sender, TraceEventArgs e); 
+
+	/// <summary>A class to assist in firing parser events
+	/// NOTE: I intentionally _did_not_ synchronize the event firing and
+	/// add/remove listener methods.  This is because the add/remove should
+	/// _only_ be called by the parser at its start/end, and the _same_thread_
+	/// should be performing the parsing.  This should help performance a tad...
+	/// </summary>
+	public class ParserEventSupport
+	{
+		private object source;
+		private Hashtable listeners;
+
+		private MatchEventArgs matchEvent;
+		private MessageEventArgs messageEvent;
+		private TokenEventArgs tokenEvent;
+		private SemanticPredicateEventArgs semPredEvent;
+		private SyntacticPredicateEventArgs synPredEvent;
+		private TraceEventArgs traceEvent;
+		private NewLineEventArgs newLineEvent;
+
+		private ParserController controller;
+
+		private int ruleDepth = 0;
+		
+		
+		public ParserEventSupport(object source)
+		{
+			matchEvent		= new MatchEventArgs();
+			messageEvent	= new MessageEventArgs();
+			tokenEvent		= new TokenEventArgs();
+			traceEvent		= new TraceEventArgs();
+			semPredEvent	= new SemanticPredicateEventArgs();
+			synPredEvent	= new SyntacticPredicateEventArgs();
+			newLineEvent	= new NewLineEventArgs();
+			listeners		= new Hashtable();
+			this.source		= source;
+		}
+
+		public virtual void checkController()
+		{
+			if (controller != null)
+				controller.checkBreak();
+		}
+
+		public virtual void  addDoneListener(Listener l)
+		{
+			((Parser)source).Done += new TraceEventHandler(l.doneParsing);
+			listeners[l] = l;
+		}
+		public virtual void  addMessageListener(MessageListener l)
+		{
+			((Parser)source).ErrorReported   += new MessageEventHandler(l.reportError);
+			((Parser)source).WarningReported += new MessageEventHandler(l.reportWarning);
+			//messageListeners.Add(l);
+			addDoneListener(l);
+		}
+		public virtual void  addParserListener(ParserListener l)
+		{
+			if (l is ParserController)
+			{
+				((ParserController) l).ParserEventSupport = this;
+				controller = (ParserController) l;
+			}
+			addParserMatchListener(l);
+			addParserTokenListener(l);
+			
+			addMessageListener(l);
+			addTraceListener(l);
+			addSemanticPredicateListener(l);
+			addSyntacticPredicateListener(l);
+		}
+		public virtual void  addParserMatchListener(ParserMatchListener l)
+		{
+			((Parser)source).MatchedToken		+= new MatchEventHandler(l.parserMatch);
+			((Parser)source).MatchedNotToken	+= new MatchEventHandler(l.parserMatchNot);
+			((Parser)source).MisMatchedToken	+= new MatchEventHandler(l.parserMismatch);
+			((Parser)source).MisMatchedNotToken	+= new MatchEventHandler(l.parserMismatchNot);
+			//matchListeners.Add(l);
+			addDoneListener(l);
+		}
+		public virtual void  addParserTokenListener(ParserTokenListener l)
+		{
+			((Parser)source).ConsumedToken	+= new TokenEventHandler(l.parserConsume);
+			((Parser)source).TokenLA		+= new TokenEventHandler(l.parserLA);
+			//tokenListeners.Add(l);
+			addDoneListener(l);
+		}
+		public virtual void  addSemanticPredicateListener(SemanticPredicateListener l)
+		{
+			((Parser)source).SemPredEvaluated	+= new SemanticPredicateEventHandler(l.semanticPredicateEvaluated);
+			//semPredListeners.Add(l);
+			addDoneListener(l);
+		}
+		public virtual void  addSyntacticPredicateListener(SyntacticPredicateListener l)
+		{
+			((Parser)source).SynPredStarted		+= new SyntacticPredicateEventHandler(l.syntacticPredicateStarted);
+			((Parser)source).SynPredFailed		+= new SyntacticPredicateEventHandler(l.syntacticPredicateFailed);
+			((Parser)source).SynPredSucceeded	+= new SyntacticPredicateEventHandler(l.syntacticPredicateSucceeded);
+			//synPredListeners.Add(l);
+			addDoneListener(l);
+		}
+		public virtual void  addTraceListener(TraceListener l)
+		{
+			((Parser)source).EnterRule	+= new TraceEventHandler(l.enterRule);
+			((Parser)source).ExitRule	+= new TraceEventHandler(l.exitRule);
+			//traceListeners.Add(l);
+			addDoneListener(l);
+		}
+		public virtual void  fireConsume(int c)
+		{
+			TokenEventHandler eventDelegate = (TokenEventHandler)((Parser)source).Events[Parser.LAEventKey];
+			if (eventDelegate != null) 
+			{
+				tokenEvent.setValues(TokenEventArgs.CONSUME, 1, c);
+				eventDelegate(source, tokenEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireDoneParsing()
+		{
+			TraceEventHandler eventDelegate = (TraceEventHandler)((Parser)source).Events[Parser.DoneEventKey];
+			if (eventDelegate != null) 
+			{
+				traceEvent.setValues(TraceEventArgs.DONE_PARSING, 0, 0, 0);
+				eventDelegate(source, traceEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireEnterRule(int ruleNum, int guessing, int data)
+		{
+			ruleDepth++;
+			TraceEventHandler eventDelegate = (TraceEventHandler)((Parser)source).Events[Parser.EnterRuleEventKey];
+			if (eventDelegate != null) 
+			{
+				traceEvent.setValues(TraceEventArgs.ENTER, ruleNum, guessing, data);
+				eventDelegate(source, traceEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireExitRule(int ruleNum, int guessing, int data)
+		{
+			TraceEventHandler eventDelegate = (TraceEventHandler)((Parser)source).Events[Parser.ExitRuleEventKey];
+			if (eventDelegate != null) 
+			{
+				traceEvent.setValues(TraceEventArgs.EXIT, ruleNum, guessing, data);
+				eventDelegate(source, traceEvent);
+			} 
+			checkController();
+
+			ruleDepth--;
+			if (ruleDepth == 0)
+				fireDoneParsing();
+
+		}
+		public virtual void  fireLA(int k, int la)
+		{
+			TokenEventHandler eventDelegate = (TokenEventHandler)((Parser)source).Events[Parser.LAEventKey];
+			if (eventDelegate != null) 
+			{
+				tokenEvent.setValues(TokenEventArgs.LA, k, la);
+				eventDelegate(source, tokenEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatch(char c, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR, c, c, null, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatch(char c, BitSet b, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR_BITSET, c, b, null, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatch(char c, string target, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR_RANGE, c, target, null, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatch(int c, BitSet b, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.BITSET, c, b, text, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatch(int n, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.TOKEN, n, n, text, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatch(string s, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.STRING, 0, s, null, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatchNot(char c, char n, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MatchNotEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR, c, n, null, guessing, true, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatchNot(int c, int n, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MatchNotEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.TOKEN, c, n, text, guessing, true, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatch(char c, char n, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MisMatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR, c, n, null, guessing, false, false);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatch(char c, BitSet b, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MisMatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR_BITSET, c, b, null, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatch(char c, string target, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MisMatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR_RANGE, c, target, null, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatch(int i, int n, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MisMatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.TOKEN, i, n, text, guessing, false, false);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatch(int i, BitSet b, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MisMatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.BITSET, i, b, text, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatch(string s, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MisMatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.STRING, 0, text, s, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatchNot(char v, char c, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MisMatchNotEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR, v, c, null, guessing, true, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatchNot(int i, int n, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((Parser)source).Events[Parser.MisMatchNotEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.TOKEN, i, n, text, guessing, true, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireReportError(System.Exception e)
+		{
+			MessageEventHandler eventDelegate = (MessageEventHandler)((Parser)source).Events[Parser.ReportErrorEventKey];
+			if (eventDelegate != null) 
+			{
+				messageEvent.setValues(MessageEventArgs.ERROR, e.ToString());
+				eventDelegate(source, messageEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireReportError(string s)
+		{
+			MessageEventHandler eventDelegate = (MessageEventHandler)((Parser)source).Events[Parser.ReportErrorEventKey];
+			if (eventDelegate != null) 
+			{
+				messageEvent.setValues(MessageEventArgs.ERROR, s);
+				eventDelegate(source, messageEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireReportWarning(string s)
+		{
+			MessageEventHandler eventDelegate = (MessageEventHandler)((Parser)source).Events[Parser.ReportWarningEventKey];
+			if (eventDelegate != null) 
+			{
+				messageEvent.setValues(MessageEventArgs.WARNING, s);
+				eventDelegate(source, messageEvent);
+			}
+			checkController();
+		}
+		public virtual bool fireSemanticPredicateEvaluated(int type, int condition, bool result, int guessing)
+		{
+			SemanticPredicateEventHandler eventDelegate = (SemanticPredicateEventHandler)((Parser)source).Events[Parser.SemPredEvaluatedEventKey];
+			if (eventDelegate != null) 
+			{
+				semPredEvent.setValues(type, condition, result, guessing);
+				eventDelegate(source, semPredEvent);
+			}
+			checkController();
+
+			return result;
+		}
+		public virtual void  fireSyntacticPredicateFailed(int guessing)
+		{
+			SyntacticPredicateEventHandler eventDelegate = (SyntacticPredicateEventHandler)((Parser)source).Events[Parser.SynPredFailedEventKey];
+			if (eventDelegate != null) 
+			{
+				synPredEvent.setValues(0, guessing);
+				eventDelegate(source, synPredEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireSyntacticPredicateStarted(int guessing)
+		{
+			SyntacticPredicateEventHandler eventDelegate = (SyntacticPredicateEventHandler)((Parser)source).Events[Parser.SynPredStartedEventKey];
+			if (eventDelegate != null) 
+			{
+				synPredEvent.setValues(0, guessing);
+				eventDelegate(source, synPredEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireSyntacticPredicateSucceeded(int guessing)
+		{
+			SyntacticPredicateEventHandler eventDelegate = (SyntacticPredicateEventHandler)((Parser)source).Events[Parser.SynPredSucceededEventKey];
+			if (eventDelegate != null) 
+			{
+				synPredEvent.setValues(0, guessing);
+				eventDelegate(source, synPredEvent);
+			}
+			checkController();
+		}
+		public virtual void  refreshListeners()
+		{
+			Hashtable clonedTable;
+
+			lock(listeners.SyncRoot)
+			{
+				clonedTable = (Hashtable)listeners.Clone();
+			}
+			foreach (DictionaryEntry entry in clonedTable)
+			{
+				if (entry.Value != null)
+				{
+					((Listener) entry.Value).refresh();
+				}
+			}
+		}
+		public virtual void  removeDoneListener(Listener l)
+		{
+			((Parser)source).Done -= new TraceEventHandler(l.doneParsing);
+			listeners.Remove(l);
+		}
+		public virtual void  removeMessageListener(MessageListener l)
+		{
+			((Parser)source).ErrorReported   -= new MessageEventHandler(l.reportError);
+			((Parser)source).WarningReported -= new MessageEventHandler(l.reportWarning);
+			//messageListeners.Remove(l);
+			removeDoneListener(l);
+		}
+		public virtual void  removeParserListener(ParserListener l)
+		{
+			removeParserMatchListener(l);
+			removeMessageListener(l);
+			removeParserTokenListener(l);
+			removeTraceListener(l);
+			removeSemanticPredicateListener(l);
+			removeSyntacticPredicateListener(l);
+		}
+		public virtual void  removeParserMatchListener(ParserMatchListener l)
+		{
+			((Parser)source).MatchedToken		-= new MatchEventHandler(l.parserMatch);
+			((Parser)source).MatchedNotToken	-= new MatchEventHandler(l.parserMatchNot);
+			((Parser)source).MisMatchedToken	-= new MatchEventHandler(l.parserMismatch);
+			((Parser)source).MisMatchedNotToken	-= new MatchEventHandler(l.parserMismatchNot);
+			//matchListeners.Remove(l);
+			removeDoneListener(l);
+		}
+		public virtual void  removeParserTokenListener(ParserTokenListener l)
+		{
+			((Parser)source).ConsumedToken	-= new TokenEventHandler(l.parserConsume);
+			((Parser)source).TokenLA		-= new TokenEventHandler(l.parserLA);
+			//tokenListeners.Remove(l);
+			removeDoneListener(l);
+		}
+		public virtual void  removeSemanticPredicateListener(SemanticPredicateListener l)
+		{
+			((Parser)source).SemPredEvaluated	-= new SemanticPredicateEventHandler(l.semanticPredicateEvaluated);
+			//semPredListeners.Remove(l);
+			removeDoneListener(l);
+		}
+		public virtual void  removeSyntacticPredicateListener(SyntacticPredicateListener l)
+		{
+			((Parser)source).SynPredStarted		-= new SyntacticPredicateEventHandler(l.syntacticPredicateStarted);
+			((Parser)source).SynPredFailed		-= new SyntacticPredicateEventHandler(l.syntacticPredicateFailed);
+			((Parser)source).SynPredSucceeded	-= new SyntacticPredicateEventHandler(l.syntacticPredicateSucceeded);
+			//synPredListeners.Remove(l);
+			removeDoneListener(l);
+		}
+		public virtual void  removeTraceListener(TraceListener l)
+		{
+			((Parser)source).EnterRule	-= new TraceEventHandler(l.enterRule);
+			((Parser)source).ExitRule	-= new TraceEventHandler(l.exitRule);
+			//traceListeners.Remove(l);
+			removeDoneListener(l);
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ParserEventSupport.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ParserListener.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ParserListener.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ParserListener.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,8 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public interface ParserListener : SemanticPredicateListener, ParserMatchListener, MessageListener, ParserTokenListener, TraceListener, SyntacticPredicateListener
+	{
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ParserListener.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ParserListenerBase.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ParserListenerBase.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ParserListenerBase.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,155 @@
+namespace antlr.debug
+{
+	using System;
+	
+	/// <summary>
+	/// Provides an abstract base for implementing <see cref="ParserListener"/> subclasses.
+	/// </summary>
+	/// <remarks>
+	///		<param>
+	///		This abstract class is provided to make it easier to create <see cref="ParserListener"/>s. 
+	///		You should extend this base class rather than creating your own.
+	///		</param>
+	/// </remarks>
+	public class ParserListenerBase : ParserListener
+	{
+		/// <summary>
+		/// Handle the "Done" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  doneParsing(object source, TraceEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "EnterRule" event
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  enterRule(object source, TraceEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "ExitRule" event
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  exitRule(object source, TraceEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "Consume" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  parserConsume(object source, TokenEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "ParserLA" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  parserLA(object source, TokenEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "Match" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  parserMatch(object source, MatchEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "MatchNot" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  parserMatchNot(object source, MatchEventArgs e)
+		{
+		}
+		
+		/// <summary>
+		/// Handle the "MisMatch" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  parserMismatch(object source, MatchEventArgs e)
+		{
+		}
+		
+		/// <summary>
+		/// Handle the "MisMatchNot" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  parserMismatchNot(object source, MatchEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "ReportError" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  reportError(object source, MessageEventArgs e)
+		{
+		}
+		
+		/// <summary>
+		/// Handle the "ReportWarning" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  reportWarning(object source, MessageEventArgs e)
+		{
+		}
+		
+		/// <summary>
+		/// Handle the "SemPreEvaluated" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  semanticPredicateEvaluated(object source, SemanticPredicateEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "SynPredFailed" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  syntacticPredicateFailed(object source, SyntacticPredicateEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "SynPredStarted" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  syntacticPredicateStarted(object source, SyntacticPredicateEventArgs e)
+		{
+		}
+		
+		/// <summary>
+		/// Handle the "SynPredSucceeded" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  syntacticPredicateSucceeded(object source, SyntacticPredicateEventArgs e)
+		{
+		}
+
+		public virtual void  refresh()
+		{
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ParserListenerBase.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ParserMatchEventArgs.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ParserMatchEventArgs.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ParserMatchEventArgs.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,93 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public class MatchEventArgs : GuessingEventArgs
+	{
+		public MatchEventArgs()
+		{
+		}
+		public MatchEventArgs(int type, int val, object target, string text, int guessing, bool inverse, bool matched)
+		{
+			setValues(type, val, target, text, guessing, inverse, matched);
+		}
+
+		public virtual object Target
+		{
+			get	{ return this.target_;	}
+			set	{ this.target_ = value;	}
+		}
+
+		public virtual string Text
+		{
+			get	{ return this.text_;	}
+			set	{ this.text_ = value;	}
+		}
+
+		public virtual int Value
+		{
+			get	{ return this.val_;		}
+			set	{ this.val_ = value;	}
+		}
+
+		internal bool Inverse
+		{
+			set	{ this.inverse_ = value;	}
+		}
+
+		internal bool Matched
+		{
+			set	{ this.matched_ = value;	}
+		}
+
+		// NOTE: for a mismatch on type STRING, the "text" is used as the lookahead
+		//       value.  Normally "value" is this
+		public enum ParserMatchEnums
+		{
+			TOKEN		= 0,
+			BITSET		= 1,
+			CHAR		= 2,
+			CHAR_BITSET = 3,
+			STRING		= 4,
+			CHAR_RANGE	= 5,
+		}
+		public static int TOKEN = 0;
+		public static int BITSET = 1;
+		public static int CHAR = 2;
+		public static int CHAR_BITSET = 3;
+		public static int STRING = 4;
+		public static int CHAR_RANGE = 5;
+
+		private bool	inverse_;
+		private bool	matched_;
+		private object	target_;
+		private int		val_;
+		private string	text_;
+		
+		
+		public virtual bool isInverse()
+		{
+			return inverse_;
+		}
+		public virtual bool isMatched()
+		{
+			return matched_;
+		}
+		/// <summary>This should NOT be called from anyone other than ParserEventSupport! 
+		/// </summary>
+		internal void  setValues(int type, int val, object target, string text, int guessing, bool inverse, bool matched)
+		{
+			base.setValues(type, guessing);
+			this.Value = val;
+			this.Target = target;
+			this.Inverse = inverse;
+			this.Matched = matched;
+			this.Text = text;
+		}
+		
+		public override string ToString()
+		{
+			return "ParserMatchEvent [" + (isMatched()?"ok,":"bad,") + (isInverse()?"NOT ":"") + (Type == TOKEN?"token,":"bitset,") + Value + "," + Target + "," + Guessing + "]";
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ParserMatchEventArgs.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ParserMatchListener.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ParserMatchListener.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ParserMatchListener.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,12 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public interface ParserMatchListener : Listener
+	{
+		void  parserMatch		(object source, MatchEventArgs e);
+		void  parserMatchNot	(object source, MatchEventArgs e);
+		void  parserMismatch	(object source, MatchEventArgs e);
+		void  parserMismatchNot	(object source, MatchEventArgs e);
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ParserMatchListener.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ParserMatchListenerBase.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ParserMatchListenerBase.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ParserMatchListenerBase.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,65 @@
+namespace antlr.debug
+{
+	using System;
+	
+	/// <summary>
+	/// Provides an abstract base for implementing <see cref="ParserMatchListener"/> subclasses.
+	/// </summary>
+	/// <remarks>
+	///		<param>
+	///		This abstract class is provided to make it easier to create <see cref="ParserMatchListener"/>s. 
+	///		You should extend this base class rather than creating your own.
+	///		</param>
+	/// </remarks>
+	public abstract class ParserMatchListenerBase : ParserMatchListener
+	{
+		/// <summary>
+		/// Handle the "Done" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  doneParsing(object source, TraceEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "Match" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  parserMatch(object source, MatchEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "MatchNot" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  parserMatchNot(object source, MatchEventArgs e)
+		{
+		}
+		
+		/// <summary>
+		/// Handle the "MisMatch" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  parserMismatch(object source, MatchEventArgs e)
+		{
+		}
+		
+		/// <summary>
+		/// Handle the "MisMatchNot" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  parserMismatchNot(object source, MatchEventArgs e)
+		{
+		}
+
+		public virtual void  refresh()
+		{
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ParserMatchListenerBase.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ParserReporter.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ParserReporter.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ParserReporter.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,56 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public class ParserReporter : Tracer, ParserListener
+	{
+		public virtual void  parserConsume(object source, TokenEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+		}
+		public virtual void  parserLA(object source, TokenEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+		}
+		public virtual void  parserMatch(object source, MatchEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+		}
+		public virtual void  parserMatchNot(object source, MatchEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+		}
+		public virtual void  parserMismatch(object source, MatchEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+		}
+		public virtual void  parserMismatchNot(object source, MatchEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+		}
+		public virtual void  reportError(object source, MessageEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+		}
+		public virtual void  reportWarning(object source, MessageEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+		}
+		public virtual void  semanticPredicateEvaluated(object source, SemanticPredicateEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+		}
+		public virtual void  syntacticPredicateFailed(object source, SyntacticPredicateEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+		}
+		public virtual void  syntacticPredicateStarted(object source, SyntacticPredicateEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+		}
+		public virtual void  syntacticPredicateSucceeded(object source, SyntacticPredicateEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ParserReporter.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ParserTokenEventArgs.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ParserTokenEventArgs.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ParserTokenEventArgs.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,51 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public class TokenEventArgs : ANTLREventArgs
+	{
+		public TokenEventArgs()
+		{
+		}
+		public TokenEventArgs(int type, int amount, int val)
+		{
+			setValues(type, amount, val);
+		}
+
+		public virtual int Amount
+		{
+			get	{ return amount;	}
+			set	{ this.amount = value;	}
+		}
+
+		public virtual int Value
+		{
+			get	{ return this.value_;	}
+			set { this.value_ = value;	}
+		}
+
+		private int value_;
+		private int amount;
+
+		public static int LA = 0;
+		public static int CONSUME = 1;
+		
+		
+		/// <summary>This should NOT be called from anyone other than ParserEventSupport! 
+		/// </summary>
+		internal void  setValues(int type, int amount, int val)
+		{
+			base.setValues(type);
+			this.Amount = amount;
+			this.Value  = val;
+		}
+
+		public override string ToString()
+		{
+			if (Type == LA)
+				return "ParserTokenEvent [LA," + Amount + "," + Value + "]";
+			else
+				return "ParserTokenEvent [consume,1," + Value + "]";
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ParserTokenEventArgs.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ParserTokenListener.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ParserTokenListener.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ParserTokenListener.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,10 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public interface ParserTokenListener : Listener
+	{
+		void  parserConsume	(object source, TokenEventArgs e);
+		void  parserLA		(object source, TokenEventArgs e);
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ParserTokenListener.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ParserTokenListenerBase.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ParserTokenListenerBase.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ParserTokenListenerBase.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,47 @@
+namespace antlr.debug
+{
+	using System;
+	
+	/// <summary>
+	/// Provides an abstract base for implementing <see cref="ParserTokenListener"/> subclasses.
+	/// </summary>
+	/// <remarks>
+	///		<param>
+	///		This abstract class is provided to make it easier to create <see cref="ParserTokenListener"/>s. 
+	///		You should extend this base class rather than creating your own.
+	///		</param>
+	/// </remarks>
+	public abstract class ParserTokenListenerBase : ParserTokenListener
+	{
+		/// <summary>
+		/// Handle the "Done" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  doneParsing(object source, TraceEventArgs e)
+		{
+		}
+
+		public virtual void  refresh()
+		{
+		}
+
+		/// <summary>
+		/// Handle the "Consume" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  parserConsume(object source, TokenEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "ParserLA" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  parserLA(object source, TokenEventArgs e)
+		{
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ParserTokenListenerBase.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/ScannerEventSupport.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/ScannerEventSupport.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/ScannerEventSupport.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,484 @@
+namespace antlr.debug
+{
+	using System;
+	using System.Reflection;
+	using Hashtable		= System.Collections.Hashtable;
+	using ArrayList		= System.Collections.ArrayList;
+
+	using antlr.collections.impl;
+	
+	
+	/// <summary>A class to assist in firing parser events
+	/// NOTE: I intentionally _did_not_ synchronize the event firing and
+	/// add/remove listener methods.  This is because the add/remove should
+	/// _only_ be called by the parser at its start/end, and the _same_thread_
+	/// should be performing the parsing.  This should help performance a tad...
+	/// </summary>
+	public class ScannerEventSupport
+	{
+		private object source;
+		private Hashtable listeners;
+		private MatchEventArgs matchEvent;
+		private MessageEventArgs messageEvent;
+		private TokenEventArgs tokenEvent;
+		private SemanticPredicateEventArgs semPredEvent;
+		private SyntacticPredicateEventArgs synPredEvent;
+		private TraceEventArgs traceEvent;
+		private NewLineEventArgs newLineEvent;
+		//private ParserController controller;
+
+		private int ruleDepth = 0;
+		
+		
+		public ScannerEventSupport(object source)
+		{
+			matchEvent		= new MatchEventArgs();
+			messageEvent	= new MessageEventArgs();
+			tokenEvent		= new TokenEventArgs();
+			traceEvent		= new TraceEventArgs();
+			semPredEvent	= new SemanticPredicateEventArgs();
+			synPredEvent	= new SyntacticPredicateEventArgs();
+			newLineEvent	= new NewLineEventArgs();
+			listeners		= new Hashtable();
+			this.source		= source;
+		}
+
+		public virtual void checkController()
+		{
+			//if (controller != null)
+			//	controller.checkBreak();
+		}
+
+		public virtual void  addDoneListener(Listener l)
+		{
+			((CharScanner)source).Done += new TraceEventHandler(l.doneParsing);
+			listeners[l] = l;
+		}
+		public virtual void  addMessageListener(MessageListener l)
+		{
+			((CharScanner)source).ErrorReported   += new MessageEventHandler(l.reportError);
+			((CharScanner)source).WarningReported += new MessageEventHandler(l.reportWarning);
+			addDoneListener(l);
+		}
+		public virtual void  addNewLineListener(NewLineListener l)
+		{
+			((CharScanner)source).HitNewLine   += new NewLineEventHandler(l.hitNewLine);
+			addDoneListener(l);
+		}
+		public virtual void  addParserListener(ParserListener l)
+		{
+			if (l is ParserController)
+			{
+				//((ParserController) l).ParserEventSupport = this;
+				//controller = (ParserController) l;
+			}
+			addParserMatchListener(l);
+			addParserTokenListener(l);
+			
+			addMessageListener(l);
+			addTraceListener(l);
+			addSemanticPredicateListener(l);
+			addSyntacticPredicateListener(l);
+		}
+		public virtual void  addParserMatchListener(ParserMatchListener l)
+		{
+			((CharScanner)source).MatchedChar		+= new MatchEventHandler(l.parserMatch);
+			((CharScanner)source).MatchedNotChar	+= new MatchEventHandler(l.parserMatchNot);
+			((CharScanner)source).MisMatchedChar	+= new MatchEventHandler(l.parserMismatch);
+			((CharScanner)source).MisMatchedNotChar	+= new MatchEventHandler(l.parserMismatchNot);
+			addDoneListener(l);
+		}
+		public virtual void  addParserTokenListener(ParserTokenListener l)
+		{
+			((CharScanner)source).ConsumedChar	+= new TokenEventHandler(l.parserConsume);
+			((CharScanner)source).CharLA		+= new TokenEventHandler(l.parserLA);
+			addDoneListener(l);
+		}
+		public virtual void  addSemanticPredicateListener(SemanticPredicateListener l)
+		{
+			((CharScanner)source).SemPredEvaluated	+= new SemanticPredicateEventHandler(l.semanticPredicateEvaluated);
+			addDoneListener(l);
+		}
+		public virtual void  addSyntacticPredicateListener(SyntacticPredicateListener l)
+		{
+			((CharScanner)source).SynPredStarted		+= new SyntacticPredicateEventHandler(l.syntacticPredicateStarted);
+			((CharScanner)source).SynPredFailed		+= new SyntacticPredicateEventHandler(l.syntacticPredicateFailed);
+			((CharScanner)source).SynPredSucceeded	+= new SyntacticPredicateEventHandler(l.syntacticPredicateSucceeded);
+			addDoneListener(l);
+		}
+		public virtual void  addTraceListener(TraceListener l)
+		{
+			((CharScanner)source).EnterRule	+= new TraceEventHandler(l.enterRule);
+			((CharScanner)source).ExitRule	+= new TraceEventHandler(l.exitRule);
+			addDoneListener(l);
+		}
+		public virtual void  fireConsume(int c)
+		{
+			TokenEventHandler eventDelegate = (TokenEventHandler)((CharScanner)source).Events[Parser.LAEventKey];
+			if (eventDelegate != null) 
+			{
+				tokenEvent.setValues(TokenEventArgs.CONSUME, 1, c);
+				eventDelegate(source, tokenEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireDoneParsing()
+		{
+			TraceEventHandler eventDelegate = (TraceEventHandler)((CharScanner)source).Events[Parser.DoneEventKey];
+			if (eventDelegate != null) 
+			{
+				traceEvent.setValues(TraceEventArgs.DONE_PARSING, 0, 0, 0);
+				eventDelegate(source, traceEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireEnterRule(int ruleNum, int guessing, int data)
+		{
+			ruleDepth++;
+			TraceEventHandler eventDelegate = (TraceEventHandler)((CharScanner)source).Events[Parser.EnterRuleEventKey];
+			if (eventDelegate != null) 
+			{
+				traceEvent.setValues(TraceEventArgs.ENTER, ruleNum, guessing, data);
+				eventDelegate(source, traceEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireExitRule(int ruleNum, int guessing, int data)
+		{
+			TraceEventHandler eventDelegate = (TraceEventHandler)((CharScanner)source).Events[Parser.ExitRuleEventKey];
+			if (eventDelegate != null) 
+			{
+				traceEvent.setValues(TraceEventArgs.EXIT, ruleNum, guessing, data);
+				eventDelegate(source, traceEvent);
+			} 
+			checkController();
+
+			ruleDepth--;
+			if (ruleDepth == 0)
+				fireDoneParsing();
+
+		}
+		public virtual void  fireLA(int k, int la)
+		{
+			TokenEventHandler eventDelegate = (TokenEventHandler)((CharScanner)source).Events[Parser.LAEventKey];
+			if (eventDelegate != null) 
+			{
+				tokenEvent.setValues(TokenEventArgs.LA, k, la);
+				eventDelegate(source, tokenEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatch(char c, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR, c, c, null, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatch(char c, BitSet b, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR_BITSET, c, b, null, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatch(char c, string target, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR_RANGE, c, target, null, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatch(int c, BitSet b, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.BITSET, c, b, text, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatch(int n, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.TOKEN, n, n, text, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatch(string s, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.STRING, 0, s, null, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatchNot(char c, char n, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MatchNotEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR, c, n, null, guessing, true, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMatchNot(int c, int n, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MatchNotEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.TOKEN, c, n, text, guessing, true, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatch(char c, char n, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MisMatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR, c, n, null, guessing, false, false);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatch(char c, BitSet b, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MisMatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR_BITSET, c, b, null, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatch(char c, string target, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MisMatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR_RANGE, c, target, null, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatch(int i, int n, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MisMatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.TOKEN, i, n, text, guessing, false, false);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatch(int i, BitSet b, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MisMatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.BITSET, i, b, text, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatch(string s, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MisMatchEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.STRING, 0, text, s, guessing, false, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatchNot(char v, char c, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MisMatchNotEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.CHAR, v, c, null, guessing, true, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireMismatchNot(int i, int n, string text, int guessing)
+		{
+			MatchEventHandler eventDelegate = (MatchEventHandler)((CharScanner)source).Events[Parser.MisMatchNotEventKey];
+			if (eventDelegate != null) 
+			{
+				matchEvent.setValues(MatchEventArgs.TOKEN, i, n, text, guessing, true, true);
+				eventDelegate(source, matchEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireNewLine(int line)
+		{
+			NewLineEventHandler eventDelegate = (NewLineEventHandler)((CharScanner)source).Events[Parser.NewLineEventKey];
+			if (eventDelegate != null) 
+			{
+				newLineEvent.Line = line;
+				eventDelegate(source, newLineEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireReportError(System.Exception e)
+		{
+			MessageEventHandler eventDelegate = (MessageEventHandler)((CharScanner)source).Events[Parser.ReportErrorEventKey];
+			if (eventDelegate != null) 
+			{
+				messageEvent.setValues(MessageEventArgs.ERROR, e.ToString());
+				eventDelegate(source, messageEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireReportError(string s)
+		{
+			MessageEventHandler eventDelegate = (MessageEventHandler)((CharScanner)source).Events[Parser.ReportErrorEventKey];
+			if (eventDelegate != null) 
+			{
+				messageEvent.setValues(MessageEventArgs.ERROR, s);
+				eventDelegate(source, messageEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireReportWarning(string s)
+		{
+			MessageEventHandler eventDelegate = (MessageEventHandler)((CharScanner)source).Events[Parser.ReportWarningEventKey];
+			if (eventDelegate != null) 
+			{
+				messageEvent.setValues(MessageEventArgs.WARNING, s);
+				eventDelegate(source, messageEvent);
+			}
+			checkController();
+		}
+		public virtual bool fireSemanticPredicateEvaluated(int type, int condition, bool result, int guessing)
+		{
+			SemanticPredicateEventHandler eventDelegate = (SemanticPredicateEventHandler)((CharScanner)source).Events[Parser.SemPredEvaluatedEventKey];
+			if (eventDelegate != null) 
+			{
+				semPredEvent.setValues(type, condition, result, guessing);
+				eventDelegate(source, semPredEvent);
+			}
+			checkController();
+
+			return result;
+		}
+		public virtual void  fireSyntacticPredicateFailed(int guessing)
+		{
+			SyntacticPredicateEventHandler eventDelegate = (SyntacticPredicateEventHandler)((CharScanner)source).Events[Parser.SynPredFailedEventKey];
+			if (eventDelegate != null) 
+			{
+				synPredEvent.setValues(0, guessing);
+				eventDelegate(source, synPredEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireSyntacticPredicateStarted(int guessing)
+		{
+			SyntacticPredicateEventHandler eventDelegate = (SyntacticPredicateEventHandler)((CharScanner)source).Events[Parser.SynPredStartedEventKey];
+			if (eventDelegate != null) 
+			{
+				synPredEvent.setValues(0, guessing);
+				eventDelegate(source, synPredEvent);
+			}
+			checkController();
+		}
+		public virtual void  fireSyntacticPredicateSucceeded(int guessing)
+		{
+			SyntacticPredicateEventHandler eventDelegate = (SyntacticPredicateEventHandler)((CharScanner)source).Events[Parser.SynPredSucceededEventKey];
+			if (eventDelegate != null) 
+			{
+				synPredEvent.setValues(0, guessing);
+				eventDelegate(source, synPredEvent);
+			}
+			checkController();
+		}
+		public virtual void  refreshListeners()
+		{
+			Hashtable clonedTable;
+
+			lock(listeners.SyncRoot)
+			{
+				clonedTable = (Hashtable)listeners.Clone();
+			}
+			foreach (Listener l in clonedTable)
+			{
+				l.refresh();
+			}
+		}
+		public virtual void  removeDoneListener(Listener l)
+		{
+			((CharScanner)source).Done -= new TraceEventHandler(l.doneParsing);
+			listeners.Remove(l);
+		}
+		public virtual void  removeMessageListener(MessageListener l)
+		{
+			((CharScanner)source).ErrorReported   -= new MessageEventHandler(l.reportError);
+			((CharScanner)source).WarningReported -= new MessageEventHandler(l.reportWarning);
+			removeDoneListener(l);
+		}
+		public virtual void  removeNewLineListener(NewLineListener l)
+		{
+			((CharScanner)source).HitNewLine   -= new NewLineEventHandler(l.hitNewLine);
+			removeDoneListener(l);
+		}
+		public virtual void  removeParserListener(ParserListener l)
+		{
+			removeParserMatchListener(l);
+			removeMessageListener(l);
+			removeParserTokenListener(l);
+			removeTraceListener(l);
+			removeSemanticPredicateListener(l);
+			removeSyntacticPredicateListener(l);
+		}
+		public virtual void  removeParserMatchListener(ParserMatchListener l)
+		{
+			((CharScanner)source).MatchedChar		-= new MatchEventHandler(l.parserMatch);
+			((CharScanner)source).MatchedNotChar	-= new MatchEventHandler(l.parserMatchNot);
+			((CharScanner)source).MisMatchedChar	-= new MatchEventHandler(l.parserMismatch);
+			((CharScanner)source).MisMatchedNotChar	-= new MatchEventHandler(l.parserMismatchNot);
+			removeDoneListener(l);
+		}
+		public virtual void  removeParserTokenListener(ParserTokenListener l)
+		{
+			((CharScanner)source).ConsumedChar	-= new TokenEventHandler(l.parserConsume);
+			((CharScanner)source).CharLA		-= new TokenEventHandler(l.parserLA);
+			removeDoneListener(l);
+		}
+		public virtual void  removeSemanticPredicateListener(SemanticPredicateListener l)
+		{
+			((CharScanner)source).SemPredEvaluated	-= new SemanticPredicateEventHandler(l.semanticPredicateEvaluated);
+			removeDoneListener(l);
+		}
+		public virtual void  removeSyntacticPredicateListener(SyntacticPredicateListener l)
+		{
+			((CharScanner)source).SynPredStarted	-= new SyntacticPredicateEventHandler(l.syntacticPredicateStarted);
+			((CharScanner)source).SynPredFailed		-= new SyntacticPredicateEventHandler(l.syntacticPredicateFailed);
+			((CharScanner)source).SynPredSucceeded	-= new SyntacticPredicateEventHandler(l.syntacticPredicateSucceeded);
+			removeDoneListener(l);
+		}
+		public virtual void  removeTraceListener(TraceListener l)
+		{
+			((CharScanner)source).EnterRule	-= new TraceEventHandler(l.enterRule);
+			((CharScanner)source).ExitRule	-= new TraceEventHandler(l.exitRule);
+			removeDoneListener(l);
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/ScannerEventSupport.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/SemanticPredicateEventArgs.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/SemanticPredicateEventArgs.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/SemanticPredicateEventArgs.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,47 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public class SemanticPredicateEventArgs : GuessingEventArgs
+	{
+		public SemanticPredicateEventArgs()
+		{
+		}
+		public SemanticPredicateEventArgs(int type) : base(type)
+		{
+		}
+
+		public virtual int Condition
+		{
+			get	{ return this.condition_;	}
+			set	{ this.condition_ = value;	}
+		}
+
+		public virtual bool Result
+		{
+			get	{ return this.result_;	}
+			set	{ this.result_ = value;	}
+		}
+
+		public const int VALIDATING = 0;
+		public const int PREDICTING = 1;
+
+		private int condition_;
+		private bool result_;
+		
+		
+		/// <summary>This should NOT be called from anyone other than ParserEventSupport! 
+		/// </summary>
+		internal void  setValues(int type, int condition, bool result, int guessing)
+		{
+			base.setValues(type, guessing);
+			this.Condition	= condition;
+			this.Result		= result;
+		}
+
+		public override string ToString()
+		{
+			return "SemanticPredicateEvent [" + Condition + "," + Result + "," + Guessing + "]";
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/SemanticPredicateEventArgs.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/SemanticPredicateListener.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/SemanticPredicateListener.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/SemanticPredicateListener.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,9 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public interface SemanticPredicateListener : Listener
+	{
+		void  semanticPredicateEvaluated(object source, SemanticPredicateEventArgs e);
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/SemanticPredicateListener.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/SemanticPredicateListenerBase.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/SemanticPredicateListenerBase.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/SemanticPredicateListenerBase.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,38 @@
+namespace antlr.debug
+{
+	using System;
+	
+	/// <summary>
+	/// Provides an abstract base for implementing <see cref="SemanticPredicateListener"/> subclasses.
+	/// </summary>
+	/// <remarks>
+	///		<param>
+	///		This abstract class is provided to make it easier to create <see cref="SemanticPredicateListener"/>s. 
+	///		You should extend this base class rather than creating your own.
+	///		</param>
+	/// </remarks>
+	public class SemanticPredicateListenerBase : SemanticPredicateListener
+	{
+		/// <summary>
+		/// Handle the "Done" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  doneParsing(object source, TraceEventArgs e)
+		{
+		}
+
+		public virtual void  refresh()
+		{
+		}
+
+		/// <summary>
+		/// Handle the "SemPreEvaluated" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  semanticPredicateEvaluated(object source, SemanticPredicateEventArgs e)
+		{
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/SemanticPredicateListenerBase.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateEventArgs.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateEventArgs.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateEventArgs.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,21 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public class SyntacticPredicateEventArgs : GuessingEventArgs
+	{
+		
+		
+		public SyntacticPredicateEventArgs()
+		{
+		}
+		public SyntacticPredicateEventArgs(int type) : base(type)
+		{
+		}
+
+		public override string ToString()
+		{
+			return "SyntacticPredicateEvent [" + Guessing + "]";
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateEventArgs.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateListener.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateListener.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateListener.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,11 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public interface SyntacticPredicateListener : Listener
+	{
+		void  syntacticPredicateFailed		(object source, SyntacticPredicateEventArgs e);
+		void  syntacticPredicateStarted		(object source, SyntacticPredicateEventArgs e);
+		void  syntacticPredicateSucceeded	(object source, SyntacticPredicateEventArgs e);
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateListener.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateListenerBase.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateListenerBase.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateListenerBase.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,56 @@
+namespace antlr.debug
+{
+	using System;
+	
+	/// <summary>
+	/// Provides an abstract base for implementing <see cref="SyntacticPredicateListener"/> subclasses.
+	/// </summary>
+	/// <remarks>
+	///		<param>
+	///		This abstract class is provided to make it easier to create <see cref="SyntacticPredicateListener"/>s. 
+	///		You should extend this base class rather than creating your own.
+	///		</param>
+	/// </remarks>
+	public abstract class SyntacticPredicateListenerBase : SyntacticPredicateListener
+	{
+		/// <summary>
+		/// Handle the "Done" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  doneParsing(object source, TraceEventArgs e)
+		{
+		}
+
+		public virtual void  refresh()
+		{
+		}
+
+		/// <summary>
+		/// Handle the "SynPredFailed" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  syntacticPredicateFailed(object source, SyntacticPredicateEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "SynPredStarted" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  syntacticPredicateStarted(object source, SyntacticPredicateEventArgs e)
+		{
+		}
+		
+		/// <summary>
+		/// Handle the "SynPredSucceeded" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  syntacticPredicateSucceeded(object source, SyntacticPredicateEventArgs e)
+		{
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/SyntacticPredicateListenerBase.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/TraceEventArgs.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/TraceEventArgs.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/TraceEventArgs.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,49 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public class TraceEventArgs : GuessingEventArgs
+	{
+		public TraceEventArgs()
+		{
+		}
+		public TraceEventArgs(int type, int ruleNum, int guessing, int data)
+		{
+			setValues(type, ruleNum, guessing, data);
+		}
+
+		public virtual int Data
+		{
+			get	{ return this.data_;	}
+			set	{ this.data_ = value;	}
+		}
+
+		public virtual int RuleNum
+		{
+			get	{ return this.ruleNum_;		}
+			set	{ this.ruleNum_ = value;	}
+		}
+
+		private int ruleNum_;
+		private int data_;
+
+		public static int ENTER = 0;
+		public static int EXIT = 1;
+		public static int DONE_PARSING = 2;
+		
+		
+		/// <summary>This should NOT be called from anyone other than ParserEventSupport! 
+		/// </summary>
+		internal void  setValues(int type, int ruleNum, int guessing, int data)
+		{
+			base.setValues(type, guessing);
+			RuleNum = ruleNum;
+			Data	= data;
+		}
+
+		public override string ToString()
+		{
+			return "ParserTraceEvent [" + (Type == ENTER?"enter,":"exit,") + RuleNum + "," + Guessing + "]";
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/TraceEventArgs.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/TraceListener.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/TraceListener.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/TraceListener.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,10 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public interface TraceListener : Listener
+	{
+		void  enterRule	(object source, TraceEventArgs e);
+		void  exitRule	(object source, TraceEventArgs e);
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/TraceListener.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/TraceListenerBase.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/TraceListenerBase.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/TraceListenerBase.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,47 @@
+namespace antlr.debug
+{
+	using System;
+
+	/// <summary>
+	/// Provides an abstract base for implementing <see cref="TraceListener"/> subclasses.
+	/// </summary>
+	/// <remarks>
+	///		<param>
+	///		This abstract class is provided to make it easier to create <see cref="TraceListener"/>s. 
+	///		You should extend this base class rather than creating your own.
+	///		</param>
+	/// </remarks>
+	public abstract class TraceListenerBase : TraceListener
+	{
+		/// <summary>
+		/// Handle the "Done" event.
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  doneParsing(object source, TraceEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "EnterRule" event
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  enterRule(object source, TraceEventArgs e)
+		{
+		}
+
+		/// <summary>
+		/// Handle the "ExitRule" event
+		/// </summary>
+		/// <param name="source">Event source object</param>
+		/// <param name="e">Event data object</param>
+		public virtual void  exitRule(object source, TraceEventArgs e)
+		{
+		}
+
+		public virtual void  refresh()
+		{
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/TraceListenerBase.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime/antlr.debug/Tracer.cs
===================================================================
--- trunk/src/antlr-runtime/antlr.debug/Tracer.cs	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime/antlr.debug/Tracer.cs	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,33 @@
+namespace antlr.debug
+{
+	using System;
+	
+	public class Tracer : TraceListenerBase, TraceListener
+	{
+		protected string indentString = "";
+		// TBD: should be StringBuffer
+		
+		
+		protected internal virtual void  dedent()
+		{
+			if (indentString.Length < 2)
+				indentString = "";
+			else
+				indentString = indentString.Substring(2);
+		}
+		public override void  enterRule(object source, TraceEventArgs e)
+		{
+			System.Console.Out.WriteLine(indentString + e);
+			indent();
+		}
+		public override void  exitRule(object source, TraceEventArgs e)
+		{
+			dedent();
+			System.Console.Out.WriteLine(indentString + e);
+		}
+		protected internal virtual void  indent()
+		{
+			indentString += "  ";
+		}
+	}
+}
\ No newline at end of file


Property changes on: trunk/src/antlr-runtime/antlr.debug/Tracer.cs
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/src/antlr-runtime.dll.sources
===================================================================
--- trunk/src/antlr-runtime.dll.sources	2005-06-23 12:35:44 UTC (rev 25)
+++ trunk/src/antlr-runtime.dll.sources	2005-06-24 04:09:17 UTC (rev 26)
@@ -0,0 +1,102 @@
+antlr-runtime/AssemblyInfo.cs
+antlr-runtime/antlr.collections/AST.cs
+antlr-runtime/antlr.debug/InputBufferEventSupport.cs
+antlr-runtime/antlr.debug/TraceListenerBase.cs
+antlr-runtime/antlr.debug/ParserMatchListener.cs
+antlr-runtime/antlr.debug/MessageListener.cs
+antlr-runtime/antlr.debug/Tracer.cs
+antlr-runtime/antlr.debug/SemanticPredicateListenerBase.cs
+antlr-runtime/antlr.debug/NewLineListener.cs
+antlr-runtime/antlr.debug/InputBufferEventArgs.cs
+antlr-runtime/antlr.debug/InputBufferListener.cs
+antlr-runtime/antlr.debug/Listener.cs
+antlr-runtime/antlr.debug/SemanticPredicateEventArgs.cs
+antlr-runtime/antlr.debug/IParserDebugSubject.cs
+antlr-runtime/antlr.debug/MessageEventArgs.cs
+antlr-runtime/antlr.debug/ParserListener.cs
+antlr-runtime/antlr.debug/NewLineEventArgs.cs
+antlr-runtime/antlr.debug/ParserController.cs
+antlr-runtime/antlr.debug/DebuggingCharScanner.cs
+antlr-runtime/antlr.debug/DebuggingInputBuffer.cs
+antlr-runtime/antlr.debug/ParserReporter.cs
+antlr-runtime/antlr.debug/SemanticPredicateListener.cs
+antlr-runtime/antlr.debug/MessageListenerBase.cs
+antlr-runtime/antlr.debug/ScannerEventSupport.cs
+antlr-runtime/antlr.debug/ICharScannerDebugSubject.cs
+antlr-runtime/antlr.debug/SyntacticPredicateEventArgs.cs
+antlr-runtime/antlr.debug/ANTLREventArgs.cs
+antlr-runtime/antlr.debug/SyntacticPredicateListenerBase.cs
+antlr-runtime/antlr.debug/GuessingEventArgs.cs
+antlr-runtime/antlr.debug/TraceListener.cs
+antlr-runtime/antlr.debug/ParserMatchEventArgs.cs
+antlr-runtime/antlr.debug/IDebugSubject.cs
+antlr-runtime/antlr.debug/LLkDebuggingParser.cs
+antlr-runtime/antlr.debug/DebuggingParser.cs
+antlr-runtime/antlr.debug/ParseTreeDebugParser.cs
+antlr-runtime/antlr.debug/ParserListenerBase.cs
+antlr-runtime/antlr.debug/ParserTokenEventArgs.cs
+antlr-runtime/antlr.debug/InputBufferListenerBase.cs
+antlr-runtime/antlr.debug/SyntacticPredicateListener.cs
+antlr-runtime/antlr.debug/ParserTokenListener.cs
+antlr-runtime/antlr.debug/TraceEventArgs.cs
+antlr-runtime/antlr.debug/ParserMatchListenerBase.cs
+antlr-runtime/antlr.debug/InputBufferReporter.cs
+antlr-runtime/antlr.debug/ParserTokenListenerBase.cs
+antlr-runtime/antlr.debug/ParserEventSupport.cs
+antlr-runtime/antlr.collections.impl/BitSet.cs
+antlr-runtime/antlr.collections.impl/ASTArray.cs
+antlr-runtime/SupportClass.cs
+antlr-runtime/antlr/ParseTreeRule.cs
+antlr-runtime/antlr/ASTNULLType.cs
+antlr-runtime/antlr/ANTLRPanicException.cs
+antlr-runtime/antlr/Token.cs
+antlr-runtime/antlr/MismatchedCharException.cs
+antlr-runtime/antlr/CharStreamIOException.cs
+antlr-runtime/antlr/SemanticException.cs
+antlr-runtime/antlr/CommonAST.cs
+antlr-runtime/antlr/TokenStreamRetryException.cs
+antlr-runtime/antlr/IToken.cs
+antlr-runtime/antlr/ParseTree.cs
+antlr-runtime/antlr/FileLineFormatter.cs
+antlr-runtime/antlr/Parser.cs
+antlr-runtime/antlr/TokenCreator.cs
+antlr-runtime/antlr/CommonASTWithHiddenTokens.cs
+antlr-runtime/antlr/NoViableAltForCharException.cs
+antlr-runtime/antlr/CharQueue.cs
+antlr-runtime/antlr/CharScanner.cs
+antlr-runtime/antlr/TokenWithIndex.cs
+antlr-runtime/antlr/TokenStreamException.cs
+antlr-runtime/antlr/CommonToken.cs
+antlr-runtime/antlr/CommonHiddenStreamToken.cs
+antlr-runtime/antlr/TokenStreamRewriteEngine.cs
+antlr-runtime/antlr/StringUtils.cs
+antlr-runtime/antlr/BaseAST.cs
+antlr-runtime/antlr/ParserSharedInputState.cs
+antlr-runtime/antlr/ByteBuffer.cs
+antlr-runtime/antlr/CharBuffer.cs
+antlr-runtime/antlr/MismatchedTokenException.cs
+antlr-runtime/antlr/TokenStreamBasicFilter.cs
+antlr-runtime/antlr/ASTPair.cs
+antlr-runtime/antlr/IHiddenStreamToken.cs
+antlr-runtime/antlr/DumpASTVisitor.cs
+antlr-runtime/antlr/TokenBuffer.cs
+antlr-runtime/antlr/InputBuffer.cs
+antlr-runtime/antlr/LLkParser.cs
+antlr-runtime/antlr/TokenStreamIOException.cs
+antlr-runtime/antlr/RecognitionException.cs
+antlr-runtime/antlr/TokenStreamRecognitionException.cs
+antlr-runtime/antlr/CharStreamException.cs
+antlr-runtime/antlr/TokenStreamSelector.cs
+antlr-runtime/antlr/ASTVisitor.cs
+antlr-runtime/antlr/TokenStream.cs
+antlr-runtime/antlr/NoViableAltException.cs
+antlr-runtime/antlr/DefaultFileLineFormatter.cs
+antlr-runtime/antlr/ASTNodeCreator.cs
+antlr-runtime/antlr/LexerSharedInputState.cs
+antlr-runtime/antlr/TreeParser.cs
+antlr-runtime/antlr/TokenQueue.cs
+antlr-runtime/antlr/TokenStreamHiddenTokenFilter.cs
+antlr-runtime/antlr/ParseTreeToken.cs
+antlr-runtime/antlr/TreeParserSharedInputState.cs
+antlr-runtime/antlr/ASTFactory.cs
+antlr-runtime/antlr/ANTLRException.cs

Added: trunk/src/nmodule.snk
===================================================================
(Binary files differ)


Property changes on: trunk/src/nmodule.snk
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From urilith at sheep.berlios.de  Mon Jun 27 03:50:47 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Mon, 27 Jun 2005 03:50:47 +0200
Subject: [nmodule-commits] r27 - in trunk: . src/NModule.Core.Loader
Message-ID: <200506270150.j5R1olpT021118@sheep.berlios.de>

Author: urilith
Date: 2005-06-27 03:50:22 +0200 (Mon, 27 Jun 2005)
New Revision: 27

Modified:
   trunk/
   trunk/ChangeLog
   trunk/TODO
   trunk/src/NModule.Core.Loader/ModuleController.cs
Log:
 r124 at dreamshadow:  urilith | 2005-06-26 20:50:08 -0500
 2005-06-26 Michael Tindal <urilith at gentoo.org>
 
   * TODO: Added.
   * src/NModule.Core.Loader/ModuleController.cs: Updated.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:122
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:124

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-24 04:09:17 UTC (rev 26)
+++ trunk/ChangeLog	2005-06-27 01:50:22 UTC (rev 27)
@@ -1,3 +1,8 @@
+2005-06-26 Michael Tindal <urilith at gentoo.org>
+
+	* TODO: Added.
+	* src/NModule.Core.Loader/ModuleController.cs: Updated.
+
 2005-06-23 Michael Tindal <urilith at gentoo.org>
 
 	* src/Buildfile: New build file for mbuild system.

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2005-06-24 04:09:17 UTC (rev 26)
+++ trunk/TODO	2005-06-27 01:50:22 UTC (rev 27)
@@ -0,0 +1,46 @@
+0.2 release:
+
+  - Write nant build scripts.  mbuild works, but its only available from mono's svn, and I'm not sure it runs on
+    other runtimes.  So 0.2 will distribute a nant build file.
+  - Write Unit Tests.  The following areas need to be checked:
+
+    - Loading
+    - Unloading
+    - Loading w/ Dependency Resolution
+    - Unresolved Dependencies
+    - Circular Dependencies
+    - RefCount Unloading
+    - Role registration
+    - Role instantiation
+
+  - Generate monodoc documentation.
+    
+0.3 release:
+  
+  - Write up a MasterModuleController class.  This is what apps will use to handle modules.
+    ModuleController will become a child class of the MasterModuleController, and is set up this way
+    so modules can register new controllers for different roles.
+  - Fix Resolve{,Check} and LoadRawFile so they can load a module of the form [_name]-*.dll.  This will allow
+    versions in names, and multiple concurrent versions (so long as they do not overlay).
+  - Add unit tests for the following:
+
+    - Loading w/ Dependency Resolution on multiple versions
+    - Multiple version blocking
+    - Sub-module controller registration
+    - Sub-module controller delegation
+    - Sub-module controller role registration
+    - Sub-module controller role instantiation
+
+0.4 release:
+
+   - Write entries for monodoc documentation.
+   - Write XML comment stubs.
+
+0.5 release:
+
+   - Provide a ndoc project file.
+   - Document all public/protected classes/members.
+
+0.6+:
+
+   Bug fixes as necessary.

Modified: trunk/src/NModule.Core.Loader/ModuleController.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-24 04:09:17 UTC (rev 26)
+++ trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-27 01:50:22 UTC (rev 27)
@@ -271,5 +271,16 @@
 			}
 		}
 #endregion
+
+#region Properties
+		public ArrayList SearchPath {
+			get {
+				return _search_path;
+			}
+			set {
+				_search_path = value;
+			}
+		}
+#endregion
 	}
 }		



From urilith at sheep.berlios.de  Mon Jun 27 11:23:47 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Mon, 27 Jun 2005 11:23:47 +0200
Subject: [nmodule-commits] r28 - in trunk: . misc src src/NModule.Core src/NModule.Core.Loader src/NModule.Core.Module src/NModule.Dependency.Core src/NModule.Dependency.Parser
Message-ID: <200506270923.j5R9NlTS014685@sheep.berlios.de>

Author: urilith
Date: 2005-06-27 11:23:34 +0200 (Mon, 27 Jun 2005)
New Revision: 28

Modified:
   trunk/
   trunk/Buildfile
   trunk/Buildfile.config
   trunk/ChangeLog
   trunk/misc/bash-copy.hdr
   trunk/misc/cs-copy.hdr
   trunk/misc/svkchangelog
   trunk/misc/svkcommit
   trunk/misc/xml-copy.hdr
   trunk/src/Buildfile
   trunk/src/NModule.Core.Loader/AssemblyInfo.cs
   trunk/src/NModule.Core.Loader/CircularDependencyException.cs
   trunk/src/NModule.Core.Loader/DepResolver.cs
   trunk/src/NModule.Core.Loader/DomainStillReferencedException.cs
   trunk/src/NModule.Core.Loader/InvalidModuleException.cs
   trunk/src/NModule.Core.Loader/ModuleController.cs
   trunk/src/NModule.Core.Loader/ModuleImageException.cs
   trunk/src/NModule.Core.Loader/ModuleLoader.cs
   trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs
   trunk/src/NModule.Core.Loader/UnresolvedDependencyException.cs
   trunk/src/NModule.Core.Module/AssemblyInfo.cs
   trunk/src/NModule.Core.Module/ModuleInfo.cs
   trunk/src/NModule.Core.Module/ModuleInfoException.cs
   trunk/src/NModule.Core.Module/ModuleRole.cs
   trunk/src/NModule.Core/AssemblyInfo.cs
   trunk/src/NModule.Core/IModule.cs
   trunk/src/NModule.Core/ModuleDependencyAttribute.cs
   trunk/src/NModule.Core/ModuleRoleAttribute.cs
   trunk/src/NModule.Dependency.Core/AssemblyInfo.cs
   trunk/src/NModule.Dependency.Core/DepConstraint.cs
   trunk/src/NModule.Dependency.Core/DepNode.cs
   trunk/src/NModule.Dependency.Core/DepOps.cs
   trunk/src/NModule.Dependency.Core/DepVersion.cs
   trunk/src/NModule.Dependency.Parser/AssemblyInfo.cs
   trunk/src/NModule.Dependency.Parser/DepLexer.cs
   trunk/src/NModule.Dependency.Parser/DepParser.cs
   trunk/src/NModule.Dependency.Parser/DepParserTokenTypes.cs
   trunk/src/NModule.Dependency.Parser/nmodule-dep.g
Log:
 r126 at dreamshadow:  urilith | 2005-06-27 04:22:28 -0500
 2005-06-27 Michael Tindal <urilith at gentoo.org>
 
   * Buildfile: Copyright.
   * Buildfile.config: Copyright.
   * misc/bash-copy.hdr: Copyright.
   * misc/cs-copy.hdr: Copyright.
   * misc/svkchangelog: Copyright.
   * misc/svkcommit: Copyright.
   * misc/xml-copy.hdr: Copyright.
   * src/Buildfile: Copyright.
   * src/NModule.Core/AssemblyInfo.cs: Copyright.
   * src/NModule.Core/IModule.cs: Copyright.
   * src/NModule.Core/ModuleDependencyAttribute.cs: Copyright.
   * src/NModule.Core/ModuleRoleAttribute.cs: Copyright.
   * src/NModule.Core.Loader/AssemblyInfo.cs: Copyright.
   * src/NModule.Core.Loader/CircularDependencyException.cs: Copyright.
   * src/NModule.Core.Loader/DepResolver.cs: Copyright.
   * src/NModule.Core.Loader/DomainStillReferencedException.cs: Copyright.
   * src/NModule.Core.Loader/InvalidModuleException.cs: Copyright.
   * src/NModule.Core.Loader/ModuleController.cs: Copyright.
   * src/NModule.Core.Loader/ModuleImageException.cs: Copyright.
   * src/NModule.Core.Loader/ModuleLoader.cs: Copyright.
   * src/NModule.Core.Loader/ModuleNotFoundException.cs: Copyright.
   * src/NModule.Core.Loader/UnresolvedDependencyException.cs: Copyright.
   * src/NModule.Core.Module/AssemblyInfo.cs: Copyright.
   * src/NModule.Core.Module/ModuleInfo.cs: Copyright.
   * src/NModule.Core.Module/ModuleInfoException.cs: Copyright.
   * src/NModule.Core.Module/ModuleRole.cs: Copyright.
   * src/NModule.Dependency.Core/AssemblyInfo.cs: Copyright.
   * src/NModule.Dependency.Core/DepConstraint.cs: Copyright.
   * src/NModule.Dependency.Core/DepNode.cs: Copyright.
   * src/NModule.Dependency.Core/DepOps.cs: Copyright.
   * src/NModule.Dependency.Core/DepVersion.cs: Copyright.
   * src/NModule.Dependency.Parser/AssemblyInfo.cs: Copyright.
   * src/NModule.Dependency.Parser/DepLexer.cs: Copyright.
   * src/NModule.Dependency.Parser/DepParser.cs: Copyright.
   * src/NModule.Dependency.Parser/DepParserTokenTypes.cs: Copyright.
   * src/NModule.Dependency.Parser/nmodule-dep.g: Copyright.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:124
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:126

Modified: trunk/Buildfile
===================================================================
--- trunk/Buildfile	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/Buildfile	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,3 +1,32 @@
+#
+# Buildfile
+#
+# Author:
+#     Michael Tindal <urilith at gentoo.org>
+#
+# Copyright (C) 2005 Michael Tindal and the individuals listed on
+# the ChangeLog entries.
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+# 
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+# 
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
 using [ Core
 	Core.Clr
 	Core.Install
@@ -11,24 +40,8 @@
 	name = nmodule
 	version = 0.1.0.0
 
-	# This is a 'compatibility code'; a standard piece
-	# of text that should be munged into names
-	# of installed files if you want to be able
-	# to do parallel installs. For instance, header files
-	# should be installed into ${includedir}/${name}-${compat-code}.
-	# More to the point, there should be infrastructure
-	# to make this easy. More useful is /config/env/compat_name,
-	# which is the string "${name}-${compat-code}". For instance,
-	# our assemblies are installed with a Mono gacutil 'package'
-	# of compat_name. Anyway, typically this should be the upper
-	# two pieces of the version number, but you can choose
-	# something else if you want.
-
 	compat-code = 0.1
 
-	# Versioned assembly references pulled
-	# from the GAC. No more aclocal hell!
-
 	ref [ 
 		Languages.CSharp = 0.0.4.0
 		Tools.Jay = 0.0.4.0
@@ -38,24 +51,12 @@
 	]
 ]
 
-# Load a separate file of configuration options
-# in a virtual prefix
-
 load Buildfile.config inside config/nmodule
 
-# There are also Buildfiles in these
-# subdirectories.
-
 subdirs [
 	src
 ]
 
-# Back to regular compiles. Monkeywrench is the on-disk implementation
-# of mbuild logic: it has the parser for this file, code to cache results
-# in files, etc.
- 
-# for now, this is how we do our version of EXTRA_DIST
-
 TODO = TextSource[] 
 	with [ install = /config/nmodule/doc_installer ]
 README = TextSource[] 

Modified: trunk/Buildfile.config
===================================================================
--- trunk/Buildfile.config	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/Buildfile.config	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,3 +1,32 @@
+#
+# Buildfile
+#
+# Author:
+#     Michael Tindal <urilith at gentoo.org>
+#
+# Copyright (C) 2005 Michael Tindal and the individuals listed on
+# the ChangeLog entries.
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+# 
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+# 
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
 using [ 
 	Core
 	Core.Config 

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/ChangeLog	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,3 +1,42 @@
+2005-06-27 Michael Tindal <urilith at gentoo.org>
+
+	* Buildfile: Copyright.
+	* Buildfile.config: Copyright.
+	* misc/bash-copy.hdr: Copyright.
+	* misc/cs-copy.hdr: Copyright.
+	* misc/svkchangelog: Copyright.
+	* misc/svkcommit: Copyright.
+	* misc/xml-copy.hdr: Copyright.
+	* src/Buildfile: Copyright.
+	* src/NModule.Core/AssemblyInfo.cs: Copyright.
+	* src/NModule.Core/IModule.cs: Copyright.
+	* src/NModule.Core/ModuleDependencyAttribute.cs: Copyright.
+	* src/NModule.Core/ModuleRoleAttribute.cs: Copyright.
+	* src/NModule.Core.Loader/AssemblyInfo.cs: Copyright.
+	* src/NModule.Core.Loader/CircularDependencyException.cs: Copyright.
+	* src/NModule.Core.Loader/DepResolver.cs: Copyright.
+	* src/NModule.Core.Loader/DomainStillReferencedException.cs: Copyright.
+	* src/NModule.Core.Loader/InvalidModuleException.cs: Copyright.
+	* src/NModule.Core.Loader/ModuleController.cs: Copyright.
+	* src/NModule.Core.Loader/ModuleImageException.cs: Copyright.
+	* src/NModule.Core.Loader/ModuleLoader.cs: Copyright.
+	* src/NModule.Core.Loader/ModuleNotFoundException.cs: Copyright.
+	* src/NModule.Core.Loader/UnresolvedDependencyException.cs: Copyright.
+	* src/NModule.Core.Module/AssemblyInfo.cs: Copyright.
+	* src/NModule.Core.Module/ModuleInfo.cs: Copyright.
+	* src/NModule.Core.Module/ModuleInfoException.cs: Copyright.
+	* src/NModule.Core.Module/ModuleRole.cs: Copyright.
+	* src/NModule.Dependency.Core/AssemblyInfo.cs: Copyright.
+	* src/NModule.Dependency.Core/DepConstraint.cs: Copyright.
+	* src/NModule.Dependency.Core/DepNode.cs: Copyright.
+	* src/NModule.Dependency.Core/DepOps.cs: Copyright.
+	* src/NModule.Dependency.Core/DepVersion.cs: Copyright.
+	* src/NModule.Dependency.Parser/AssemblyInfo.cs: Copyright.
+	* src/NModule.Dependency.Parser/DepLexer.cs: Copyright.
+	* src/NModule.Dependency.Parser/DepParser.cs: Copyright.
+	* src/NModule.Dependency.Parser/DepParserTokenTypes.cs: Copyright.
+	* src/NModule.Dependency.Parser/nmodule-dep.g: Copyright.
+
 2005-06-26 Michael Tindal <urilith at gentoo.org>
 
 	* TODO: Added.

Modified: trunk/misc/bash-copy.hdr
===================================================================
--- trunk/misc/bash-copy.hdr	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/misc/bash-copy.hdr	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,24 +1,29 @@
-##########################################################################
-# Copyright (c) 2005 Michael Tindal and the individuals listed           #
-# on the ChangeLog entries.                                              #
-#                                                                        #
-# Permission is hereby granted, free of charge, to any person obtaining  #
-# a copy of this software and associated documentation files (the        #
-# "Software"), to deal in the Software without restriction, including    #
-# without limitation the rights to use, copy, modify, merge, publish,    #
-# distribute, sublicense, and/or sell copies of the Software, and to     #
-# permit persons to whom the Software is furnished to do so, subject to  #
-# the following conditions:                                              #
-#                                                                        #
-# The above copyright notice and this permission notice shall be         #
-# included in all copies or substantial portions of the Software.        #
-#                                                                        #
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        #
-# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     #
-# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  #
-# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE #
-# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION #
-# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  #
-# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        #
-##########################################################################
+#
+# filename.cs
+#
+# Author:
+#     Joe Bloe <jbloe at email.com>
+#
+# Copyright (C) 2005 Michael Tindal and the individuals listed on
+# the ChangeLog entries.
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+# 
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+# 
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
 

Modified: trunk/misc/cs-copy.hdr
===================================================================
--- trunk/misc/cs-copy.hdr	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/misc/cs-copy.hdr	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,24 +1,28 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions:                                              *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
-
+//
+// filename.cs
+//
+// Author:
+//     Joe Bloe <jbloe at email.com>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
\ No newline at end of file

Modified: trunk/misc/svkchangelog
===================================================================
--- trunk/misc/svkchangelog	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/misc/svkchangelog	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,6 +1,33 @@
 #!/bin/bash
+# svkchangelog
+#
+# Author:
+#     Michael Tindal <urilith at gentoo.org>
+#
+# Copyright (C) 2005 Michael Tindal and the individuals listed on
+# the ChangeLog entries.
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+# 
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+# 
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
 
-mv ChangeLog .ChangeLog.sch
+mv ChangeLog .ChangeLog.tmp
 
 echo "$(date "+%Y-%m-%d") $SVKCNAME <$SVKEMAIL>" > ChangeLog
 echo >> ChangeLog
@@ -13,8 +40,8 @@
 
 echo "" >> ChangeLog
 
-cat .ChangeLog.sch >> ChangeLog
+cat .ChangeLog.tmp >> ChangeLog
 
-rm -f .ChangeLog.sch .tmp-list
+rm -f .ChangeLog.tmp .tmp-list
 
 

Modified: trunk/misc/svkcommit
===================================================================
--- trunk/misc/svkcommit	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/misc/svkcommit	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,7 +1,34 @@
 #!/bin/bash
+#
+# svkcommit
+#
+# Author:
+#     Michael Tindal <urilith at gentoo.org>
+#
+# Copyright (C) 2005 Michael Tindal and the individuals listed on
+# the ChangeLog entries.
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+# 
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+# 
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
 
 n=0
-instar=0
 
 while read -a target; do
         if [ -z "${target}" -a $n -gt 1 ]; then

Modified: trunk/misc/xml-copy.hdr
===================================================================
--- trunk/misc/xml-copy.hdr	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/misc/xml-copy.hdr	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,24 +1,28 @@
 <!--
- Copyright (c) 2005 Michael Tindal and the individuals listed
- on the ChangeLog entries.
+filename.cs
 
- Permission is hereby granted, free of charge, to any person obtaining
- a copy of this software and associated documentation files (the
- "Software"), to deal in the Software without restriction, including
- without limitation the rights to use, copy, modify, merge, publish,
- distribute, sublicense, and/or sell copies of the Software, and to
- permit persons to whom the Software is furnished to do so, subject to
- the following conditions:
- 
- The above copyright notice and this permission notice shall be
- included in all copies or substantial portions of the Software.
- 
- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
- LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
- OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
- WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
+Author:
+    Joe Bloe <jbloe at email.com>
 
+Copyright (C) 2005 Michael Tindal and the individuals listed on
+the ChangeLog entries.
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
\ No newline at end of file

Modified: trunk/src/Buildfile
===================================================================
--- trunk/src/Buildfile	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/Buildfile	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,3 +1,32 @@
+#
+# Buildfile
+#
+# Author:
+#     Michael Tindal <urilith at gentoo.org>
+#
+# Copyright (C) 2005 Michael Tindal and the individuals listed on
+# the ChangeLog entries.
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+# 
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+# 
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
 using [ Core
         Core.Clr
         Core.Install
@@ -2,3 +31,2 @@
         Languages.CSharp
-        Tools.Bundlegen
 ]
@@ -28,19 +56,6 @@
 	]
 ]
 
-# Load a response file to get the list of sources
-# Use a custom installer that installs the DLL into
-# the GAC, not just libdir. Also use a set of compiler
-# options defined in Buildfile.config
-
-# Now we declare "bundles", sets of rules used by mbuild. They
-# are generated with a special tool called mb-bundlegen.exe.
-# Bundlegen makes it so you don't need to worry about writing a 
-# lot of boilerplate code to create new build rules.
-
-# Now, declare all the bundles. Again, install them into
-# the GAC, not into libdir
-
 NModule.Core.dll = [
 	@NModule.Core.dll.sources
 	nmodule.snk

Modified: trunk/src/NModule.Core/AssemblyInfo.cs
===================================================================
--- trunk/src/NModule.Core/AssemblyInfo.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core/AssemblyInfo.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,3 +1,32 @@
+//
+// AssemblyInfo.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
 using System.Reflection;
 using System.Runtime.CompilerServices;
 
@@ -7,12 +36,12 @@
 // change them to the information which is associated with the assembly
 // you compile.
 
-[assembly: AssemblyTitle("")]
-[assembly: AssemblyDescription("")]
+[assembly: AssemblyTitle("NModule.Core")]
+[assembly: AssemblyDescription("Basic Core Facilities for NModule.")]
 [assembly: AssemblyConfiguration("")]
 [assembly: AssemblyCompany("")]
-[assembly: AssemblyProduct("")]
-[assembly: AssemblyCopyright("")]
+[assembly: AssemblyProduct("NModule")]
+[assembly: AssemblyCopyright("Copyright (C) 2005 Michael Tindal and Individuals listed on the ChangeLog entries.")]
 [assembly: AssemblyTrademark("")]
 [assembly: AssemblyCulture("")]
 

Modified: trunk/src/NModule.Core/IModule.cs
===================================================================
--- trunk/src/NModule.Core/IModule.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core/IModule.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// IModule.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 using System;
 

Modified: trunk/src/NModule.Core/ModuleDependencyAttribute.cs
===================================================================
--- trunk/src/NModule.Core/ModuleDependencyAttribute.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core/ModuleDependencyAttribute.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,32 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ModuleDependencyAttribute.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
  
 namespace NModule.Core {
 	using System;

Modified: trunk/src/NModule.Core/ModuleRoleAttribute.cs
===================================================================
--- trunk/src/NModule.Core/ModuleRoleAttribute.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core/ModuleRoleAttribute.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,32 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ModuleRoleAttribute.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
  
 namespace NModule.Core {
 	using System;

Modified: trunk/src/NModule.Core.Loader/AssemblyInfo.cs
===================================================================
--- trunk/src/NModule.Core.Loader/AssemblyInfo.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Loader/AssemblyInfo.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// AssemblyInfo.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
 
 using System.Reflection;
 using System.Runtime.CompilerServices;

Modified: trunk/src/NModule.Core.Loader/CircularDependencyException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/CircularDependencyException.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Loader/CircularDependencyException.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// CircularDependencyException.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 namespace NModule.Dependency.Resolver {
 	using System;

Modified: trunk/src/NModule.Core.Loader/DepResolver.cs
===================================================================
--- trunk/src/NModule.Core.Loader/DepResolver.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Loader/DepResolver.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// DepResolver.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
 
 namespace NModule.Dependency.Resolver {
 	using System;

Modified: trunk/src/NModule.Core.Loader/DomainStillReferencedException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/DomainStillReferencedException.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Loader/DomainStillReferencedException.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// DomainStillReferencedException.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 namespace NModule.Core.Module {
 	using System;

Modified: trunk/src/NModule.Core.Loader/InvalidModuleException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/InvalidModuleException.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Loader/InvalidModuleException.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// InvalidModuleException.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 namespace NModule.Core.Loader {
 	using System;

Modified: trunk/src/NModule.Core.Loader/ModuleController.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ModuleController.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 using System;
 using System.Collections;

Modified: trunk/src/NModule.Core.Loader/ModuleImageException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleImageException.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Loader/ModuleImageException.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ModuleImageException.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 namespace NModule.Core.Loader {
 	using System;

Modified: trunk/src/NModule.Core.Loader/ModuleLoader.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ModuleLoader.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 using System;
 using System.Collections;

Modified: trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Loader/ModuleNotFoundException.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ModuleNotFoundException.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 namespace NModule.Core.Loader {
 	using System;

Modified: trunk/src/NModule.Core.Loader/UnresolvedDependencyException.cs
===================================================================
--- trunk/src/NModule.Core.Loader/UnresolvedDependencyException.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Loader/UnresolvedDependencyException.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// UnresolvedDependencyException.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 namespace NModule.Dependency.Resolver {
 	using System;

Modified: trunk/src/NModule.Core.Module/AssemblyInfo.cs
===================================================================
--- trunk/src/NModule.Core.Module/AssemblyInfo.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Module/AssemblyInfo.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// AssemblyInfo.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
 
 using System.Reflection;
 using System.Runtime.CompilerServices;

Modified: trunk/src/NModule.Core.Module/ModuleInfo.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ModuleInfo.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
 
 namespace NModule.Core.Module {
 	using System;

Modified: trunk/src/NModule.Core.Module/ModuleInfoException.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleInfoException.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Module/ModuleInfoException.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ModuleInfoException.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 namespace NModule.Core.Module {
 	using System;

Modified: trunk/src/NModule.Core.Module/ModuleRole.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleRole.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Core.Module/ModuleRole.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ModuleRole.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 using System;
 using System.Collections;

Modified: trunk/src/NModule.Dependency.Core/AssemblyInfo.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/AssemblyInfo.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Dependency.Core/AssemblyInfo.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// AssemblyInfo.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
 
 using System.Reflection;
 using System.Runtime.CompilerServices;

Modified: trunk/src/NModule.Dependency.Core/DepConstraint.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/DepConstraint.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Dependency.Core/DepConstraint.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// DepConstraint.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
 
 using System;
 using System.Collections;

Modified: trunk/src/NModule.Dependency.Core/DepNode.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/DepNode.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Dependency.Core/DepNode.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// DepNode.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
 
 using System;
 using System.Collections;

Modified: trunk/src/NModule.Dependency.Core/DepOps.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/DepOps.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Dependency.Core/DepOps.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// DepOps.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
 
 namespace NModule.Dependency.Core {
 	public enum DepOps { Not, And, Or, Xor, Opt, Equal, NotEqual, LessThanEqual, LessThan, GreaterThanEqual, GreaterThan, Loaded };

Modified: trunk/src/NModule.Dependency.Core/DepVersion.cs
===================================================================
--- trunk/src/NModule.Dependency.Core/DepVersion.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Dependency.Core/DepVersion.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// DepVersion.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
 
 namespace NModule.Dependency.Core {
 	using System;

Modified: trunk/src/NModule.Dependency.Parser/AssemblyInfo.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/AssemblyInfo.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Dependency.Parser/AssemblyInfo.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,26 +1,31 @@
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// AssemblyInfo.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
 
 using System.Reflection;
 using System.Runtime.CompilerServices;

Modified: trunk/src/NModule.Dependency.Parser/DepLexer.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepLexer.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Dependency.Parser/DepLexer.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,28 +1,33 @@
 // $ANTLR 2.7.5 (20050516): "nmodule-dep.g" -> "DepLexer.cs"$
 
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ANTLR Generated Files.
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 using NModule.Dependency.Core;
 

Modified: trunk/src/NModule.Dependency.Parser/DepParser.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepParser.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Dependency.Parser/DepParser.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,28 +1,33 @@
 // $ANTLR 2.7.5 (20050516): "nmodule-dep.g" -> "DepParser.cs"$
 
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ANTLR Generated Files.
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 using NModule.Dependency.Core;
 

Modified: trunk/src/NModule.Dependency.Parser/DepParserTokenTypes.cs
===================================================================
--- trunk/src/NModule.Dependency.Parser/DepParserTokenTypes.cs	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Dependency.Parser/DepParserTokenTypes.cs	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,28 +1,33 @@
 // $ANTLR 2.7.5 (20050516): "nmodule-dep.g" -> "DepParser.cs"$
 
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ANTLR Generated Files.
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 using NModule.Dependency.Core;
 

Modified: trunk/src/NModule.Dependency.Parser/nmodule-dep.g
===================================================================
--- trunk/src/NModule.Dependency.Parser/nmodule-dep.g	2005-06-27 01:50:22 UTC (rev 27)
+++ trunk/src/NModule.Dependency.Parser/nmodule-dep.g	2005-06-27 09:23:34 UTC (rev 28)
@@ -1,28 +1,62 @@
+//
+// nmodule-dep.g
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
 header
 {
-/**************************************************************************
- * Copyright (c) 2005 Michael Tindal and the individuals listed           *
- * on the ChangeLog entries.                                              *
- *                                                                        *
- * Permission is hereby granted, free of charge, to any person obtaining  *
- * a copy of this software and associated documentation files (the        *
- * "Software"), to deal in the Software without restriction, including    *
- * without limitation the rights to use, copy, modify, merge, publish,    *
- * distribute, sublicense, and/or sell copies of the Software, and to     *
- * permit persons to whom the Software is furnished to do so, subject to  *
- * the following conditions                                               *
- *                                                                        *
- * The above copyright notice and this permission notice shall be         *
- * included in all copies or substantial portions of the Software.        *
- *                                                                        *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        *
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     *
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                  *
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE *
- * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION *
- * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  *
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        *
- **************************************************************************/
+//
+// ANTLR Generated Files.
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
  
 using NModule.Dependency.Core;
 }



From urilith at sheep.berlios.de  Mon Jun 27 13:00:12 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Mon, 27 Jun 2005 13:00:12 +0200
Subject: [nmodule-commits] r29 - in trunk: . api-docs api-docs/en api-docs/en/NModule.Core api-docs/en/NModule.Core.Module api-docs/en/NModule.Dependency.Core api-docs/en/NModule.Dependency.Resolver
Message-ID: <200506271100.j5RB0CXn002789@sheep.berlios.de>

Author: urilith
Date: 2005-06-27 13:00:02 +0200 (Mon, 27 Jun 2005)
New Revision: 29

Added:
   trunk/api-docs/
   trunk/api-docs/en/
   trunk/api-docs/en/NModule.Core.Module.xml
   trunk/api-docs/en/NModule.Core.Module/
   trunk/api-docs/en/NModule.Core.Module/DomainStillReferencedException.xml
   trunk/api-docs/en/NModule.Core.Module/ModuleInfo.xml
   trunk/api-docs/en/NModule.Core.Module/ModuleInfoException.xml
   trunk/api-docs/en/NModule.Core.Module/ModuleRole.xml
   trunk/api-docs/en/NModule.Core.Module/RoleRegisterHandler.xml
   trunk/api-docs/en/NModule.Core.Module/RoleUnregisterHandler.xml
   trunk/api-docs/en/NModule.Core.xml
   trunk/api-docs/en/NModule.Core/
   trunk/api-docs/en/NModule.Core/IModule.xml
   trunk/api-docs/en/NModule.Core/ModuleDependencyAttribute.xml
   trunk/api-docs/en/NModule.Core/ModuleRoleAttribute.xml
   trunk/api-docs/en/NModule.Dependency.Core.xml
   trunk/api-docs/en/NModule.Dependency.Core/
   trunk/api-docs/en/NModule.Dependency.Core/DepConstraint.xml
   trunk/api-docs/en/NModule.Dependency.Core/DepNode.xml
   trunk/api-docs/en/NModule.Dependency.Core/DepOps.xml
   trunk/api-docs/en/NModule.Dependency.Core/DepVersion.xml
   trunk/api-docs/en/NModule.Dependency.Resolver.xml
   trunk/api-docs/en/NModule.Dependency.Resolver/
   trunk/api-docs/en/NModule.Dependency.Resolver/CircularDependencyException.xml
   trunk/api-docs/en/NModule.Dependency.Resolver/DepResolver.xml
   trunk/api-docs/en/NModule.Dependency.Resolver/UnresolvedDependencyException.xml
   trunk/api-docs/en/index.xml
Modified:
   trunk/
   trunk/ChangeLog
   trunk/nmodule.mds
Log:
 r128 at dreamshadow:  urilith | 2005-06-27 05:59:32 -0500
 2005-06-27 Michael Tindal <urilith at gentoo.org>
 
   * api-docs: New directory with monodoc generated docs.
   * api-docs/en: English API docs. Generated.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:126
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:128

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/ChangeLog	2005-06-27 11:00:02 UTC (rev 29)
@@ -1,5 +1,10 @@
 2005-06-27 Michael Tindal <urilith at gentoo.org>
 
+	* api-docs: New directory with monodoc generated docs.
+	* api-docs/en: English API docs.  Generated.
+
+2005-06-27 Michael Tindal <urilith at gentoo.org>
+
 	* Buildfile: Copyright.
 	* Buildfile.config: Copyright.
 	* misc/bash-copy.hdr: Copyright.

Added: trunk/api-docs/en/NModule.Core/IModule.xml
===================================================================
--- trunk/api-docs/en/NModule.Core/IModule.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Core/IModule.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,44 @@
+<Type Name="IModule" FullName="NModule.Core.IModule">
+  <TypeSignature Language="C#" Value="public interface IModule" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Core</AssemblyName>
+    <AssemblyVersion>1.0.2004.7700</AssemblyVersion>
+  </AssemblyInfo>
+  <Interfaces />
+  <Members>
+    <Member MemberName="ModuleEntry">
+      <MemberSignature Language="C#" Value="public void ModuleEntry (object controller);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="controller" Type="System.Object" />
+      </Parameters>
+      <Docs>
+        <param name="controller">An object of type ModuleController the module can use to register new roles.</param>
+        <summary>The ModuleEntry method is called upon loading the module, so the module can perform initialization tasks, such as registering new roles.</summary>
+        <remarks>This method also marks the main entry point of the module.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="ModuleExit">
+      <MemberSignature Language="C#" Value="public void ModuleExit (object controller);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="controller" Type="System.Object" />
+      </Parameters>
+      <Docs>
+        <param name="controller">An object of type ModuleController the module can use to unregister any roles it has registered..</param>
+        <summary>The ModuleExit method is called before a module is unloaded.  This can be used to do any finalization, such as unregistering roles previously registered using the ModuleEntry method..</summary>
+        <remarks>This method is also part of the main entry point class of the module..</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>The IModule interface is used to mark the main class of a module, and contains methods for entry/exit handlers.</summary>
+    <remarks>A Module should only contain one type that implements the IModule interface.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Core/ModuleDependencyAttribute.xml
===================================================================
--- trunk/api-docs/en/NModule.Core/ModuleDependencyAttribute.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Core/ModuleDependencyAttribute.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,52 @@
+<Type Name="ModuleDependencyAttribute" FullName="NModule.Core.ModuleDependencyAttribute">
+  <TypeSignature Language="C#" Value="public class ModuleDependencyAttribute : System.Attribute" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Core</AssemblyName>
+    <AssemblyVersion>1.0.2004.7700</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Attribute</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public ModuleDependencyAttribute (string dep_string);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="dep_string" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="dep_string">The string representation of the dependency to be fed to the parser.</param>
+        <summary>Constructs a new ModuleDependencyAttribute object..</summary>
+        <remarks>No remarks.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="_dep_string">
+      <MemberSignature Language="C#" Value="protected string _dep_string;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Protected version of the dep string..</summary>
+        <remarks>No remarks..</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="DepString">
+      <MemberSignature Language="C#" Value="public string DepString { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Accessing property for the dep string..</summary>
+        <value>String describing the modules dependencies.</value>
+        <remarks>No remarks..</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>The ModuleDependencyAttribute is used at the assembly level to specify the module's dependencies..</summary>
+    <remarks>No remarks.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Core/ModuleRoleAttribute.xml
===================================================================
--- trunk/api-docs/en/NModule.Core/ModuleRoleAttribute.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Core/ModuleRoleAttribute.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,52 @@
+<Type Name="ModuleRoleAttribute" FullName="NModule.Core.ModuleRoleAttribute">
+  <TypeSignature Language="C#" Value="public class ModuleRoleAttribute : System.Attribute" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Core</AssemblyName>
+    <AssemblyVersion>1.0.2004.7700</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Attribute</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public ModuleRoleAttribute (string role);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="role" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="role">A comma-seperated list of roles.</param>
+        <summary>Creates a new ModuleRoleAttribute object.</summary>
+        <remarks>No remarks.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="_roles">
+      <MemberSignature Language="C#" Value="protected string _roles;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Internal representation of the role string passed ot the constructor.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Roles">
+      <MemberSignature Language="C#" Value="public string Roles { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Public accessor to get the role string.</summary>
+        <value>A comma-seperated list of roles.</value>
+        <remarks>No remarks..</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>Attribute used to tell the controller what roles this module fulfills.</summary>
+    <remarks>No remarks.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Core.Module/DomainStillReferencedException.xml
===================================================================
--- trunk/api-docs/en/NModule.Core.Module/DomainStillReferencedException.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Core.Module/DomainStillReferencedException.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,52 @@
+<Type Name="DomainStillReferencedException" FullName="NModule.Core.Module.DomainStillReferencedException">
+  <TypeSignature Language="C#" Value="public class DomainStillReferencedException : System.Exception" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Core.Loader</AssemblyName>
+    <AssemblyVersion>0.1.2004.7742</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Exception</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public DomainStillReferencedException ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public DomainStillReferencedException (string _msg);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="_msg" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="_msg">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public DomainStillReferencedException (string _msg, Exception _exc);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="_msg" Type="System.String" />
+        <Parameter Name="_exc" Type="System.Exception" />
+      </Parameters>
+      <Docs>
+        <param name="_msg">To be added.</param>
+        <param name="_exc">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Core.Module/ModuleInfo.xml
===================================================================
--- trunk/api-docs/en/NModule.Core.Module/ModuleInfo.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Core.Module/ModuleInfo.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,144 @@
+<Type Name="ModuleInfo" FullName="NModule.Core.Module.ModuleInfo">
+  <TypeSignature Language="C#" Value="public class ModuleInfo" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Core.Module</AssemblyName>
+    <AssemblyVersion>0.1.2004.7734</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public ModuleInfo (System.Reflection.Assembly _asm);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="_asm" Type="System.Reflection.Assembly" />
+      </Parameters>
+      <Docs>
+        <param name="_asm">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="_name">
+      <MemberSignature Language="C#" Value="protected string _name;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="_version">
+      <MemberSignature Language="C#" Value="protected NModule.Dependency.Core.DepVersion _version;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepVersion</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="_dependencies">
+      <MemberSignature Language="C#" Value="protected NModule.Dependency.Core.DepNode _dependencies;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepNode</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="_roles">
+      <MemberSignature Language="C#" Value="protected string _roles;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="_owner">
+      <MemberSignature Language="C#" Value="protected System.Reflection.Assembly _owner;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Reflection.Assembly</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Name">
+      <MemberSignature Language="C#" Value="public string Name { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Version">
+      <MemberSignature Language="C#" Value="public NModule.Dependency.Core.DepVersion Version { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepVersion</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Dependencies">
+      <MemberSignature Language="C#" Value="public NModule.Dependency.Core.DepNode Dependencies { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepNode</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Roles">
+      <MemberSignature Language="C#" Value="public string Roles { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Owner">
+      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Owner { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Reflection.Assembly</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Core.Module/ModuleInfoException.xml
===================================================================
--- trunk/api-docs/en/NModule.Core.Module/ModuleInfoException.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Core.Module/ModuleInfoException.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,52 @@
+<Type Name="ModuleInfoException" FullName="NModule.Core.Module.ModuleInfoException">
+  <TypeSignature Language="C#" Value="public class ModuleInfoException : System.Exception" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Core.Module</AssemblyName>
+    <AssemblyVersion>0.1.2004.7734</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Exception</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public ModuleInfoException ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public ModuleInfoException (string _msg);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="_msg" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="_msg">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public ModuleInfoException (string _msg, Exception _exc);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="_msg" Type="System.String" />
+        <Parameter Name="_exc" Type="System.Exception" />
+      </Parameters>
+      <Docs>
+        <param name="_msg">To be added.</param>
+        <param name="_exc">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Core.Module/ModuleRole.xml
===================================================================
--- trunk/api-docs/en/NModule.Core.Module/ModuleRole.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Core.Module/ModuleRole.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,83 @@
+<Type Name="ModuleRole" FullName="NModule.Core.Module.ModuleRole">
+  <TypeSignature Language="C#" Value="public class ModuleRole" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Core.Module</AssemblyName>
+    <AssemblyVersion>0.1.2004.7734</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public ModuleRole (string name, Type basetype, NModule.Core.Module.RoleRegisterHandler regHandler, NModule.Core.Module.RoleUnregisterHandler unregHandler);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="name" Type="System.String" />
+        <Parameter Name="basetype" Type="System.Type" />
+        <Parameter Name="regHandler" Type="NModule.Core.Module.RoleRegisterHandler" />
+        <Parameter Name="unregHandler" Type="NModule.Core.Module.RoleUnregisterHandler" />
+      </Parameters>
+      <Docs>
+        <param name="name">To be added.</param>
+        <param name="basetype">To be added.</param>
+        <param name="regHandler">To be added.</param>
+        <param name="unregHandler">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="BaseType">
+      <MemberSignature Language="C#" Value="public Type BaseType { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Type</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="RoleName">
+      <MemberSignature Language="C#" Value="public string RoleName { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="RegistrationHandler">
+      <MemberSignature Language="C#" Value="public NModule.Core.Module.RoleRegisterHandler RegistrationHandler { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Core.Module.RoleRegisterHandler</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="UnregistrationHandler">
+      <MemberSignature Language="C#" Value="public NModule.Core.Module.RoleUnregisterHandler UnregistrationHandler { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Core.Module.RoleUnregisterHandler</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Core.Module/RoleRegisterHandler.xml
===================================================================
--- trunk/api-docs/en/NModule.Core.Module/RoleRegisterHandler.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Core.Module/RoleRegisterHandler.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,23 @@
+<Type Name="RoleRegisterHandler" FullName="NModule.Core.Module.RoleRegisterHandler">
+  <TypeSignature Language="C#" Value="public delegate void RoleRegisterHandler(System.Reflection.Assembly asm, Type basetype);" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Core.Module</AssemblyName>
+    <AssemblyVersion>0.1.2004.7734</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Parameters>
+    <Parameter Name="asm" Type="System.Reflection.Assembly" />
+    <Parameter Name="basetype" Type="System.Type" />
+  </Parameters>
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Docs>
+    <param name="asm">To be added.</param>
+    <param name="basetype">To be added.</param>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Core.Module/RoleUnregisterHandler.xml
===================================================================
--- trunk/api-docs/en/NModule.Core.Module/RoleUnregisterHandler.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Core.Module/RoleUnregisterHandler.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,21 @@
+<Type Name="RoleUnregisterHandler" FullName="NModule.Core.Module.RoleUnregisterHandler">
+  <TypeSignature Language="C#" Value="public delegate void RoleUnregisterHandler(System.Reflection.Assembly asm);" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Core.Module</AssemblyName>
+    <AssemblyVersion>0.1.2004.7734</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Parameters>
+    <Parameter Name="asm" Type="System.Reflection.Assembly" />
+  </Parameters>
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Docs>
+    <param name="asm">To be added.</param>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Core.Module.xml
===================================================================
--- trunk/api-docs/en/NModule.Core.Module.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Core.Module.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,6 @@
+<Namespace Name="NModule.Core.Module">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>

Added: trunk/api-docs/en/NModule.Core.xml
===================================================================
--- trunk/api-docs/en/NModule.Core.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Core.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,6 @@
+<Namespace Name="NModule.Core">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>

Added: trunk/api-docs/en/NModule.Dependency.Core/DepConstraint.xml
===================================================================
--- trunk/api-docs/en/NModule.Dependency.Core/DepConstraint.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Dependency.Core/DepConstraint.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,62 @@
+<Type Name="DepConstraint" FullName="NModule.Dependency.Core.DepConstraint">
+  <TypeSignature Language="C#" Value="public class DepConstraint" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Dependency.Core</AssemblyName>
+    <AssemblyVersion>0.1.2004.7706</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public DepConstraint ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Version">
+      <MemberSignature Language="C#" Value="public NModule.Dependency.Core.DepVersion Version { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepVersion</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Name">
+      <MemberSignature Language="C#" Value="public string Name { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="VersionTmp">
+      <MemberSignature Language="C#" Value="public string VersionTmp { set; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Dependency.Core/DepNode.xml
===================================================================
--- trunk/api-docs/en/NModule.Dependency.Core/DepNode.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Dependency.Core/DepNode.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,99 @@
+<Type Name="DepNode" FullName="NModule.Dependency.Core.DepNode">
+  <TypeSignature Language="C#" Value="public class DepNode" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Dependency.Core</AssemblyName>
+    <AssemblyVersion>0.1.2004.7706</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public DepNode ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public DepNode (NModule.Dependency.Core.DepNode parent);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="parent" Type="NModule.Dependency.Core.DepNode" />
+      </Parameters>
+      <Docs>
+        <param name="parent">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="CreateNewChild">
+      <MemberSignature Language="C#" Value="public NModule.Dependency.Core.DepNode CreateNewChild ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepNode</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <returns>To be added.</returns>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Parent">
+      <MemberSignature Language="C#" Value="public NModule.Dependency.Core.DepNode Parent { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepNode</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Children">
+      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Children { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="DepOp">
+      <MemberSignature Language="C#" Value="public NModule.Dependency.Core.DepOps DepOp { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Constraint">
+      <MemberSignature Language="C#" Value="public NModule.Dependency.Core.DepConstraint Constraint { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepConstraint</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Dependency.Core/DepOps.xml
===================================================================
--- trunk/api-docs/en/NModule.Dependency.Core/DepOps.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Dependency.Core/DepOps.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,136 @@
+<Type Name="DepOps" FullName="NModule.Dependency.Core.DepOps">
+  <TypeSignature Language="C#" Value="public enum DepOps" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Dependency.Core</AssemblyName>
+    <AssemblyVersion>0.1.2004.7706</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Enum</BaseTypeName>
+  </Base>
+  <Members>
+    <Member MemberName="Not">
+      <MemberSignature Language="C#" Value="Not" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+      </Docs>
+    </Member>
+    <Member MemberName="And">
+      <MemberSignature Language="C#" Value="And" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+      </Docs>
+    </Member>
+    <Member MemberName="Or">
+      <MemberSignature Language="C#" Value="Or" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+      </Docs>
+    </Member>
+    <Member MemberName="Xor">
+      <MemberSignature Language="C#" Value="Xor" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+      </Docs>
+    </Member>
+    <Member MemberName="Opt">
+      <MemberSignature Language="C#" Value="Opt" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+      </Docs>
+    </Member>
+    <Member MemberName="Equal">
+      <MemberSignature Language="C#" Value="Equal" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+      </Docs>
+    </Member>
+    <Member MemberName="NotEqual">
+      <MemberSignature Language="C#" Value="NotEqual" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+      </Docs>
+    </Member>
+    <Member MemberName="LessThanEqual">
+      <MemberSignature Language="C#" Value="LessThanEqual" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+      </Docs>
+    </Member>
+    <Member MemberName="LessThan">
+      <MemberSignature Language="C#" Value="LessThan" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+      </Docs>
+    </Member>
+    <Member MemberName="GreaterThanEqual">
+      <MemberSignature Language="C#" Value="GreaterThanEqual" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+      </Docs>
+    </Member>
+    <Member MemberName="GreaterThan">
+      <MemberSignature Language="C#" Value="GreaterThan" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+      </Docs>
+    </Member>
+    <Member MemberName="Loaded">
+      <MemberSignature Language="C#" Value="Loaded" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepOps</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Dependency.Core/DepVersion.xml
===================================================================
--- trunk/api-docs/en/NModule.Dependency.Core/DepVersion.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Dependency.Core/DepVersion.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,138 @@
+<Type Name="DepVersion" FullName="NModule.Dependency.Core.DepVersion">
+  <TypeSignature Language="C#" Value="public class DepVersion" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Dependency.Core</AssemblyName>
+    <AssemblyVersion>0.1.2004.7706</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public DepVersion (int major, int minor, int build, int revision);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="major" Type="System.Int32" />
+        <Parameter Name="minor" Type="System.Int32" />
+        <Parameter Name="build" Type="System.Int32" />
+        <Parameter Name="revision" Type="System.Int32" />
+      </Parameters>
+      <Docs>
+        <param name="major">To be added.</param>
+        <param name="minor">To be added.</param>
+        <param name="build">To be added.</param>
+        <param name="revision">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public DepVersion (int major, int minor, int build);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="major" Type="System.Int32" />
+        <Parameter Name="minor" Type="System.Int32" />
+        <Parameter Name="build" Type="System.Int32" />
+      </Parameters>
+      <Docs>
+        <param name="major">To be added.</param>
+        <param name="minor">To be added.</param>
+        <param name="build">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public DepVersion (int major, int minor);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="major" Type="System.Int32" />
+        <Parameter Name="minor" Type="System.Int32" />
+      </Parameters>
+      <Docs>
+        <param name="major">To be added.</param>
+        <param name="minor">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public DepVersion ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="VersionParse">
+      <MemberSignature Language="C#" Value="public static NModule.Dependency.Core.DepVersion VersionParse (string v);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Dependency.Core.DepVersion</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="v" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="v">To be added.</param>
+        <summary>To be added.</summary>
+        <returns>To be added.</returns>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Major">
+      <MemberSignature Language="C#" Value="public int Major { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Minor">
+      <MemberSignature Language="C#" Value="public int Minor { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Build">
+      <MemberSignature Language="C#" Value="public int Build { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Revision">
+      <MemberSignature Language="C#" Value="public int Revision { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Dependency.Core.xml
===================================================================
--- trunk/api-docs/en/NModule.Dependency.Core.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Dependency.Core.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,6 @@
+<Namespace Name="NModule.Dependency.Core">
+  <Docs>
+    <summary>Dependency classes not directly related to the parser.</summary>
+    <remarks>This assembly contains classes describing a dependency node, version, and constraint.</remarks>
+  </Docs>
+</Namespace>

Added: trunk/api-docs/en/NModule.Dependency.Resolver/CircularDependencyException.xml
===================================================================
--- trunk/api-docs/en/NModule.Dependency.Resolver/CircularDependencyException.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Dependency.Resolver/CircularDependencyException.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,52 @@
+<Type Name="CircularDependencyException" FullName="NModule.Dependency.Resolver.CircularDependencyException">
+  <TypeSignature Language="C#" Value="public class CircularDependencyException : System.Exception" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Core.Loader</AssemblyName>
+    <AssemblyVersion>0.1.2004.7742</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Exception</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public CircularDependencyException ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>Creates a new CircularDependencyException object.</summary>
+        <remarks>No remarks.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public CircularDependencyException (string _msg);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="_msg" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="_msg">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public CircularDependencyException (string _msg, Exception _exc);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="_msg" Type="System.String" />
+        <Parameter Name="_exc" Type="System.Exception" />
+      </Parameters>
+      <Docs>
+        <param name="_msg">To be added.</param>
+        <param name="_exc">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Dependency.Resolver/DepResolver.xml
===================================================================
--- trunk/api-docs/en/NModule.Dependency.Resolver/DepResolver.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Dependency.Resolver/DepResolver.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,195 @@
+<Type Name="DepResolver" FullName="NModule.Dependency.Resolver.DepResolver">
+  <TypeSignature Language="C#" Value="public class DepResolver" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Core.Loader</AssemblyName>
+    <AssemblyVersion>0.1.2004.7742</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public DepResolver (NModule.Core.Loader.ModuleController controller, System.Collections.ArrayList search_path);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="controller" Type="NModule.Core.Loader.ModuleController" />
+        <Parameter Name="search_path" Type="System.Collections.ArrayList" />
+      </Parameters>
+      <Docs>
+        <param name="controller">To be added.</param>
+        <param name="search_path">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="_controller">
+      <MemberSignature Language="C#" Value="protected NModule.Core.Loader.ModuleController _controller;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>NModule.Core.Loader.ModuleController</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="_search_path">
+      <MemberSignature Language="C#" Value="protected System.Collections.ArrayList _search_path;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Collections.ArrayList</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SearchForModule">
+      <MemberSignature Language="C#" Value="protected string SearchForModule (string _name);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="_name" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="_name">To be added.</param>
+        <summary>To be added.</summary>
+        <returns>To be added.</returns>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="OpResolve">
+      <MemberSignature Language="C#" Value="protected void OpResolve (NModule.Dependency.Core.DepNode _node, System.Collections.ArrayList _parents, NModule.Core.Module.ModuleInfo _info, bool checking);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="_node" Type="NModule.Dependency.Core.DepNode" />
+        <Parameter Name="_parents" Type="System.Collections.ArrayList" />
+        <Parameter Name="_info" Type="NModule.Core.Module.ModuleInfo" />
+        <Parameter Name="checking" Type="System.Boolean" />
+      </Parameters>
+      <Docs>
+        <param name="_node">To be added.</param>
+        <param name="_parents">To be added.</param>
+        <param name="_info">To be added.</param>
+        <param name="checking">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="OpToString">
+      <MemberSignature Language="C#" Value="protected string OpToString (NModule.Dependency.Core.DepOps _op);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="_op" Type="NModule.Dependency.Core.DepOps" />
+      </Parameters>
+      <Docs>
+        <param name="_op">To be added.</param>
+        <summary>To be added.</summary>
+        <returns>To be added.</returns>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="IsEmptyVersion">
+      <MemberSignature Language="C#" Value="protected bool IsEmptyVersion (NModule.Dependency.Core.DepVersion _ver);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="_ver" Type="NModule.Dependency.Core.DepVersion" />
+      </Parameters>
+      <Docs>
+        <param name="_ver">To be added.</param>
+        <summary>To be added.</summary>
+        <returns>To be added.</returns>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="VersionMatch">
+      <MemberSignature Language="C#" Value="protected bool VersionMatch (NModule.Dependency.Core.DepVersion _dver, NModule.Dependency.Core.DepVersion _ver, NModule.Dependency.Core.DepOps _op);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="_dver" Type="NModule.Dependency.Core.DepVersion" />
+        <Parameter Name="_ver" Type="NModule.Dependency.Core.DepVersion" />
+        <Parameter Name="_op" Type="NModule.Dependency.Core.DepOps" />
+      </Parameters>
+      <Docs>
+        <param name="_dver">To be added.</param>
+        <param name="_ver">To be added.</param>
+        <param name="_op">To be added.</param>
+        <summary>To be added.</summary>
+        <returns>To be added.</returns>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="InternalResolve">
+      <MemberSignature Language="C#" Value="protected void InternalResolve (System.Collections.ArrayList _parents, NModule.Core.Module.ModuleInfo _info, bool checking);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="_parents" Type="System.Collections.ArrayList" />
+        <Parameter Name="_info" Type="NModule.Core.Module.ModuleInfo" />
+        <Parameter Name="checking" Type="System.Boolean" />
+      </Parameters>
+      <Docs>
+        <param name="_parents">To be added.</param>
+        <param name="_info">To be added.</param>
+        <param name="checking">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="ResolveCheck">
+      <MemberSignature Language="C#" Value="public void ResolveCheck (System.Collections.ArrayList _parents, NModule.Core.Module.ModuleInfo _info);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="_parents" Type="System.Collections.ArrayList" />
+        <Parameter Name="_info" Type="NModule.Core.Module.ModuleInfo" />
+      </Parameters>
+      <Docs>
+        <param name="_parents">To be added.</param>
+        <param name="_info">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Resolve">
+      <MemberSignature Language="C#" Value="public void Resolve (System.Collections.ArrayList _parents, NModule.Core.Module.ModuleInfo _info);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="_parents" Type="System.Collections.ArrayList" />
+        <Parameter Name="_info" Type="NModule.Core.Module.ModuleInfo" />
+      </Parameters>
+      <Docs>
+        <param name="_parents">To be added.</param>
+        <param name="_info">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Dependency.Resolver/UnresolvedDependencyException.xml
===================================================================
--- trunk/api-docs/en/NModule.Dependency.Resolver/UnresolvedDependencyException.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Dependency.Resolver/UnresolvedDependencyException.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,52 @@
+<Type Name="UnresolvedDependencyException" FullName="NModule.Dependency.Resolver.UnresolvedDependencyException">
+  <TypeSignature Language="C#" Value="public class UnresolvedDependencyException : System.Exception" />
+  <AssemblyInfo>
+    <AssemblyName>NModule.Core.Loader</AssemblyName>
+    <AssemblyVersion>0.1.2004.7742</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Exception</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public UnresolvedDependencyException ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>Creates a new UnresolvedDependencyException.</summary>
+        <remarks>No remarks.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public UnresolvedDependencyException (string _msg);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="_msg" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="_msg">The exception message.</param>
+        <summary>Creates a new UnresolvedDependencyException with the given message.</summary>
+        <remarks>No remarks.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public UnresolvedDependencyException (string _msg, Exception _exc);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="_msg" Type="System.String" />
+        <Parameter Name="_exc" Type="System.Exception" />
+      </Parameters>
+      <Docs>
+        <param name="_msg">The exception message.</param>
+        <param name="_exc">Parent exception object.</param>
+        <summary>Creates a new UnresolvedDependencyException with the given message and parent exception.</summary>
+        <remarks>No remarks.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>This exception is thrown when a dependency cannot be resolved by the dependency resolver.</summary>
+    <remarks>No remarks.</remarks>
+  </Docs>
+</Type>

Added: trunk/api-docs/en/NModule.Dependency.Resolver.xml
===================================================================
--- trunk/api-docs/en/NModule.Dependency.Resolver.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/NModule.Dependency.Resolver.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,6 @@
+<Namespace Name="NModule.Dependency.Resolver">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>

Added: trunk/api-docs/en/index.xml
===================================================================
--- trunk/api-docs/en/index.xml	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/api-docs/en/index.xml	2005-06-27 11:00:02 UTC (rev 29)
@@ -0,0 +1,152 @@
+<Overview>
+  <Assemblies>
+    <Assembly Name="NModule.Core" Version="1.0.2004.7700">
+      <Attributes>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyCulture(Culture="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyTrademark(Trademark="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyCopyright(Copyright="Copyright (C) 2005 Michael Tindal and Individuals listed on the ChangeLog entries.")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyProduct(Product="NModule")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyCompany(Company="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyConfiguration(Configuration="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyDescription(Description="Basic Core Facilities for NModule.")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyTitle(Title="NModule.Core")</AttributeName>
+        </Attribute>
+      </Attributes>
+    </Assembly>
+    <Assembly Name="NModule.Core.Loader" Version="0.1.2004.7742">
+      <Attributes>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyCulture(Culture="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyTrademark(Trademark="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyCopyright(Copyright="Copyright (C) 2005 Michael Tindal and Contributors")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyProduct(Product="NModule")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyCompany(Company="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyConfiguration(Configuration="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyDescription(Description="NModule Loader Facilities (not including Dependency Resolution)")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyTitle(Title="NModule.Core.Loader")</AttributeName>
+        </Attribute>
+      </Attributes>
+    </Assembly>
+    <Assembly Name="NModule.Core.Module" Version="0.1.2004.7734">
+      <Attributes>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyCulture(Culture="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyTrademark(Trademark="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyCopyright(Copyright="Copyright (C) 2005 Michael Tindal and Contributors")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyProduct(Product="NModule")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyCompany(Company="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyConfiguration(Configuration="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyDescription(Description="NModule Module Representation Library")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyTitle(Title="NModule.Core.Module")</AttributeName>
+        </Attribute>
+      </Attributes>
+    </Assembly>
+    <Assembly Name="NModule.Dependency.Core" Version="0.1.2004.7706">
+      <Attributes>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyCulture(Culture="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyTrademark(Trademark="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyCopyright(Copyright="Copyright (C) 2005 Michael Tindal and Contributors")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyProduct(Product="NModule")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyCompany(Company="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyConfiguration(Configuration="")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyDescription(Description="NModule Dependency Core")</AttributeName>
+        </Attribute>
+        <Attribute>
+          <AttributeName>System.Reflection.AssemblyTitle(Title="NModule.Dependency.Core")</AttributeName>
+        </Attribute>
+      </Attributes>
+    </Assembly>
+  </Assemblies>
+  <Remarks>To be added.</Remarks>
+  <Copyright>To be added.</Copyright>
+  <Types>
+    <Namespace Name="NModule.Core">
+      <Type Name="IModule" />
+      <Type Name="ModuleDependencyAttribute" />
+      <Type Name="ModuleRoleAttribute" />
+    </Namespace>
+    <Namespace Name="NModule.Dependency.Resolver">
+      <Type Name="CircularDependencyException" />
+      <Type Name="UnresolvedDependencyException" />
+      <Type Name="DepResolver" />
+    </Namespace>
+    <Namespace Name="NModule.Core.Loader">
+      <Type Name="ModuleController" />
+      <Type Name="ModuleImageException" />
+      <Type Name="ModuleLoader" />
+      <Type Name="ModuleNotFoundException" />
+      <Type Name="InvalidModuleException" />
+    </Namespace>
+    <Namespace Name="NModule.Core.Module">
+      <Type Name="DomainStillReferencedException" />
+      <Type Name="ModuleRole" />
+      <Type Name="ModuleInfo" />
+      <Type Name="ModuleInfoException" />
+      <Type Name="RoleRegisterHandler" />
+      <Type Name="RoleUnregisterHandler" />
+    </Namespace>
+    <Namespace Name="NModule.Dependency.Core">
+      <Type Name="DepConstraint" />
+      <Type Name="DepNode" />
+      <Type Name="DepVersion" />
+      <Type Name="DepOps" />
+    </Namespace>
+  </Types>
+  <Title>NModule Plug-in Framework</Title>
+</Overview>

Modified: trunk/nmodule.mds
===================================================================
--- trunk/nmodule.mds	2005-06-27 09:23:34 UTC (rev 28)
+++ trunk/nmodule.mds	2005-06-27 11:00:02 UTC (rev 29)
@@ -3,33 +3,33 @@
     <Configuration name="Debug" ctype="CombineConfiguration">
       <Entry build="True" name="NModule.Dependency.Parser" />
       <Entry build="True" name="NModule.Dependency.Parser" />
-      <Entry build="True" name="NModule.Core.Loader" />
       <Entry build="True" name="NModule.Core.Module" />
       <Entry build="True" name="NModule.Dependency.Core" />
       <Entry build="True" name="NModule.Core" />
+      <Entry build="True" name="NModule.Core.Loader" />
     </Configuration>
     <Configuration name="Release" ctype="CombineConfiguration">
       <Entry build="True" name="NModule.Dependency.Parser" />
       <Entry build="True" name="NModule.Dependency.Parser" />
-      <Entry build="True" name="NModule.Core.Loader" />
       <Entry build="True" name="NModule.Core.Module" />
       <Entry build="True" name="NModule.Dependency.Core" />
       <Entry build="True" name="NModule.Core" />
+      <Entry build="True" name="NModule.Core.Loader" />
     </Configuration>
   </Configurations>
   <StartMode startupentry="NModule.Dependency.Parser" single="True">
     <Execute type="None" entry="NModule.Dependency.Parser" />
     <Execute type="None" entry="NModule.Dependency.Parser" />
-    <Execute type="None" entry="NModule.Core.Loader" />
     <Execute type="None" entry="NModule.Core.Module" />
     <Execute type="None" entry="NModule.Dependency.Core" />
     <Execute type="None" entry="NModule.Core" />
+    <Execute type="None" entry="NModule.Core.Loader" />
   </StartMode>
   <Entries>
     <Entry filename="./src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp" />
-    <Entry filename="./src/NModule.Core.Loader/NModule.Core.Loader.mdp" />
     <Entry filename="./src/NModule.Core.Module/NModule.Core.Module.mdp" />
     <Entry filename="./src/NModule.Dependency.Core/NModule.Dependency.Core.mdp" />
     <Entry filename="./src/NModule.Core/NModule.Core.mdp" />
+    <Entry filename="./src/NModule.Core.Loader/NModule.Core.Loader.mdp" />
   </Entries>
 </Combine>
\ No newline at end of file



From urilith at sheep.berlios.de  Mon Jun 27 22:37:28 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Mon, 27 Jun 2005 22:37:28 +0200
Subject: [nmodule-commits] r30 - in trunk: . src/NModule.Core
Message-ID: <200506272037.j5RKbSkH006140@sheep.berlios.de>

Author: urilith
Date: 2005-06-27 22:37:28 +0200 (Mon, 27 Jun 2005)
New Revision: 30

Modified:
   trunk/
   trunk/ChangeLog
   trunk/src/NModule.Core/ModuleDependencyAttribute.cs
   trunk/src/NModule.Core/ModuleRoleAttribute.cs
Log:
 r130 at dreamshadow:  urilith | 2005-06-27 15:37:10 -0500
 2005-06-27 Michael Tindal <urilith at gentoo.org>
 
   * src/NModule.Core/ModuleDependencyAttribute.cs: Make assembly level attribute.
   * src/NModule.Core/ModuleRoleAttribute.cs: Same.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:128
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:130

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-27 11:00:02 UTC (rev 29)
+++ trunk/ChangeLog	2005-06-27 20:37:28 UTC (rev 30)
@@ -1,5 +1,10 @@
 2005-06-27 Michael Tindal <urilith at gentoo.org>
 
+	* src/NModule.Core/ModuleDependencyAttribute.cs: Make assembly level attribute.
+	* src/NModule.Core/ModuleRoleAttribute.cs: Same.
+
+2005-06-27 Michael Tindal <urilith at gentoo.org>
+
 	* api-docs: New directory with monodoc generated docs.
 	* api-docs/en: English API docs.  Generated.
 

Modified: trunk/src/NModule.Core/ModuleDependencyAttribute.cs
===================================================================
--- trunk/src/NModule.Core/ModuleDependencyAttribute.cs	2005-06-27 11:00:02 UTC (rev 29)
+++ trunk/src/NModule.Core/ModuleDependencyAttribute.cs	2005-06-27 20:37:28 UTC (rev 30)
@@ -31,6 +31,7 @@
 namespace NModule.Core {
 	using System;
 	
+	[AttributeUsage(AttributeTargets.Assembly)]
 	public class ModuleDependencyAttribute : Attribute {
 		protected string _dep_string;
 		

Modified: trunk/src/NModule.Core/ModuleRoleAttribute.cs
===================================================================
--- trunk/src/NModule.Core/ModuleRoleAttribute.cs	2005-06-27 11:00:02 UTC (rev 29)
+++ trunk/src/NModule.Core/ModuleRoleAttribute.cs	2005-06-27 20:37:28 UTC (rev 30)
@@ -31,6 +31,7 @@
 namespace NModule.Core {
 	using System;
 	
+	[AttributeUsage(AttributeTargets.Assembly)]
 	public class ModuleRoleAttribute : Attribute {
 		protected string _roles;
 		



From urilith at sheep.berlios.de  Wed Jun 29 13:58:56 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Wed, 29 Jun 2005 13:58:56 +0200
Subject: [nmodule-commits] r31 - in trunk: . src/NModule.Core.Loader src/NModule.Core.Module src/NModule.Dependency.Parser test test/NModule.Core.Test test/NModule.Core.Test/data test/NModule.Core.Test/data/nm-ld test/NModule.Core.Test/data/test test/NModule.Core.Test/data/test/nm-ld test/NModule.Core.Test/data/test/nm-ul
Message-ID: <200506291158.j5TBwutC010232@sheep.berlios.de>

Author: urilith
Date: 2005-06-29 13:58:54 +0200 (Wed, 29 Jun 2005)
New Revision: 31

Added:
   trunk/test/NModule.Core.Test/
   trunk/test/NModule.Core.Test/AssemblyInfo.cs
   trunk/test/NModule.Core.Test/NModule.Core.Test.mdp
   trunk/test/NModule.Core.Test/NModule.Core.Test.mds
   trunk/test/NModule.Core.Test/TESTS
   trunk/test/NModule.Core.Test/TestResult.xml
   trunk/test/NModule.Core.Test/data/
   trunk/test/NModule.Core.Test/data/nm-ld-2/
   trunk/test/NModule.Core.Test/data/nm-ld-3/
   trunk/test/NModule.Core.Test/data/nm-ld/
   trunk/test/NModule.Core.Test/data/nm-ld/refs
   trunk/test/NModule.Core.Test/data/nm-ul/
   trunk/test/NModule.Core.Test/data/refs
   trunk/test/NModule.Core.Test/data/test/
   trunk/test/NModule.Core.Test/data/test/nm-ld/
   trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-01.cs
   trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-03.cs
   trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-04.cs
   trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-05.cs
   trunk/test/NModule.Core.Test/data/test/nm-ul/
   trunk/test/NModule.Core.Test/data/test/nm-ul/nm-ul-01.cs
   trunk/test/NModule.Core.Test/data/test/nm-ul/nm-ul-02.cs
   trunk/test/NModule.Core.Test/nm-ld.cs
   trunk/test/NModule.Core.Test/refs
Modified:
   trunk/
   trunk/ChangeLog
   trunk/nmodule.mds
   trunk/src/NModule.Core.Loader/ModuleLoader.cs
   trunk/src/NModule.Core.Module/ModuleInfo.cs
   trunk/src/NModule.Dependency.Parser/nmodule-dep.g
Log:
 r132 at dreamshadow:  urilith | 2005-06-29 06:55:47 -0500
 2005-06-29 Michael Tindal <urilith at gentoo.org>
 
   * Random fixes to all of the below to fix some bugs, also added the first two components of the test suite.
   * Further work is blocking on a Mono AppDomain bug.
   * nmodule.mds:
   * src/NModule.Core.Loader/ModuleLoader.cs:
   * src/NModule.Core.Module/ModuleInfo.cs:
   * src/NModule.Dependency.Parser/nmodule-dep.g:
   * test/Data:
   * test/NModuleTest.cs:
   * test/NModule.Core.Test:
   * test/NModule.Core.Test/AssemblyInfo.cs:
   * test/NModule.Core.Test/NModule.Core.Test.mdp:
   * test/NModule.Core.Test/NModule.Core.Test.mds:
   * test/NModule.Core.Test/TESTS:
   * test/NModule.Core.Test/TestResult.xml:
   * test/NModule.Core.Test/data:
   * test/NModule.Core.Test/data/nm-ld:
   * test/NModule.Core.Test/data/nm-ld/refs:
   * test/NModule.Core.Test/data/nm-ld-2:
   * test/NModule.Core.Test/data/nm-ld-3:
   * test/NModule.Core.Test/data/nm-ul:
   * test/NModule.Core.Test/data/refs:
   * test/NModule.Core.Test/data/test:
   * test/NModule.Core.Test/data/test/nm-ld:
   * test/NModule.Core.Test/data/test/nm-ld/nm-ld-01.cs:
   * test/NModule.Core.Test/data/test/nm-ld/nm-ld-03.cs:
   * test/NModule.Core.Test/data/test/nm-ld/nm-ld-04.cs:
   * test/NModule.Core.Test/data/test/nm-ld/nm-ld-05.cs:
   * test/NModule.Core.Test/data/test/nm-ul:
   * test/NModule.Core.Test/data/test/nm-ul/nm-ul-01.cs:
   * test/NModule.Core.Test/data/test/nm-ul/nm-ul-02.cs:
   * test/NModule.Core.Test/nm-ld.cs:
   * test/NModule.Core.Test/refs:
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:130
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:132

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/ChangeLog	2005-06-29 11:58:54 UTC (rev 31)
@@ -1,3 +1,38 @@
+2005-06-29 Michael Tindal <urilith at gentoo.org>
+
+	* Random fixes to all of the below to fix some bugs, also added the first two components of the test suite.
+	* Further work is blocking on a Mono AppDomain bug.
+	* nmodule.mds: 
+	* src/NModule.Core.Loader/ModuleLoader.cs: 
+	* src/NModule.Core.Module/ModuleInfo.cs: 
+	* src/NModule.Dependency.Parser/nmodule-dep.g: 
+	* test/Data: 
+	* test/NModuleTest.cs: 
+	* test/NModule.Core.Test: 
+	* test/NModule.Core.Test/AssemblyInfo.cs: 
+	* test/NModule.Core.Test/NModule.Core.Test.mdp: 
+	* test/NModule.Core.Test/NModule.Core.Test.mds: 
+	* test/NModule.Core.Test/TESTS: 
+	* test/NModule.Core.Test/TestResult.xml: 
+	* test/NModule.Core.Test/data: 
+	* test/NModule.Core.Test/data/nm-ld: 
+	* test/NModule.Core.Test/data/nm-ld/refs: 
+	* test/NModule.Core.Test/data/nm-ld-2: 
+	* test/NModule.Core.Test/data/nm-ld-3: 
+	* test/NModule.Core.Test/data/nm-ul: 
+	* test/NModule.Core.Test/data/refs: 
+	* test/NModule.Core.Test/data/test: 
+	* test/NModule.Core.Test/data/test/nm-ld: 
+	* test/NModule.Core.Test/data/test/nm-ld/nm-ld-01.cs: 
+	* test/NModule.Core.Test/data/test/nm-ld/nm-ld-03.cs: 
+	* test/NModule.Core.Test/data/test/nm-ld/nm-ld-04.cs: 
+	* test/NModule.Core.Test/data/test/nm-ld/nm-ld-05.cs: 
+	* test/NModule.Core.Test/data/test/nm-ul: 
+	* test/NModule.Core.Test/data/test/nm-ul/nm-ul-01.cs: 
+	* test/NModule.Core.Test/data/test/nm-ul/nm-ul-02.cs: 
+	* test/NModule.Core.Test/nm-ld.cs: 
+	* test/NModule.Core.Test/refs: 
+
 2005-06-27 Michael Tindal <urilith at gentoo.org>
 
 	* src/NModule.Core/ModuleDependencyAttribute.cs: Make assembly level attribute.

Modified: trunk/nmodule.mds
===================================================================
--- trunk/nmodule.mds	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/nmodule.mds	2005-06-29 11:58:54 UTC (rev 31)
@@ -7,6 +7,7 @@
       <Entry build="True" name="NModule.Dependency.Core" />
       <Entry build="True" name="NModule.Core" />
       <Entry build="True" name="NModule.Core.Loader" />
+      <Entry build="True" name="NModule.Core.Test" />
     </Configuration>
     <Configuration name="Release" ctype="CombineConfiguration">
       <Entry build="True" name="NModule.Dependency.Parser" />
@@ -15,6 +16,7 @@
       <Entry build="True" name="NModule.Dependency.Core" />
       <Entry build="True" name="NModule.Core" />
       <Entry build="True" name="NModule.Core.Loader" />
+      <Entry build="True" name="NModule.Core.Test" />
     </Configuration>
   </Configurations>
   <StartMode startupentry="NModule.Dependency.Parser" single="True">
@@ -24,6 +26,7 @@
     <Execute type="None" entry="NModule.Dependency.Core" />
     <Execute type="None" entry="NModule.Core" />
     <Execute type="None" entry="NModule.Core.Loader" />
+    <Execute type="None" entry="NModule.Core.Test" />
   </StartMode>
   <Entries>
     <Entry filename="./src/NModule.Dependency.Parser/NModule.Dependency.Parser.mdp" />
@@ -31,5 +34,6 @@
     <Entry filename="./src/NModule.Dependency.Core/NModule.Dependency.Core.mdp" />
     <Entry filename="./src/NModule.Core/NModule.Core.mdp" />
     <Entry filename="./src/NModule.Core.Loader/NModule.Core.Loader.mdp" />
+    <Entry filename="./test/NModule.Core.Test/NModule.Core.Test.mdp" />
   </Entries>
 </Combine>
\ No newline at end of file

Modified: trunk/src/NModule.Core.Loader/ModuleLoader.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/src/NModule.Core.Loader/ModuleLoader.cs	2005-06-29 11:58:54 UTC (rev 31)
@@ -31,6 +31,7 @@
 using System.Collections;
 using System.IO;
 using System.Reflection;
+using System.Runtime.InteropServices;
 using NModule.Dependency.Resolver;
 using NModule.Core.Module;
 
@@ -64,8 +65,11 @@
 			foreach (string s in _search_path) {
 				if (Directory.Exists (s)) {
 					foreach (string f in Directory.GetFiles (s, "*.dll")) {
-						if (f.Substring (0, f.Length - 4) == _name) {
-							return s + "/" + f;
+						string _f = f.Replace (s, "").Replace ("/", "");
+						Console.WriteLine ("Checking {0} against {1} ({2}) (Result: {3})", _name, _f, 
+							_f.Substring (0, _f.Length - 4), (_f.Substring (0, _f.Length - 4) == _name));
+						if (_f.Substring (0, _f.Length - 4) == _name) {
+							return s + "/" + _f;
 						}
 					}
 				}
@@ -73,7 +77,7 @@
 			
 			return null;
 		}
-		 
+		
 		/*
 		 * We provide two method signatures for loading for convienence.  The first just takes the name of the module (minus the .dll extension),
 		 * and attempts to load it.  The second takes a list of parents and the name.  The first incidentally just calls the second with an empty
@@ -103,8 +107,14 @@
 			// need to create the temporary AppDomain and load it to get the info from it.
 			AppDomain _tempDomain = AppDomain.CreateDomain ("_temp_" + _name);
 			
-			byte[] _raw_bytes = LoadRawFile (_filename);
+			// This is dirty.  I hate me.
+			byte[] _raw_bytes = LoadRawFile (_filename);	
 			
+			// set up the search path
+			foreach (string s in _search_path) {
+				_tempDomain.AppendPrivatePath (s);
+			}
+			
 			// The throw here is mostly used from dep resolver calls, although it should also be caught by the immediate caller
 			// (i.e. the application).
 			try {
@@ -151,6 +161,7 @@
 			AppDomain _domain = AppDomain.CreateDomain (_name);
 			
 			// let's load this assembly into the real app domain.
+			Console.WriteLine ("_domain.Load");
 			_domain.Load (_raw_bytes);
 			
 			// We can't do any more with this.

Modified: trunk/src/NModule.Core.Module/ModuleInfo.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-29 11:58:54 UTC (rev 31)
@@ -57,8 +57,14 @@
 			_name = _asm.GetName().Name;
 			_version = DepVersion.VersionParse (_asm.GetName().Version.ToString ());
 			
-			ModuleDependencyAttribute _depAttr = ((ModuleDependencyAttribute)(_asm.GetCustomAttributes (typeof (ModuleDependencyAttribute), false)[0]));
+			ModuleDependencyAttribute _depAttr;
 			
+			try {
+				_depAttr = ((ModuleDependencyAttribute)(_asm.GetCustomAttributes (typeof (ModuleDependencyAttribute), false)[0]));
+			} catch (ArgumentOutOfRangeException e) {
+				_depAttr = null;
+			}
+			
 			if (_depAttr != null) {	
 				DepLexer _lexer = new DepLexer (new StringReader (_depAttr.DepString));
 				DepParser _parser = new DepParser (_lexer);

Modified: trunk/src/NModule.Dependency.Parser/nmodule-dep.g
===================================================================
--- trunk/src/NModule.Dependency.Parser/nmodule-dep.g	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/src/NModule.Dependency.Parser/nmodule-dep.g	2005-06-29 11:58:54 UTC (rev 31)
@@ -176,6 +176,7 @@
 AND: "&&" ;
 OR: "||" ;
 XOR: "^^" ;
+OPT: "??" ;
 
 // Dependency Operators
 EQ: "==" ;
@@ -184,7 +185,6 @@
 LS: "<<" ;
 GTE: ">=" ;
 GT: ">>" ;
-OPT: "??" ;
 LD: "##" ;
 
 // Version

Added: trunk/test/NModule.Core.Test/AssemblyInfo.cs
===================================================================
--- trunk/test/NModule.Core.Test/AssemblyInfo.cs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/AssemblyInfo.cs	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1,32 @@
+using System.Reflection;
+using System.Runtime.CompilerServices;
+
+// Information about this assembly is defined by the following
+// attributes.
+//
+// change them to the information which is associated with the assembly
+// you compile.
+
+[assembly: AssemblyTitle("")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("")]
+[assembly: AssemblyCopyright("")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// The assembly version has following format :
+//
+// Major.Minor.Build.Revision
+//
+// You can specify all values by your own or you can build default build and revision
+// numbers with the '*' character (the default):
+
+[assembly: AssemblyVersion("1.0.*")]
+
+// The following attributes specify the key for the sign of your assembly. See the
+// .NET Framework documentation for more information about signing.
+// This is not required, if you don't want signing let these attributes like they're.
+[assembly: AssemblyDelaySign(false)]
+[assembly: AssemblyKeyFile("")]

Added: trunk/test/NModule.Core.Test/NModule.Core.Test.mdp
===================================================================
--- trunk/test/NModule.Core.Test/NModule.Core.Test.mdp	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/NModule.Core.Test.mdp	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1,32 @@
+<Project name="NModule.Core.Test" fileversion="2.0" language="C#" ctype="DotNetProject">
+  <Configurations>
+    <Configuration name="Debug" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Debug" assembly="NModule.Core.Test" />
+      <Build debugmode="True" target="Library" />
+      <Execution runwithwarnings="True" consolepause="False" runtime="MsNet" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+    <Configuration name="Release" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Release" assembly="NModule.Core.Test" />
+      <Build debugmode="False" target="Library" />
+      <Execution runwithwarnings="True" consolepause="False" runtime="MsNet" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+  </Configurations>
+  <References>
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Parser" />
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Core.Module" />
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Dependency.Core" />
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Core" />
+    <ProjectReference type="Project" localcopy="True" refto="NModule.Core.Loader" />
+    <ProjectReference type="Gac" localcopy="True" refto="nunit.framework, Version=2.2.0.0, Culture=neutral, PublicKeyToken=96d09a1eb7f44a77" />
+  </References>
+  <DeploymentInformation strategy="File">
+    <excludeFiles />
+  </DeploymentInformation>
+  <Contents>
+    <File name="./AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
+    <File name="./TESTS" subtype="Code" buildaction="Compile" />
+    <File name="./nm-ld.cs" subtype="Code" buildaction="Compile" />
+  </Contents>
+</Project>
\ No newline at end of file

Added: trunk/test/NModule.Core.Test/NModule.Core.Test.mds
===================================================================
--- trunk/test/NModule.Core.Test/NModule.Core.Test.mds	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/NModule.Core.Test.mds	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1,16 @@
+<Combine name="NModule.Core.Test" fileversion="2.0">
+  <Configurations>
+    <Configuration name="Debug" ctype="CombineConfiguration">
+      <Entry build="True" name="NModule.Core.Test" />
+    </Configuration>
+    <Configuration name="Release" ctype="CombineConfiguration">
+      <Entry build="True" name="NModule.Core.Test" />
+    </Configuration>
+  </Configurations>
+  <StartMode startupentry="NModule.Core.Test" single="True">
+    <Execute type="None" entry="NModule.Core.Test" />
+  </StartMode>
+  <Entries>
+    <Entry filename="./NModule.Core.Test.mdp" />
+  </Entries>
+</Combine>
\ No newline at end of file

Added: trunk/test/NModule.Core.Test/TESTS
===================================================================
--- trunk/test/NModule.Core.Test/TESTS	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/TESTS	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1,59 @@
+This describes our test suites:
+
+Loading:
+
+nm-ld-01 - Loading with no dependencies, single dir search path.
+nm-ld-02 - Loading with no dependencies, single dir search path, not found.
+nm-ld-03 - Loading with no dependencies, multiple dir search path, first dir.
+nm-ld-04 - Loading with no dependencies, multiple dir search path, middle dir.
+nm-ld-05 - Loading with no dependencies, multiple dir search path, last dir.
+nm-ld-06 - Loading with no dependencies, multiple dir search path, not found.
+ 
+Unloading:
+
+nm-ul-01 - Unloading with no dependencies
+nm-ul-02 - Unloading with ref count > 1
+
+Dependency Resolution:
+
+nm-dr-01 - single entities test
+nm-dr-02 - combination entities test, unnested
+nm-dr-03 - combination entities test, nested
+
+Unresolved Dependencies:
+
+nm-ur-01 - single entities test
+nm-ur-02 - combination entities test, unnested
+nm-ur-03 - combination entities test, nested
+
+Circular Dependencies:
+
+nm-cr-01 - Circular Dependency Test, Direct Parent
+nm-cr-02 - Circular Dependency Test, Nested Parent
+
+RefCount Unloading:
+
+nm-rc-01 - RefCount 1
+nm-rc-02 - RefCount 2
+nm-rc-03 - RefCount 3, unload depending references
+nm-rc-04 - RefCount 1, load a depending reference
+
+Role registration:
+
+nm-rr-01 - Role registration from app
+nm-rr-02 - Role registration from module
+
+Role instantiation:
+
+nm-ri-01 - Instantiate role from app
+nm-ri-02 - Instantiate role from other module
+
+Entry Handlers:
+
+nm-eh-01 - Module entry handler register role, next module instantiate the role
+
+Exit Handlers:
+
+nm-xh-01 - Module entry handler register roles, exit handler unregisters role, next module attempts instantiation
+
+Total this iteration: 26 tests
\ No newline at end of file

Added: trunk/test/NModule.Core.Test/TestResult.xml
===================================================================
--- trunk/test/NModule.Core.Test/TestResult.xml	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/TestResult.xml	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1,194 @@
+<?xml version="1.0" encoding="utf-8" standalone="no"?>
+<!--This file represents the results of running a test suite-->
+<test-results name="/home/urilith/development/nmodule/test/NModule.Core.Test/NModule.Core.Test.dll" total="8" failures="6" not-run="0" date="2005-06-29" time="06:44:34">
+  <test-suite name="/home/urilith/development/nmodule/test/NModule.Core.Test/NModule.Core.Test.dll" success="False" time="8.071" asserts="0">
+    <results>
+      <test-suite name="NModule" success="False" time="8.046" asserts="0">
+        <results>
+          <test-suite name="Core" success="False" time="8.026" asserts="0">
+            <results>
+              <test-suite name="Test" success="False" time="8.008" asserts="0">
+                <results>
+                  <test-suite name="NModuleTests" success="False" time="7.625" asserts="0">
+                    <results>
+                      <test-case name="NModule.Core.Test.NModuleTests.nm_ld_01" executed="True" success="False" time="1.440" asserts="0">
+                        <failure>
+                          <message><![CDATA[System.IO.FileNotFoundException : nm-ld-01, Version=1.0.2005.41104, Culture=neutral]]></message>
+                          <stack-trace><![CDATA[in <0x00000> <unknown method>
+in (wrapper managed-to-native) System.AppDomain:LoadAssembly (string,System.Security.Policy.Evidence,bool)
+in <0x00019> System.AppDomain:Load (System.String assemblyString)
+in (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)
+in <0x0001b> System.Reflection.Assembly:Load (System.String assemblyString)
+in <0x00086> System.UnitySerializationHolder:GetRealObject (StreamingContext context)
+in <0x003c6> System.Runtime.Serialization.ObjectRecord:LoadData (System.Runtime.Serialization.ObjectManager manager, ISurrogateSelector selector, StreamingContext context)
+in <0x00100> System.Runtime.Serialization.ObjectManager:DoFixups ()
+in <0x0003f> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadNextObject (System.IO.BinaryReader reader)
+in <0x000ac> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadObjectGraph (System.IO.BinaryReader reader, Boolean readHeaders, System.Object result, System.Runtime.Remoting.Messaging.Header[] headers)
+in <0x0011c> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler)
+in <0x00012> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream)
+in <0x00051> System.Runtime.Remoting.RemotingServices:DeserializeCallData (System.Byte[] array)
+in (wrapper xdomain-invoke) System.AppDomain:Load (byte[])
+in (wrapper remoting-invoke-with-check) System.AppDomain:Load (byte[])
+in <0x00202> NModule.Core.Loader.ModuleLoader:LoadModule (System.Collections.ArrayList _parents, System.String _name, NModule.Core.Module.ModuleInfo _info, Boolean checking)
+in <0x000d0> NModule.Core.Loader.ModuleController:LoadModule (System.Collections.ArrayList _parents, System.String _name)
+in <0x0000f> NModule.Core.Loader.ModuleController:LoadModule (System.String _name)
+in <0x00053> NModule.Core.Test.NModuleTests:nm_ld_01 ()
+in <0x00000> <unknown method>
+in (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
+in <0x0006f> System.Reflection.MonoMethod:Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
+]]></stack-trace>
+                        </failure>
+                      </test-case>
+                      <test-case name="NModule.Core.Test.NModuleTests.nm_ld_02" executed="True" success="True" time="0.011" asserts="0" />
+                      <test-case name="NModule.Core.Test.NModuleTests.nm_ld_03" executed="True" success="False" time="0.937" asserts="0">
+                        <failure>
+                          <message><![CDATA[System.IO.FileNotFoundException : nm-ld-03, Version=1.0.2005.41104, Culture=neutral]]></message>
+                          <stack-trace><![CDATA[in <0x00000> <unknown method>
+in (wrapper managed-to-native) System.AppDomain:LoadAssembly (string,System.Security.Policy.Evidence,bool)
+in <0x00019> System.AppDomain:Load (System.String assemblyString)
+in (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)
+in <0x0001b> System.Reflection.Assembly:Load (System.String assemblyString)
+in <0x00086> System.UnitySerializationHolder:GetRealObject (StreamingContext context)
+in <0x003c6> System.Runtime.Serialization.ObjectRecord:LoadData (System.Runtime.Serialization.ObjectManager manager, ISurrogateSelector selector, StreamingContext context)
+in <0x00100> System.Runtime.Serialization.ObjectManager:DoFixups ()
+in <0x0003f> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadNextObject (System.IO.BinaryReader reader)
+in <0x000ac> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadObjectGraph (System.IO.BinaryReader reader, Boolean readHeaders, System.Object result, System.Runtime.Remoting.Messaging.Header[] headers)
+in <0x0011c> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler)
+in <0x00012> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream)
+in <0x00051> System.Runtime.Remoting.RemotingServices:DeserializeCallData (System.Byte[] array)
+in (wrapper xdomain-invoke) System.AppDomain:Load (byte[])
+in (wrapper remoting-invoke-with-check) System.AppDomain:Load (byte[])
+in <0x00202> NModule.Core.Loader.ModuleLoader:LoadModule (System.Collections.ArrayList _parents, System.String _name, NModule.Core.Module.ModuleInfo _info, Boolean checking)
+in <0x000d0> NModule.Core.Loader.ModuleController:LoadModule (System.Collections.ArrayList _parents, System.String _name)
+in <0x0000f> NModule.Core.Loader.ModuleController:LoadModule (System.String _name)
+in <0x0008d> NModule.Core.Test.NModuleTests:nm_ld_03 ()
+in <0x00000> <unknown method>
+in (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
+in <0x0006f> System.Reflection.MonoMethod:Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
+]]></stack-trace>
+                        </failure>
+                      </test-case>
+                      <test-case name="NModule.Core.Test.NModuleTests.nm_ld_04" executed="True" success="False" time="0.977" asserts="0">
+                        <failure>
+                          <message><![CDATA[System.IO.FileNotFoundException : nm-ld-04, Version=1.0.2005.41104, Culture=neutral]]></message>
+                          <stack-trace><![CDATA[in <0x00000> <unknown method>
+in (wrapper managed-to-native) System.AppDomain:LoadAssembly (string,System.Security.Policy.Evidence,bool)
+in <0x00019> System.AppDomain:Load (System.String assemblyString)
+in (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)
+in <0x0001b> System.Reflection.Assembly:Load (System.String assemblyString)
+in <0x00086> System.UnitySerializationHolder:GetRealObject (StreamingContext context)
+in <0x003c6> System.Runtime.Serialization.ObjectRecord:LoadData (System.Runtime.Serialization.ObjectManager manager, ISurrogateSelector selector, StreamingContext context)
+in <0x00100> System.Runtime.Serialization.ObjectManager:DoFixups ()
+in <0x0003f> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadNextObject (System.IO.BinaryReader reader)
+in <0x000ac> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadObjectGraph (System.IO.BinaryReader reader, Boolean readHeaders, System.Object result, System.Runtime.Remoting.Messaging.Header[] headers)
+in <0x0011c> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler)
+in <0x00012> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream)
+in <0x00051> System.Runtime.Remoting.RemotingServices:DeserializeCallData (System.Byte[] array)
+in (wrapper xdomain-invoke) System.AppDomain:Load (byte[])
+in (wrapper remoting-invoke-with-check) System.AppDomain:Load (byte[])
+in <0x00202> NModule.Core.Loader.ModuleLoader:LoadModule (System.Collections.ArrayList _parents, System.String _name, NModule.Core.Module.ModuleInfo _info, Boolean checking)
+in <0x000d0> NModule.Core.Loader.ModuleController:LoadModule (System.Collections.ArrayList _parents, System.String _name)
+in <0x0000f> NModule.Core.Loader.ModuleController:LoadModule (System.String _name)
+in <0x0008d> NModule.Core.Test.NModuleTests:nm_ld_04 ()
+in <0x00000> <unknown method>
+in (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
+in <0x0006f> System.Reflection.MonoMethod:Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
+]]></stack-trace>
+                        </failure>
+                      </test-case>
+                      <test-case name="NModule.Core.Test.NModuleTests.nm_ld_05" executed="True" success="False" time="0.983" asserts="0">
+                        <failure>
+                          <message><![CDATA[System.IO.FileNotFoundException : nm-ld-05, Version=1.0.2005.41105, Culture=neutral]]></message>
+                          <stack-trace><![CDATA[in <0x00000> <unknown method>
+in (wrapper managed-to-native) System.AppDomain:LoadAssembly (string,System.Security.Policy.Evidence,bool)
+in <0x00019> System.AppDomain:Load (System.String assemblyString)
+in (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)
+in <0x0001b> System.Reflection.Assembly:Load (System.String assemblyString)
+in <0x00086> System.UnitySerializationHolder:GetRealObject (StreamingContext context)
+in <0x003c6> System.Runtime.Serialization.ObjectRecord:LoadData (System.Runtime.Serialization.ObjectManager manager, ISurrogateSelector selector, StreamingContext context)
+in <0x00100> System.Runtime.Serialization.ObjectManager:DoFixups ()
+in <0x0003f> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadNextObject (System.IO.BinaryReader reader)
+in <0x000ac> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadObjectGraph (System.IO.BinaryReader reader, Boolean readHeaders, System.Object result, System.Runtime.Remoting.Messaging.Header[] headers)
+in <0x0011c> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler)
+in <0x00012> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream)
+in <0x00051> System.Runtime.Remoting.RemotingServices:DeserializeCallData (System.Byte[] array)
+in (wrapper xdomain-invoke) System.AppDomain:Load (byte[])
+in (wrapper remoting-invoke-with-check) System.AppDomain:Load (byte[])
+in <0x00202> NModule.Core.Loader.ModuleLoader:LoadModule (System.Collections.ArrayList _parents, System.String _name, NModule.Core.Module.ModuleInfo _info, Boolean checking)
+in <0x000d0> NModule.Core.Loader.ModuleController:LoadModule (System.Collections.ArrayList _parents, System.String _name)
+in <0x0000f> NModule.Core.Loader.ModuleController:LoadModule (System.String _name)
+in <0x0008d> NModule.Core.Test.NModuleTests:nm_ld_05 ()
+in <0x00000> <unknown method>
+in (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
+in <0x0006f> System.Reflection.MonoMethod:Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
+]]></stack-trace>
+                        </failure>
+                      </test-case>
+                      <test-case name="NModule.Core.Test.NModuleTests.nm_ld_06" executed="True" success="True" time="0.140" asserts="0" />
+                      <test-case name="NModule.Core.Test.NModuleTests.nm_ul_01" executed="True" success="False" time="1.054" asserts="0">
+                        <failure>
+                          <message><![CDATA[System.IO.FileNotFoundException : nm-ul-01, Version=1.0.2005.41123, Culture=neutral]]></message>
+                          <stack-trace><![CDATA[in <0x00000> <unknown method>
+in (wrapper managed-to-native) System.AppDomain:LoadAssembly (string,System.Security.Policy.Evidence,bool)
+in <0x00019> System.AppDomain:Load (System.String assemblyString)
+in (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)
+in <0x0001b> System.Reflection.Assembly:Load (System.String assemblyString)
+in <0x00086> System.UnitySerializationHolder:GetRealObject (StreamingContext context)
+in <0x003c6> System.Runtime.Serialization.ObjectRecord:LoadData (System.Runtime.Serialization.ObjectManager manager, ISurrogateSelector selector, StreamingContext context)
+in <0x00100> System.Runtime.Serialization.ObjectManager:DoFixups ()
+in <0x0003f> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadNextObject (System.IO.BinaryReader reader)
+in <0x000ac> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadObjectGraph (System.IO.BinaryReader reader, Boolean readHeaders, System.Object result, System.Runtime.Remoting.Messaging.Header[] headers)
+in <0x0011c> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler)
+in <0x00012> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream)
+in <0x00051> System.Runtime.Remoting.RemotingServices:DeserializeCallData (System.Byte[] array)
+in (wrapper xdomain-invoke) System.AppDomain:Load (byte[])
+in (wrapper remoting-invoke-with-check) System.AppDomain:Load (byte[])
+in <0x00202> NModule.Core.Loader.ModuleLoader:LoadModule (System.Collections.ArrayList _parents, System.String _name, NModule.Core.Module.ModuleInfo _info, Boolean checking)
+in <0x000d0> NModule.Core.Loader.ModuleController:LoadModule (System.Collections.ArrayList _parents, System.String _name)
+in <0x0000f> NModule.Core.Loader.ModuleController:LoadModule (System.String _name)
+in <0x00053> NModule.Core.Test.NModuleTests:nm_ul_01 ()
+in <0x00000> <unknown method>
+in (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
+in <0x0006f> System.Reflection.MonoMethod:Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
+]]></stack-trace>
+                        </failure>
+                      </test-case>
+                      <test-case name="NModule.Core.Test.NModuleTests.nm_ul_02" executed="True" success="False" time="1.977" asserts="0">
+                        <failure>
+                          <message><![CDATA[Expected: DomainStillReferencedException but was FileNotFoundException]]></message>
+                          <stack-trace><![CDATA[in <0x00000> <unknown method>
+in (wrapper managed-to-native) System.AppDomain:LoadAssembly (string,System.Security.Policy.Evidence,bool)
+in <0x00019> System.AppDomain:Load (System.String assemblyString)
+in (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)
+in <0x0001b> System.Reflection.Assembly:Load (System.String assemblyString)
+in <0x00086> System.UnitySerializationHolder:GetRealObject (StreamingContext context)
+in <0x003c6> System.Runtime.Serialization.ObjectRecord:LoadData (System.Runtime.Serialization.ObjectManager manager, ISurrogateSelector selector, StreamingContext context)
+in <0x00100> System.Runtime.Serialization.ObjectManager:DoFixups ()
+in <0x0003f> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadNextObject (System.IO.BinaryReader reader)
+in <0x000ac> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadObjectGraph (System.IO.BinaryReader reader, Boolean readHeaders, System.Object result, System.Runtime.Remoting.Messaging.Header[] headers)
+in <0x0011c> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler)
+in <0x00012> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream)
+in <0x00051> System.Runtime.Remoting.RemotingServices:DeserializeCallData (System.Byte[] array)
+in (wrapper xdomain-invoke) System.AppDomain:Load (byte[])
+in (wrapper remoting-invoke-with-check) System.AppDomain:Load (byte[])
+in <0x00202> NModule.Core.Loader.ModuleLoader:LoadModule (System.Collections.ArrayList _parents, System.String _name, NModule.Core.Module.ModuleInfo _info, Boolean checking)
+in <0x000d0> NModule.Core.Loader.ModuleController:LoadModule (System.Collections.ArrayList _parents, System.String _name)
+in <0x0000f> NModule.Core.Loader.ModuleController:LoadModule (System.String _name)
+in <0x00053> NModule.Core.Test.NModuleTests:nm_ul_02 ()
+in <0x00000> <unknown method>
+in (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
+in <0x0006f> System.Reflection.MonoMethod:Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
+]]></stack-trace>
+                        </failure>
+                      </test-case>
+                    </results>
+                  </test-suite>
+                </results>
+              </test-suite>
+            </results>
+          </test-suite>
+        </results>
+      </test-suite>
+    </results>
+  </test-suite>
+</test-results>
\ No newline at end of file

Added: trunk/test/NModule.Core.Test/data/nm-ld/refs
===================================================================
--- trunk/test/NModule.Core.Test/data/nm-ld/refs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/data/nm-ld/refs	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1 @@
+-r:../../../../nmodule-build/src/NModule.Dependency.Parser.dll -r:../../../../nmodule-build/src/antlr-runtime.dll -r:../../../../nmodule-build/src/NModule.Core.dll -r:../../../../nmodule-build/src/NModule.Core.Loader.dll -r:../../../../nmodule-build/src/NModule.Core.Module.dll -r:../../../../nmodule-build/src/NModule.Dependency.Core.dll -r:../../../../nmodule-build/src/NModule.Dependency.Parser.dll 
\ No newline at end of file

Added: trunk/test/NModule.Core.Test/data/refs
===================================================================
--- trunk/test/NModule.Core.Test/data/refs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/data/refs	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1 @@
+-r:../../../../nmodule-build/src/NModule.Dependency.Parser.dll -r:../../../../nmodule-build/src/antlr-runtime.dll -r:../../../../nmodule-build/src/NModule.Core.dll -r:../../../../nmodule-build/src/NModule.Core.Loader.dll -r:../../../../nmodule-build/src/NModule.Core.Module.dll -r:../../../../nmodule-build/src/NModule.Dependency.Core.dll -r:../../../../nmodule-build/src/NModule.Dependency.Parser.dll 
\ No newline at end of file

Added: trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-01.cs
===================================================================
--- trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-01.cs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-01.cs	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1,49 @@
+//
+// nm-ld-01.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Reflection;
+using System.Collections;
+	
+using NModule.Core.Loader;
+using NModule.Core;
+using NModule.Core.Module;
+using NModule.Dependency.Core;
+using NModule.Dependency.Parser;
+using NModule.Dependency.Resolver;
+
+[assembly: AssemblyVersion ("1.0.*")]
+[assembly: ModuleRole ("")]
+
+namespace NModule.Core.Test.nm_ld {
+	public class nm_ld_01_module {
+		public nm_ld_01_module() {
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-01.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-03.cs
===================================================================
--- trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-03.cs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-03.cs	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1,49 @@
+//
+// nm-ld-03.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Reflection;
+using System.Collections;
+	
+using NModule.Core.Loader;
+using NModule.Core;
+using NModule.Core.Module;
+using NModule.Dependency.Core;
+using NModule.Dependency.Parser;
+using NModule.Dependency.Resolver;
+
+[assembly: AssemblyVersion ("1.0.*")]
+[assembly: ModuleRole ("")]
+
+namespace NModule.Core.Test.nm_ld {	
+	public class nm_ld_03_module {
+		public nm_ld_03_module() {
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-03.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-04.cs
===================================================================
--- trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-04.cs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-04.cs	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1,49 @@
+//
+// nm-ld-04.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Reflection;
+using System.Collections;
+	
+using NModule.Core.Loader;
+using NModule.Core;
+using NModule.Core.Module;
+using NModule.Dependency.Core;
+using NModule.Dependency.Parser;
+using NModule.Dependency.Resolver;
+
+[assembly: AssemblyVersion ("1.0.*")]
+[assembly: ModuleRole ("")]
+
+namespace NModule.Core.Test.nm_ld {	
+	public class nm_ld_04_module {
+		public nm_ld_04_module() {
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-04.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-05.cs
===================================================================
--- trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-05.cs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-05.cs	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1,49 @@
+//
+// nm-ld-05.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Reflection;
+using System.Collections;
+	
+using NModule.Core.Loader;
+using NModule.Core;
+using NModule.Core.Module;
+using NModule.Dependency.Core;
+using NModule.Dependency.Parser;
+using NModule.Dependency.Resolver;
+
+[assembly: AssemblyVersion ("1.0.*")]
+[assembly: ModuleRole ("")]
+
+namespace NModule.Core.Test.nm_ld {
+	public class nm_ld_05_module {
+		public nm_ld_05_module() {
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/data/test/nm-ld/nm-ld-05.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/NModule.Core.Test/data/test/nm-ul/nm-ul-01.cs
===================================================================
--- trunk/test/NModule.Core.Test/data/test/nm-ul/nm-ul-01.cs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/data/test/nm-ul/nm-ul-01.cs	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1,49 @@
+//
+// nm-ld-01.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Reflection;
+using System.Collections;
+	
+using NModule.Core.Loader;
+using NModule.Core;
+using NModule.Core.Module;
+using NModule.Dependency.Core;
+using NModule.Dependency.Parser;
+using NModule.Dependency.Resolver;
+
+[assembly: AssemblyVersion ("1.0.*")]
+[assembly: ModuleRole ("")]
+
+namespace NModule.Core.Test.nm_ul {
+	public class nm_ul_01_module {
+		public nm_ul_01_module() {
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/data/test/nm-ul/nm-ul-01.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/NModule.Core.Test/data/test/nm-ul/nm-ul-02.cs
===================================================================
--- trunk/test/NModule.Core.Test/data/test/nm-ul/nm-ul-02.cs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/data/test/nm-ul/nm-ul-02.cs	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1,49 @@
+//
+// nm-ld-01.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Reflection;
+using System.Collections;
+	
+using NModule.Core.Loader;
+using NModule.Core;
+using NModule.Core.Module;
+using NModule.Dependency.Core;
+using NModule.Dependency.Parser;
+using NModule.Dependency.Resolver;
+
+[assembly: AssemblyVersion ("1.0.*")]
+[assembly: ModuleRole ("")]
+
+namespace NModule.Core.Test.nm_ul {
+	public class nm_ul_02_module {
+		public nm_ul_02_module() {
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/data/test/nm-ul/nm-ul-02.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/NModule.Core.Test/nm-ld.cs
===================================================================
--- trunk/test/NModule.Core.Test/nm-ld.cs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/nm-ld.cs	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1,163 @@
+//
+// nm-ld.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+namespace NModule.Core.Test {
+
+	using System;
+	using System.Reflection;
+	using System.Collections;
+	
+	using NModule.Core.Loader;
+	using NModule.Core;
+	using NModule.Core.Module;
+	using NModule.Dependency.Core;
+	using NModule.Dependency.Parser;
+	using NModule.Dependency.Resolver;
+	
+	using NUnit.Framework;
+	
+	[TestFixture]
+	public class NModuleTests {
+	
+		public NModuleTests () {
+		}
+		
+		// nm-ld-01 - Loading with no dependencies, single dir search path.
+		[Test]
+		public void nm_ld_01 () {
+			Console.WriteLine ("nm_ld_01");
+			
+			ModuleController _mc = new ModuleController ();
+			
+			_mc.SearchPath.Add ("data/nm-ld/");
+			
+			_mc.LoadModule ("nm-ld-01");
+		}
+		
+		// nm-ld-02 - Loading with no dependencies, single dir search path, not found.
+		[Test]
+		[ExpectedException (typeof (ModuleNotFoundException))]
+		public void nm_ld_02 () {
+			Console.WriteLine ("nm_ld_02");
+			
+			ModuleController _mc = new ModuleController ();
+			
+			_mc.SearchPath.Add ("data/nm-ld");
+			
+			_mc.LoadModule ("nm-ld-02");
+		}
+		
+		// nm-ld-03 - Loading with no dependencies, multiple dir search path, first dir.
+		[Test]
+		public void nm_ld_03 () {
+			Console.WriteLine ("nm_ld_03");
+			
+			ModuleController _mc = new ModuleController ();
+			
+			_mc.SearchPath.Add ("data/nm-ld");
+			_mc.SearchPath.Add ("data/nm-ld-2");
+			_mc.SearchPath.Add ("data/nm-ld-3");
+			
+			_mc.LoadModule ("nm-ld-03");
+		}
+		
+		// nm-ld-04 - Loading with no dependencies, multiple dir search path, middle dir.
+		[Test]
+		public void nm_ld_04 () {
+			Console.WriteLine ("nm_ld_04");
+			ModuleController _mc = new ModuleController ();
+			
+			_mc.SearchPath.Add ("data/nm-ld-2");
+			_mc.SearchPath.Add ("data/nm-ld");
+			_mc.SearchPath.Add ("data/nm-ld-3");
+			
+			_mc.LoadModule ("nm-ld-04");
+		}
+		
+		// nm-ld-05 - Loading with no dependencies, multiple dir search path, last dir.
+		[Test]
+		public void nm_ld_05 () {
+			Console.WriteLine ("nm_ld_05");
+			
+			ModuleController _mc = new ModuleController ();
+			
+			_mc.SearchPath.Add ("data/nm-ld-2");
+			_mc.SearchPath.Add ("data/nm-ld-3");
+			_mc.SearchPath.Add ("data/nm-ld");
+			
+			_mc.LoadModule ("nm-ld-05");
+		}
+		
+		// nm-ld-06 - Loading with no dependencies, multiple dir search path, not found.
+		[Test]
+		[ExpectedException (typeof (ModuleNotFoundException))]
+		public void nm_ld_06 () {
+			Console.WriteLine ("nm_ld_06");
+			
+			ModuleController _mc = new ModuleController ();
+			
+			_mc.SearchPath.Add ("data/nm-ld");
+			_mc.SearchPath.Add ("data/nm-ld-2");
+			_mc.SearchPath.Add ("data/nm-ld-3");
+			
+			_mc.LoadModule ("nm-ld-06");
+		}
+		
+		// nm-ul-01 - Unloading with no dependencies
+		[Test]
+		public void nm_ul_01 () {
+			Console.WriteLine ("nm_ul_01");
+			
+			ModuleController _mc = new ModuleController ();
+			
+			_mc.SearchPath.Add ("data/nm-ul");
+			
+			_mc.LoadModule ("nm-ul-01");
+			
+			_mc.UnloadModule ("nm-ul-01");
+		}
+		
+		// nm-ul-02 - Unloading with ref count > 1
+		[Test]
+		[ExpectedException (typeof (DomainStillReferencedException))]
+		public void nm_ul_02 () {
+			Console.WriteLine ("nm_ul_02");
+			
+			ModuleController _mc = new ModuleController ();
+			
+			_mc.SearchPath.Add ("data/nm-ul");
+			
+			_mc.LoadModule ("nm-ul-02");
+			
+			_mc.LoadModule ("nm-ul-02");
+			
+			_mc.UnloadModule ("nm-ul-02");
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/nm-ld.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/NModule.Core.Test/refs
===================================================================
--- trunk/test/NModule.Core.Test/refs	2005-06-27 20:37:28 UTC (rev 30)
+++ trunk/test/NModule.Core.Test/refs	2005-06-29 11:58:54 UTC (rev 31)
@@ -0,0 +1 @@
+-r:../../../nmodule-build/src/NModule.Dependency.Parser.dll -r:../../../nmodule-build/src/antlr-runtime.dll -r:../../../nmodule-build/src/NModule.Core.dll -r:../../../nmodule-build/src/NModule.Core.Loader.dll -r:../../../nmodule-build/src/NModule.Core.Module.dll -r:../../../nmodule-build/src/NModule.Dependency.Core.dll -r:../../../nmodule-build/src/NModule.Dependency.Parser.dll 



From urilith at sheep.berlios.de  Wed Jun 29 13:59:14 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Wed, 29 Jun 2005 13:59:14 +0200
Subject: [nmodule-commits] r32 - in trunk: . test/NModule.Core.Test/data test/NModule.Core.Test/data/src test/NModule.Core.Test/data/src/nm-ld test/NModule.Core.Test/data/src/nm-ul
Message-ID: <200506291159.j5TBxEqv010310@sheep.berlios.de>

Author: urilith
Date: 2005-06-29 13:59:13 +0200 (Wed, 29 Jun 2005)
New Revision: 32

Added:
   trunk/test/NModule.Core.Test/data/src/
   trunk/test/NModule.Core.Test/data/src/nm-ld/
   trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-01.cs
   trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-03.cs
   trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-04.cs
   trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-05.cs
   trunk/test/NModule.Core.Test/data/src/nm-ul/
   trunk/test/NModule.Core.Test/data/src/nm-ul/nm-ul-01.cs
   trunk/test/NModule.Core.Test/data/src/nm-ul/nm-ul-02.cs
Removed:
   trunk/test/NModule.Core.Test/data/refs
   trunk/test/NModule.Core.Test/data/test/
Modified:
   trunk/
   trunk/ChangeLog
Log:
 r133 at dreamshadow:  urilith | 2005-06-29 06:57:19 -0500
 2005-06-29 Michael Tindal <urilith at gentoo.org>
 
   * Test cleanups.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:132
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:133

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-29 11:58:54 UTC (rev 31)
+++ trunk/ChangeLog	2005-06-29 11:59:13 UTC (rev 32)
@@ -1,5 +1,9 @@
 2005-06-29 Michael Tindal <urilith at gentoo.org>
 
+	* Test cleanups.
+
+2005-06-29 Michael Tindal <urilith at gentoo.org>
+
 	* Random fixes to all of the below to fix some bugs, also added the first two components of the test suite.
 	* Further work is blocking on a Mono AppDomain bug.
 	* nmodule.mds: 

Deleted: trunk/test/NModule.Core.Test/data/refs
===================================================================
--- trunk/test/NModule.Core.Test/data/refs	2005-06-29 11:58:54 UTC (rev 31)
+++ trunk/test/NModule.Core.Test/data/refs	2005-06-29 11:59:13 UTC (rev 32)
@@ -1 +0,0 @@
--r:../../../../nmodule-build/src/NModule.Dependency.Parser.dll -r:../../../../nmodule-build/src/antlr-runtime.dll -r:../../../../nmodule-build/src/NModule.Core.dll -r:../../../../nmodule-build/src/NModule.Core.Loader.dll -r:../../../../nmodule-build/src/NModule.Core.Module.dll -r:../../../../nmodule-build/src/NModule.Dependency.Core.dll -r:../../../../nmodule-build/src/NModule.Dependency.Parser.dll 
\ No newline at end of file

Added: trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-01.cs
===================================================================
--- trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-01.cs	2005-06-29 11:58:54 UTC (rev 31)
+++ trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-01.cs	2005-06-29 11:59:13 UTC (rev 32)
@@ -0,0 +1,49 @@
+//
+// nm-ld-01.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Reflection;
+using System.Collections;
+	
+using NModule.Core.Loader;
+using NModule.Core;
+using NModule.Core.Module;
+using NModule.Dependency.Core;
+using NModule.Dependency.Parser;
+using NModule.Dependency.Resolver;
+
+[assembly: AssemblyVersion ("1.0.*")]
+[assembly: ModuleRole ("")]
+
+namespace NModule.Core.Test.nm_ld {
+	public class nm_ld_01_module {
+		public nm_ld_01_module() {
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-01.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-03.cs
===================================================================
--- trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-03.cs	2005-06-29 11:58:54 UTC (rev 31)
+++ trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-03.cs	2005-06-29 11:59:13 UTC (rev 32)
@@ -0,0 +1,49 @@
+//
+// nm-ld-03.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Reflection;
+using System.Collections;
+	
+using NModule.Core.Loader;
+using NModule.Core;
+using NModule.Core.Module;
+using NModule.Dependency.Core;
+using NModule.Dependency.Parser;
+using NModule.Dependency.Resolver;
+
+[assembly: AssemblyVersion ("1.0.*")]
+[assembly: ModuleRole ("")]
+
+namespace NModule.Core.Test.nm_ld {	
+	public class nm_ld_03_module {
+		public nm_ld_03_module() {
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-03.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-04.cs
===================================================================
--- trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-04.cs	2005-06-29 11:58:54 UTC (rev 31)
+++ trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-04.cs	2005-06-29 11:59:13 UTC (rev 32)
@@ -0,0 +1,49 @@
+//
+// nm-ld-04.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Reflection;
+using System.Collections;
+	
+using NModule.Core.Loader;
+using NModule.Core;
+using NModule.Core.Module;
+using NModule.Dependency.Core;
+using NModule.Dependency.Parser;
+using NModule.Dependency.Resolver;
+
+[assembly: AssemblyVersion ("1.0.*")]
+[assembly: ModuleRole ("")]
+
+namespace NModule.Core.Test.nm_ld {	
+	public class nm_ld_04_module {
+		public nm_ld_04_module() {
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-04.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-05.cs
===================================================================
--- trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-05.cs	2005-06-29 11:58:54 UTC (rev 31)
+++ trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-05.cs	2005-06-29 11:59:13 UTC (rev 32)
@@ -0,0 +1,49 @@
+//
+// nm-ld-05.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Reflection;
+using System.Collections;
+	
+using NModule.Core.Loader;
+using NModule.Core;
+using NModule.Core.Module;
+using NModule.Dependency.Core;
+using NModule.Dependency.Parser;
+using NModule.Dependency.Resolver;
+
+[assembly: AssemblyVersion ("1.0.*")]
+[assembly: ModuleRole ("")]
+
+namespace NModule.Core.Test.nm_ld {
+	public class nm_ld_05_module {
+		public nm_ld_05_module() {
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/data/src/nm-ld/nm-ld-05.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/NModule.Core.Test/data/src/nm-ul/nm-ul-01.cs
===================================================================
--- trunk/test/NModule.Core.Test/data/src/nm-ul/nm-ul-01.cs	2005-06-29 11:58:54 UTC (rev 31)
+++ trunk/test/NModule.Core.Test/data/src/nm-ul/nm-ul-01.cs	2005-06-29 11:59:13 UTC (rev 32)
@@ -0,0 +1,49 @@
+//
+// nm-ld-01.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Reflection;
+using System.Collections;
+	
+using NModule.Core.Loader;
+using NModule.Core;
+using NModule.Core.Module;
+using NModule.Dependency.Core;
+using NModule.Dependency.Parser;
+using NModule.Dependency.Resolver;
+
+[assembly: AssemblyVersion ("1.0.*")]
+[assembly: ModuleRole ("")]
+
+namespace NModule.Core.Test.nm_ul {
+	public class nm_ul_01_module {
+		public nm_ul_01_module() {
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/data/src/nm-ul/nm-ul-01.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp

Added: trunk/test/NModule.Core.Test/data/src/nm-ul/nm-ul-02.cs
===================================================================
--- trunk/test/NModule.Core.Test/data/src/nm-ul/nm-ul-02.cs	2005-06-29 11:58:54 UTC (rev 31)
+++ trunk/test/NModule.Core.Test/data/src/nm-ul/nm-ul-02.cs	2005-06-29 11:59:13 UTC (rev 32)
@@ -0,0 +1,49 @@
+//
+// nm-ld-01.cs
+//
+// Author:
+//     Michael Tindal <urilith at gentoo.org>
+//
+// Copyright (C) 2005 Michael Tindal and the individuals listed on
+// the ChangeLog entries.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Reflection;
+using System.Collections;
+	
+using NModule.Core.Loader;
+using NModule.Core;
+using NModule.Core.Module;
+using NModule.Dependency.Core;
+using NModule.Dependency.Parser;
+using NModule.Dependency.Resolver;
+
+[assembly: AssemblyVersion ("1.0.*")]
+[assembly: ModuleRole ("")]
+
+namespace NModule.Core.Test.nm_ul {
+	public class nm_ul_02_module {
+		public nm_ul_02_module() {
+		}
+	}
+}


Property changes on: trunk/test/NModule.Core.Test/data/src/nm-ul/nm-ul-02.cs
___________________________________________________________________
Name: svn:mime-type
   + text/cpp



From urilith at sheep.berlios.de  Thu Jun 30 09:50:55 2005
From: urilith at sheep.berlios.de (Michael Tindal at BerliOS)
Date: Thu, 30 Jun 2005 09:50:55 +0200
Subject: [nmodule-commits] r33 - in trunk: . src/NModule.Core.Loader src/NModule.Core.Module test/NModule.Core.Test
Message-ID: <200506300750.j5U7otZi014153@sheep.berlios.de>

Author: urilith
Date: 2005-06-30 09:50:54 +0200 (Thu, 30 Jun 2005)
New Revision: 33

Added:
   trunk/NModule.build
Removed:
   trunk/test/NModule.Core.Test/TestResult.xml
Modified:
   trunk/
   trunk/ChangeLog
   trunk/src/NModule.Core.Loader/ModuleController.cs
   trunk/src/NModule.Core.Module/ModuleInfo.cs
Log:
 r136 at dreamshadow:  urilith | 2005-06-30 02:49:52 -0500
 2005-06-30 Michael Tindal <urilith at gentoo.org>
 
   * src/NModule.Core.Loader/ModuleController.cs: Fixed wrong initial ref count in IncRef, fixed DecRefs for the no dependencies case.
   * src/NModule.Core.Module/ModuleInfo.cs: Corrected the caught exception for dependencies.
   * NModule.build: Added, this is not finished, and will not work, don't use it.
 



Property changes on: trunk
___________________________________________________________________
Name: svk:merge
   - b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:133
   + b743595e-7af7-0310-b020-feacd67de632:/local/nmodule/trunk:136

Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2005-06-29 11:59:13 UTC (rev 32)
+++ trunk/ChangeLog	2005-06-30 07:50:54 UTC (rev 33)
@@ -1,3 +1,9 @@
+2005-06-30 Michael Tindal <urilith at gentoo.org>
+
+	* src/NModule.Core.Loader/ModuleController.cs:  Fixed wrong initial ref count in IncRef, fixed DecRefs for the no dependencies case.
+	* src/NModule.Core.Module/ModuleInfo.cs: Corrected the caught exception for dependencies.
+	* NModule.build: Added, this is not finished, and will not work, don't use it.
+
 2005-06-29 Michael Tindal <urilith at gentoo.org>
 
 	* Test cleanups.

Added: trunk/NModule.build
===================================================================
--- trunk/NModule.build	2005-06-29 11:59:13 UTC (rev 32)
+++ trunk/NModule.build	2005-06-30 07:50:54 UTC (rev 33)
@@ -0,0 +1,38 @@
+<!--
+NModule.build
+
+Author:
+    Michael Tindal <urilith at gentoo.org>
+
+Copyright (C) 2005 Michael Tindal and the individuals listed on
+the ChangeLog entries.
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<project name="NModule" default="all" basedir=".">
+  <description>NModule build files.</description>
+
+  <!-- properties -->
+  <property name="debug" value="true" overwrite="false" />
+  <property name="release" value="false" overwrite="false" />
+  <property name="strong" value="false" overwrite="false" />
+
+  

Modified: trunk/src/NModule.Core.Loader/ModuleController.cs
===================================================================
--- trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-29 11:59:13 UTC (rev 32)
+++ trunk/src/NModule.Core.Loader/ModuleController.cs	2005-06-30 07:50:54 UTC (rev 33)
@@ -110,6 +110,9 @@
 		}
 		
 		protected void DecRefs (DepNode _x) {
+			if (_x == null)
+				return;
+
 			foreach (DepNode _d in _x.Children) {
 				DecRefs (_d);
 			}
@@ -129,6 +132,8 @@
 			ModuleInfo _info = (ModuleInfo)_info_map[_name];
 			
 			AppDomain _domain = (AppDomain)_app_domain_map[_name];
+			Console.WriteLine ("UnloadModule (Domain: {0}, RefCount: {1})", _name, (int)_ref_counts[_domain]);
+
 			if (((int)_ref_counts[_domain]) > 1) {
 				throw new DomainStillReferencedException (string.Format ("The domain holding the module {0} cannot be unloaded because it is still being referenced.", _name));
 			}
@@ -160,7 +165,7 @@
 #region Domain Reference Counts
 		protected void IncRef (AppDomain _domain) {
 			if (!_ref_counts.Contains (_domain)) {
-				_ref_counts.Add (_domain, 1);
+				_ref_counts.Add (_domain, 0);
 			}
 			
 			_ref_counts[_domain] = ((int)_ref_counts[_domain]) + 1;

Modified: trunk/src/NModule.Core.Module/ModuleInfo.cs
===================================================================
--- trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-29 11:59:13 UTC (rev 32)
+++ trunk/src/NModule.Core.Module/ModuleInfo.cs	2005-06-30 07:50:54 UTC (rev 33)
@@ -61,7 +61,7 @@
 			
 			try {
 				_depAttr = ((ModuleDependencyAttribute)(_asm.GetCustomAttributes (typeof (ModuleDependencyAttribute), false)[0]));
-			} catch (ArgumentOutOfRangeException e) {
+			} catch (IndexOutOfRangeException) {
 				_depAttr = null;
 			}
 			
@@ -75,7 +75,7 @@
 				_parser.expr (_dependencies);
 			} else
 				_dependencies = null;
-				
+			
 			ModuleRoleAttribute _roleAttr = ((ModuleRoleAttribute)(_asm.GetCustomAttributes (typeof (ModuleRoleAttribute), false)[0]));
 			
 			if (_roleAttr != null) {

Deleted: trunk/test/NModule.Core.Test/TestResult.xml
===================================================================
--- trunk/test/NModule.Core.Test/TestResult.xml	2005-06-29 11:59:13 UTC (rev 32)
+++ trunk/test/NModule.Core.Test/TestResult.xml	2005-06-30 07:50:54 UTC (rev 33)
@@ -1,194 +0,0 @@
-<?xml version="1.0" encoding="utf-8" standalone="no"?>
-<!--This file represents the results of running a test suite-->
-<test-results name="/home/urilith/development/nmodule/test/NModule.Core.Test/NModule.Core.Test.dll" total="8" failures="6" not-run="0" date="2005-06-29" time="06:44:34">
-  <test-suite name="/home/urilith/development/nmodule/test/NModule.Core.Test/NModule.Core.Test.dll" success="False" time="8.071" asserts="0">
-    <results>
-      <test-suite name="NModule" success="False" time="8.046" asserts="0">
-        <results>
-          <test-suite name="Core" success="False" time="8.026" asserts="0">
-            <results>
-              <test-suite name="Test" success="False" time="8.008" asserts="0">
-                <results>
-                  <test-suite name="NModuleTests" success="False" time="7.625" asserts="0">
-                    <results>
-                      <test-case name="NModule.Core.Test.NModuleTests.nm_ld_01" executed="True" success="False" time="1.440" asserts="0">
-                        <failure>
-                          <message><![CDATA[System.IO.FileNotFoundException : nm-ld-01, Version=1.0.2005.41104, Culture=neutral]]></message>
-                          <stack-trace><![CDATA[in <0x00000> <unknown method>
-in (wrapper managed-to-native) System.AppDomain:LoadAssembly (string,System.Security.Policy.Evidence,bool)
-in <0x00019> System.AppDomain:Load (System.String assemblyString)
-in (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)
-in <0x0001b> System.Reflection.Assembly:Load (System.String assemblyString)
-in <0x00086> System.UnitySerializationHolder:GetRealObject (StreamingContext context)
-in <0x003c6> System.Runtime.Serialization.ObjectRecord:LoadData (System.Runtime.Serialization.ObjectManager manager, ISurrogateSelector selector, StreamingContext context)
-in <0x00100> System.Runtime.Serialization.ObjectManager:DoFixups ()
-in <0x0003f> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadNextObject (System.IO.BinaryReader reader)
-in <0x000ac> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadObjectGraph (System.IO.BinaryReader reader, Boolean readHeaders, System.Object result, System.Runtime.Remoting.Messaging.Header[] headers)
-in <0x0011c> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler)
-in <0x00012> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream)
-in <0x00051> System.Runtime.Remoting.RemotingServices:DeserializeCallData (System.Byte[] array)
-in (wrapper xdomain-invoke) System.AppDomain:Load (byte[])
-in (wrapper remoting-invoke-with-check) System.AppDomain:Load (byte[])
-in <0x00202> NModule.Core.Loader.ModuleLoader:LoadModule (System.Collections.ArrayList _parents, System.String _name, NModule.Core.Module.ModuleInfo _info, Boolean checking)
-in <0x000d0> NModule.Core.Loader.ModuleController:LoadModule (System.Collections.ArrayList _parents, System.String _name)
-in <0x0000f> NModule.Core.Loader.ModuleController:LoadModule (System.String _name)
-in <0x00053> NModule.Core.Test.NModuleTests:nm_ld_01 ()
-in <0x00000> <unknown method>
-in (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
-in <0x0006f> System.Reflection.MonoMethod:Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
-]]></stack-trace>
-                        </failure>
-                      </test-case>
-                      <test-case name="NModule.Core.Test.NModuleTests.nm_ld_02" executed="True" success="True" time="0.011" asserts="0" />
-                      <test-case name="NModule.Core.Test.NModuleTests.nm_ld_03" executed="True" success="False" time="0.937" asserts="0">
-                        <failure>
-                          <message><![CDATA[System.IO.FileNotFoundException : nm-ld-03, Version=1.0.2005.41104, Culture=neutral]]></message>
-                          <stack-trace><![CDATA[in <0x00000> <unknown method>
-in (wrapper managed-to-native) System.AppDomain:LoadAssembly (string,System.Security.Policy.Evidence,bool)
-in <0x00019> System.AppDomain:Load (System.String assemblyString)
-in (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)
-in <0x0001b> System.Reflection.Assembly:Load (System.String assemblyString)
-in <0x00086> System.UnitySerializationHolder:GetRealObject (StreamingContext context)
-in <0x003c6> System.Runtime.Serialization.ObjectRecord:LoadData (System.Runtime.Serialization.ObjectManager manager, ISurrogateSelector selector, StreamingContext context)
-in <0x00100> System.Runtime.Serialization.ObjectManager:DoFixups ()
-in <0x0003f> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadNextObject (System.IO.BinaryReader reader)
-in <0x000ac> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadObjectGraph (System.IO.BinaryReader reader, Boolean readHeaders, System.Object result, System.Runtime.Remoting.Messaging.Header[] headers)
-in <0x0011c> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler)
-in <0x00012> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream)
-in <0x00051> System.Runtime.Remoting.RemotingServices:DeserializeCallData (System.Byte[] array)
-in (wrapper xdomain-invoke) System.AppDomain:Load (byte[])
-in (wrapper remoting-invoke-with-check) System.AppDomain:Load (byte[])
-in <0x00202> NModule.Core.Loader.ModuleLoader:LoadModule (System.Collections.ArrayList _parents, System.String _name, NModule.Core.Module.ModuleInfo _info, Boolean checking)
-in <0x000d0> NModule.Core.Loader.ModuleController:LoadModule (System.Collections.ArrayList _parents, System.String _name)
-in <0x0000f> NModule.Core.Loader.ModuleController:LoadModule (System.String _name)
-in <0x0008d> NModule.Core.Test.NModuleTests:nm_ld_03 ()
-in <0x00000> <unknown method>
-in (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
-in <0x0006f> System.Reflection.MonoMethod:Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
-]]></stack-trace>
-                        </failure>
-                      </test-case>
-                      <test-case name="NModule.Core.Test.NModuleTests.nm_ld_04" executed="True" success="False" time="0.977" asserts="0">
-                        <failure>
-                          <message><![CDATA[System.IO.FileNotFoundException : nm-ld-04, Version=1.0.2005.41104, Culture=neutral]]></message>
-                          <stack-trace><![CDATA[in <0x00000> <unknown method>
-in (wrapper managed-to-native) System.AppDomain:LoadAssembly (string,System.Security.Policy.Evidence,bool)
-in <0x00019> System.AppDomain:Load (System.String assemblyString)
-in (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)
-in <0x0001b> System.Reflection.Assembly:Load (System.String assemblyString)
-in <0x00086> System.UnitySerializationHolder:GetRealObject (StreamingContext context)
-in <0x003c6> System.Runtime.Serialization.ObjectRecord:LoadData (System.Runtime.Serialization.ObjectManager manager, ISurrogateSelector selector, StreamingContext context)
-in <0x00100> System.Runtime.Serialization.ObjectManager:DoFixups ()
-in <0x0003f> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadNextObject (System.IO.BinaryReader reader)
-in <0x000ac> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadObjectGraph (System.IO.BinaryReader reader, Boolean readHeaders, System.Object result, System.Runtime.Remoting.Messaging.Header[] headers)
-in <0x0011c> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler)
-in <0x00012> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream)
-in <0x00051> System.Runtime.Remoting.RemotingServices:DeserializeCallData (System.Byte[] array)
-in (wrapper xdomain-invoke) System.AppDomain:Load (byte[])
-in (wrapper remoting-invoke-with-check) System.AppDomain:Load (byte[])
-in <0x00202> NModule.Core.Loader.ModuleLoader:LoadModule (System.Collections.ArrayList _parents, System.String _name, NModule.Core.Module.ModuleInfo _info, Boolean checking)
-in <0x000d0> NModule.Core.Loader.ModuleController:LoadModule (System.Collections.ArrayList _parents, System.String _name)
-in <0x0000f> NModule.Core.Loader.ModuleController:LoadModule (System.String _name)
-in <0x0008d> NModule.Core.Test.NModuleTests:nm_ld_04 ()
-in <0x00000> <unknown method>
-in (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
-in <0x0006f> System.Reflection.MonoMethod:Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
-]]></stack-trace>
-                        </failure>
-                      </test-case>
-                      <test-case name="NModule.Core.Test.NModuleTests.nm_ld_05" executed="True" success="False" time="0.983" asserts="0">
-                        <failure>
-                          <message><![CDATA[System.IO.FileNotFoundException : nm-ld-05, Version=1.0.2005.41105, Culture=neutral]]></message>
-                          <stack-trace><![CDATA[in <0x00000> <unknown method>
-in (wrapper managed-to-native) System.AppDomain:LoadAssembly (string,System.Security.Policy.Evidence,bool)
-in <0x00019> System.AppDomain:Load (System.String assemblyString)
-in (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)
-in <0x0001b> System.Reflection.Assembly:Load (System.String assemblyString)
-in <0x00086> System.UnitySerializationHolder:GetRealObject (StreamingContext context)
-in <0x003c6> System.Runtime.Serialization.ObjectRecord:LoadData (System.Runtime.Serialization.ObjectManager manager, ISurrogateSelector selector, StreamingContext context)
-in <0x00100> System.Runtime.Serialization.ObjectManager:DoFixups ()
-in <0x0003f> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadNextObject (System.IO.BinaryReader reader)
-in <0x000ac> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadObjectGraph (System.IO.BinaryReader reader, Boolean readHeaders, System.Object result, System.Runtime.Remoting.Messaging.Header[] headers)
-in <0x0011c> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler)
-in <0x00012> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream)
-in <0x00051> System.Runtime.Remoting.RemotingServices:DeserializeCallData (System.Byte[] array)
-in (wrapper xdomain-invoke) System.AppDomain:Load (byte[])
-in (wrapper remoting-invoke-with-check) System.AppDomain:Load (byte[])
-in <0x00202> NModule.Core.Loader.ModuleLoader:LoadModule (System.Collections.ArrayList _parents, System.String _name, NModule.Core.Module.ModuleInfo _info, Boolean checking)
-in <0x000d0> NModule.Core.Loader.ModuleController:LoadModule (System.Collections.ArrayList _parents, System.String _name)
-in <0x0000f> NModule.Core.Loader.ModuleController:LoadModule (System.String _name)
-in <0x0008d> NModule.Core.Test.NModuleTests:nm_ld_05 ()
-in <0x00000> <unknown method>
-in (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
-in <0x0006f> System.Reflection.MonoMethod:Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
-]]></stack-trace>
-                        </failure>
-                      </test-case>
-                      <test-case name="NModule.Core.Test.NModuleTests.nm_ld_06" executed="True" success="True" time="0.140" asserts="0" />
-                      <test-case name="NModule.Core.Test.NModuleTests.nm_ul_01" executed="True" success="False" time="1.054" asserts="0">
-                        <failure>
-                          <message><![CDATA[System.IO.FileNotFoundException : nm-ul-01, Version=1.0.2005.41123, Culture=neutral]]></message>
-                          <stack-trace><![CDATA[in <0x00000> <unknown method>
-in (wrapper managed-to-native) System.AppDomain:LoadAssembly (string,System.Security.Policy.Evidence,bool)
-in <0x00019> System.AppDomain:Load (System.String assemblyString)
-in (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)
-in <0x0001b> System.Reflection.Assembly:Load (System.String assemblyString)
-in <0x00086> System.UnitySerializationHolder:GetRealObject (StreamingContext context)
-in <0x003c6> System.Runtime.Serialization.ObjectRecord:LoadData (System.Runtime.Serialization.ObjectManager manager, ISurrogateSelector selector, StreamingContext context)
-in <0x00100> System.Runtime.Serialization.ObjectManager:DoFixups ()
-in <0x0003f> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadNextObject (System.IO.BinaryReader reader)
-in <0x000ac> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadObjectGraph (System.IO.BinaryReader reader, Boolean readHeaders, System.Object result, System.Runtime.Remoting.Messaging.Header[] headers)
-in <0x0011c> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler)
-in <0x00012> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream)
-in <0x00051> System.Runtime.Remoting.RemotingServices:DeserializeCallData (System.Byte[] array)
-in (wrapper xdomain-invoke) System.AppDomain:Load (byte[])
-in (wrapper remoting-invoke-with-check) System.AppDomain:Load (byte[])
-in <0x00202> NModule.Core.Loader.ModuleLoader:LoadModule (System.Collections.ArrayList _parents, System.String _name, NModule.Core.Module.ModuleInfo _info, Boolean checking)
-in <0x000d0> NModule.Core.Loader.ModuleController:LoadModule (System.Collections.ArrayList _parents, System.String _name)
-in <0x0000f> NModule.Core.Loader.ModuleController:LoadModule (System.String _name)
-in <0x00053> NModule.Core.Test.NModuleTests:nm_ul_01 ()
-in <0x00000> <unknown method>
-in (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
-in <0x0006f> System.Reflection.MonoMethod:Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
-]]></stack-trace>
-                        </failure>
-                      </test-case>
-                      <test-case name="NModule.Core.Test.NModuleTests.nm_ul_02" executed="True" success="False" time="1.977" asserts="0">
-                        <failure>
-                          <message><![CDATA[Expected: DomainStillReferencedException but was FileNotFoundException]]></message>
-                          <stack-trace><![CDATA[in <0x00000> <unknown method>
-in (wrapper managed-to-native) System.AppDomain:LoadAssembly (string,System.Security.Policy.Evidence,bool)
-in <0x00019> System.AppDomain:Load (System.String assemblyString)
-in (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)
-in <0x0001b> System.Reflection.Assembly:Load (System.String assemblyString)
-in <0x00086> System.UnitySerializationHolder:GetRealObject (StreamingContext context)
-in <0x003c6> System.Runtime.Serialization.ObjectRecord:LoadData (System.Runtime.Serialization.ObjectManager manager, ISurrogateSelector selector, StreamingContext context)
-in <0x00100> System.Runtime.Serialization.ObjectManager:DoFixups ()
-in <0x0003f> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadNextObject (System.IO.BinaryReader reader)
-in <0x000ac> System.Runtime.Serialization.Formatters.Binary.ObjectReader:ReadObjectGraph (System.IO.BinaryReader reader, Boolean readHeaders, System.Object result, System.Runtime.Remoting.Messaging.Header[] headers)
-in <0x0011c> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler)
-in <0x00012> System.Runtime.Serialization.Formatters.Binary.BinaryFormatter:Deserialize (System.IO.Stream serializationStream)
-in <0x00051> System.Runtime.Remoting.RemotingServices:DeserializeCallData (System.Byte[] array)
-in (wrapper xdomain-invoke) System.AppDomain:Load (byte[])
-in (wrapper remoting-invoke-with-check) System.AppDomain:Load (byte[])
-in <0x00202> NModule.Core.Loader.ModuleLoader:LoadModule (System.Collections.ArrayList _parents, System.String _name, NModule.Core.Module.ModuleInfo _info, Boolean checking)
-in <0x000d0> NModule.Core.Loader.ModuleController:LoadModule (System.Collections.ArrayList _parents, System.String _name)
-in <0x0000f> NModule.Core.Loader.ModuleController:LoadModule (System.String _name)
-in <0x00053> NModule.Core.Test.NModuleTests:nm_ul_02 ()
-in <0x00000> <unknown method>
-in (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
-in <0x0006f> System.Reflection.MonoMethod:Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
-]]></stack-trace>
-                        </failure>
-                      </test-case>
-                    </results>
-                  </test-suite>
-                </results>
-              </test-suite>
-            </results>
-          </test-suite>
-        </results>
-      </test-suite>
-    </results>
-  </test-suite>
-</test-results>
\ No newline at end of file



